<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Log | 柯小小西の小水滴]]></title>
  <link href="http://kxcoder.github.io/blog/categories/log/atom.xml" rel="self"/>
  <link href="http://kxcoder.github.io/"/>
  <updated>2015-10-07T22:02:29+08:00</updated>
  <id>http://kxcoder.github.io/</id>
  <author>
    <name><![CDATA[柯小小西]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Slf4j MDC 使用和 基于 Logback 的实现分析]]></title>
    <link href="http://kxcoder.github.io/blog/2015/04/29/LogBack-Implemention-And-Slf4j-Mdc/"/>
    <updated>2015-04-29T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2015/04/29/LogBack-Implemention-And-Slf4j-Mdc</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#MdcIntroduce">Slf4j MDC 介绍</a></li>
  <li><a href="#PrepareKnowledge">前置知识介绍</a></li>
  <li><a href="#Slf4jMdc">Log MDC 实现分析</a></li>
  <li><a href="#LogbackPrint">Logback 日志输出实现</a></li>
  <li><a href="#End">后记</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>如今，在 Java 开发中，日志的打印输出是必不可少的，<code>Slf4j + LogBack</code> 的组合是最通用的方式。</p>

<p>关于 <code>Slf4j</code> 的介绍，请参考本博客<a href="http://ketao1989.github.io/posts/Java-slf4j-Introduce.html">http://ketao1989.github.io/posts/Java-slf4j-Introduce.html</a></p>

<p>有了日志之后，我们就可以追踪各种线上问题。但是，在分布式系统中，各种无关日志穿行其中，导致我们可能无法直接定位整个操作流程。因此，我们可能需要对一个用户的操作流程进行归类标记，比如使用<code>线程+时间戳</code>，或者用户身份标识等；如此，我们可以从大量日志信息中grep出某个用户的操作流程，或者某个时间的流转记录。</p>

<!--more-->

<p>因此，这就有了 <code>Slf4j MDC</code> 方法。</p>

<h2 id="a-idmdcintroduceslf4j-mdc-a"><a id="MdcIntroduce">Slf4j MDC 介绍</a></h2>

<p>MDC ( Mapped Diagnostic Contexts )，顾名思义，其目的是为了便于我们诊断线上问题而出现的方法工具类。虽然，Slf4j 是用来适配其他的日志具体实现包的，但是针对 MDC功能，目前只有logback 以及 log4j 支持，或者说由于该功能的重要性，slf4j 专门为logback系列包装接口提供外部调用(玩笑～：）)。</p>

<blockquote>
  <blockquote>
    <p>logback 和 log4j 的作者为同一人，所以这里统称logback系列。</p>
  </blockquote>
</blockquote>

<p>先来看看 MDC 对外提高的接口：</p>

<p><figure class='code'><figcaption><span>MDC对外接口 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MDC</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//Put a context value as identified by key</span>
</span><span class='line'>  <span class="c1">//into the current thread’s context map.</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">val</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//Get the context identified by the key parameter.</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//Remove the context identified by the key parameter.</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//Clear all entries in the MDC.</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">();</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<blockquote>
  <blockquote>
    <p>接口定义非常简单，此外，其使用也非常简单。</p>

  </blockquote>
</blockquote>

<p>如上代码所示，一般，我们在代码中，只需要将指定的值put到线程上下文的Map中，然后，在对应的地方使用 get方法获取对应的值。此外，对于一些线程池使用的应用场景，可能我们在最后使用结束时，需要调用clear方法来清洗将要丢弃的数据。</p>

<p>然后，看看一个MDC使用的简单示例。</p>

<p><figure class='code'><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">LogTest</span><span class="o">.</span><span class="na">class</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MDC</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;THREAD_ID&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;纯字符串信息的info级别日志&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>然后看看logback的输出模板配置：</p>

<p><figure class='code'><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;log.base&quot;</span> <span class="na">value=</span><span class="s">&quot;${catalina.base}/logs&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;contextlistener</span> <span class="na">class=</span><span class="s">&quot;ch.qos.logback.classic.jul.LevelChangePropagator&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;resetjul&gt;</span>true<span class="nt">&lt;/resetjul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/contextlistener&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&quot;console&quot;</span> <span class="na">class=</span><span class="s">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;encoder</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;pattern&gt;</span>[%d{yyyy-MM-dd HH:mm:ss} %highlight(%-5p) %logger.%M\(%F:%L\)] %X{THREAD_ID} %msg%n<span class="nt">&lt;/pattern&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/encoder&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/appender&gt;</span>
</span><span class='line'>    <span class="nt">&lt;root</span> <span class="na">level=</span><span class="s">&quot;INFO&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">&quot;console&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/root&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>于是，就有了输出：</p>

<pre><code>[2015-04-30 15:34:35 INFO  io.github.ketao1989.log4j.LogTest.main(LogTest.java:29)] 1 纯字符串信息的info级别日志
</code></pre>

<blockquote>
  <blockquote>
    <p>当我们在web应用中，对服务的所有请求前进行filter拦截，然后加上自定义的唯一标识到MDC中，就可以在所有日志输出中，清楚看到某用户的操作流程。关于web MDC，会单独一遍博客介绍。</p>

    <p>此外，关于logback 是如何将模板中的变量替换成具体的值，会在下一节分析。</p>

    <p>在日志模板logback.xml 中，使用 <code>%X{ }</code>来占位，替换到对应的 MDC 中 key 的值。</p>

  </blockquote>
</blockquote>

<h2 id="a-idprepareknowledgea"><a id="PrepareKnowledge">前置知识介绍</a></h2>

<h3 id="inheritablethreadlocal-">InheritableThreadLocal 介绍</h3>

<p>在代码开发中，经常使用 <code>ThreadLocal</code>来保证在同一个线程中共享变量。在 <code>ThreadLocal</code> 中，每个线程都拥有了自己独立的一个变量，线程间不存在共享竞争发生，并且它们也能最大限度的由CPU调度，并发执行。显然这是一种以空间来换取线程安全性的策略。</p>

<p>但是，<code>ThreadLocal</code>有一个问题，就是它只保证在同一个线程间共享变量，也就是说如果这个线程起了一个新线程，那么新线程是不会得到父线程的变量信息的。因此，为了保证子线程可以拥有父线程的某些变量视图，JDK提供了一个数据结构，<code>InheritableThreadLocal</code>。</p>

<p>javadoc 文档对 InheritableThreadLocal 说明：</p>

<blockquote>
  <blockquote>
    <p>该类扩展了 ThreadLocal，为子线程提供从父线程那里继承的值：在创建子线程时，子线程会接收所有可继承的线程局部变量的初始值，以获得父线程所具有的值。通常，子线程的值与父线程的值是一致的；但是，通过重写这个类中的 childValue 方法，子线程的值可以作为父线程值的一个任意函数。</p>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p>当必须将变量（如用户 ID 和 事务 ID）中维护的每线程属性（per-thread-attribute）自动传送给创建的所有子线程时，应尽可能地采用可继承的线程局部变量，而不是采用普通的线程局部变量。</p>
  </blockquote>
</blockquote>

<p>代码对比可以看出两者区别：</p>

<blockquote>
  <blockquote>
    <p>ThreadLocal:</p>
  </blockquote>
</blockquote>

<p><figure class='code'><figcaption><span>ThreadLocal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">t</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Method childValue is visibly defined in subclass</span>
</span><span class='line'><span class="cm"> * InheritableThreadLocal, but is internally defined here for the</span>
</span><span class='line'><span class="cm"> * sake of providing createInheritedMap factory method without</span>
</span><span class='line'><span class="cm"> * needing to subclass the map class in InheritableThreadLocal.</span>
</span><span class='line'><span class="cm"> * This technique is preferable to the alternative of embedding</span>
</span><span class='line'><span class="cm"> * instanceof tests in methods.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">T</span> <span class="nf">childValue</span><span class="o">(</span><span class="n">T</span> <span class="n">parentValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<blockquote>
  <blockquote>
    <p>InheritableThreadLocal:</p>
  </blockquote>
</blockquote>

<p><figure class='code'><figcaption><span>InheritableThreadLocal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InheritableThreadLocal</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Computes the child&#39;s initial value for this inheritable thread-local</span>
</span><span class='line'><span class="cm">     * variable as a function of the parent&#39;s value at the time the child</span>
</span><span class='line'><span class="cm">     * thread is created.  This method is called from within the parent</span>
</span><span class='line'><span class="cm">     * thread before the child is started.</span>
</span><span class='line'><span class="cm">     * &amp;lt;p&amp;gt;</span>
</span><span class='line'><span class="cm">     * This method merely returns its input argument, and should be overridden</span>
</span><span class='line'><span class="cm">     * if a different behavior is desired.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param parentValue the parent thread&#39;s value</span>
</span><span class='line'><span class="cm">     * @return the child thread&#39;s initial value</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">T</span> <span class="nf">childValue</span><span class="o">(</span><span class="n">T</span> <span class="n">parentValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">parentValue</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">t</span><span class="o">&gt;&lt;/</span><span class="n">t</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the map associated with a ThreadLocal.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param t the current thread</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">ThreadLocalMap</span> <span class="nf">getMap</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">t</span><span class="o">.</span><span class="na">inheritableThreadLocals</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Create the map associated with a ThreadLocal.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param t the current thread</span>
</span><span class='line'><span class="cm"> * @param firstValue value for the initial entry of the table.</span>
</span><span class='line'><span class="cm"> * @param map the map to store.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">createMap</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">,</span> <span class="n">T</span> <span class="n">firstValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="na">inheritableThreadLocals</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ThreadLocalMap</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">firstValue</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 这个是开发时一般使用的类，直接copy父线程的变量</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CopyOnInheritThreadLocal</span> <span class="kd">extends</span>
</span><span class='line'>    <span class="n">InheritableThreadLocal</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="err">»</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Child threads should get a copy of the parent’s hashmap.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">childValue</span><span class="o">(</span>
</span><span class='line'>      <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">parentValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">parentValue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="n">parentValue</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<blockquote>
  <blockquote>
    <p>为了支持InheritableThreadLocal的父子线程传递变量，JDK在Thread中，定义了<code>ThreadLocal.ThreadLocalMap inheritableThreadLocals</code> 属性。该属性变量在线程初始化的时候，如果父线程的该变量不为null，则会把其值复制到ThreadLocal。</p>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p>从上面的代码实现，还可以看到，如果我们使用原生的 <code>InheritableThreadLocal</code>类则在子线程中修改变量，可能会影响到父线程的变量值，及其他子线程的值。因此，一般我们推荐没有特殊情况，最好使用<code>CopyOnInheritThreadLocal</code>类，该实现是新建一个map来保持值，而不是直接使用父线程的引用。</p>
  </blockquote>
</blockquote>

<h2 id="a-idslf4jmdclog-mdc-a"><a id="Slf4jMdc">Log MDC 实现分析</a></h2>

<h3 id="slf4j-mdc-">Slf4j MDC 实现分析</h3>

<p>Slf4j 的实现原则就是调用底层具体实现类，比如logback,logging等包；而不会去实现具体的输出打印等操作。因此，除了前文中介绍的门面(Facade)模式外，提供这种功能的还有适配器(Adapter)模式和装饰(Decorator)模式。</p>

<p>MDC 使用的就是<code>Decorator</code>模式，虽然，其类命名为M <code>MDCAdapter</code>。</p>

<p>Slf4j MDC 内部实现很简单。实现一个单例对应实例，获取具体的MDC实现类，然后其对外接口，就是对参数进行校验，然后调用 MDCAdapter 的方法实现。</p>

<p>实现源码如下：</p>

<p><figure class='code'><figcaption><span>MDC 实现分析 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MDC</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">static</span> <span class="n">MDCAdapter</span> <span class="n">mdcAdapter</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="nf">MDC</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mdcAdapter</span> <span class="o">=</span> <span class="n">StaticMDCBinder</span><span class="o">.</span><span class="na">SINGLETON</span><span class="o">.</span><span class="na">getMDCA</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoClassDefFoundError</span> <span class="n">ncde</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//……</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">val</span><span class="o">)</span>
</span><span class='line'>      <span class="kd">throws</span> <span class="n">IllegalArgumentException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="err">“</span><span class="n">key</span> <span class="n">parameter</span> <span class="n">cannot</span> <span class="n">be</span> <span class="kc">null</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mdcAdapter</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="err">“</span><span class="n">MDCAdapter</span> <span class="n">cannot</span> <span class="n">be</span> <span class="kc">null</span><span class="o">.</span> <span class="n">See</span> <span class="n">also</span> <span class="err">“</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">NULL_MDCA_URL</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">mdcAdapter</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IllegalArgumentException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="err">“</span><span class="n">key</span> <span class="n">parameter</span> <span class="n">cannot</span> <span class="n">be</span> <span class="kc">null</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">mdcAdapter</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;MDCAdapter cannot be null. See also &quot;</span>
</span><span class='line'>      <span class="o">+</span> <span class="n">NULL_MDCA_URL</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">mdcAdapter</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>   <span class="o">}</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<blockquote>
  <blockquote>
    <p>对于Slf4j的MDC 部分非常简单，MDC的核心实现是在logback方法中的。</p>

    <p>在 logback 中，提供了 <code>LogbackMDCAdapter</code>类，其实现了<code>MDCAdapter</code>接口。基于性能的考虑，logback 对于InheritableThreadLocal的使用做了一些优化工作。</p>

  </blockquote>
</blockquote>

<h3 id="logback-mdc-">Logback MDC 实现分析</h3>

<p>Logback 中基于 MDC 实现了<code>LogbackMDCAdapter</code> 类，其 get 方法实现很简单，但是 put 方法会做一些优化操作。</p>

<p>关于 put 方法，主要有：</p>

<ul>
  <li>
    <p>使用原始的<code>InheritableThreadLocal&lt;Map&lt;String, String&gt;&gt;</code>类，而不是使用子线程复制类 <code>CopyOnInheritThreadLocal</code>。这样，运行时可以大量避免不必要的copy操作，节省CPU消耗，毕竟在大量log操作中，子线程会很少去修改父线程中的<code>key-value</code>值。</p>
  </li>
  <li>
    <p>由于上一条的优化，所以代码实现上实现了一个<code>写时复制版本的 InheritableThreadLocal</code>。实现会根据上一次操作来确定是否需要copy一份新的引用map，而不是去修改老的父线程的map引用。</p>
  </li>
  <li>
    <p>此外，和 log4j 不同，其map中的val可以为null。</p>
  </li>
</ul>

<p>下面给出，get 和 put 的代码实现：</p>

<p><figure class='code'><figcaption><span>MDC 实现分析 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">LogbackMDCAdapter</span> <span class="kd">implements</span> <span class="n">MDCAdapter</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">final</span> <span class="n">InheritableThreadLocal</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="err">»</span> <span class="n">copyOnInheritThreadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InheritableThreadLocal</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="err">»</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">WRITE_OPERATION</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">READ_OPERATION</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// keeps track of the last operation performed</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">integer</span><span class="o">&gt;</span> <span class="n">lastOperation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">integer</span><span class="o">&gt;();&lt;/</span><span class="n">integer</span><span class="o">&gt;&lt;/</span><span class="n">integer</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Integer</span> <span class="nf">getAndSetLastOperation</span><span class="o">(</span><span class="kt">int</span> <span class="n">op</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Integer</span> <span class="n">lastOp</span> <span class="o">=</span> <span class="n">lastOperation</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>    <span class="n">lastOperation</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">op</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">lastOp</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">wasLastOpReadOrNull</span><span class="o">(</span><span class="n">Integer</span> <span class="n">lastOp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">lastOp</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">lastOp</span><span class="o">.</span><span class="na">intValue</span><span class="o">()</span> <span class="o">==</span> <span class="n">READ_OPERATION</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">duplicateAndInsertNewMap</span><span class="o">(</span><span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">oldMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">newMap</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedMap</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">oldMap</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// we don’t want the parent thread modifying oldMap while we are</span>
</span><span class='line'>        <span class="c1">// iterating over it</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">oldMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">newMap</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">oldMap</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">copyOnInheritThreadLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">newMap</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">newMap</span><span class="o">;</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">val</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IllegalArgumentException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="err">“</span><span class="n">key</span> <span class="n">cannot</span> <span class="n">be</span> <span class="kc">null</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">oldMap</span> <span class="o">=</span> <span class="n">copyOnInheritThreadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'><span class="n">Integer</span> <span class="n">lastOp</span> <span class="o">=</span> <span class="n">getAndSetLastOperation</span><span class="o">(</span><span class="n">WRITE_OPERATION</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">wasLastOpReadOrNull</span><span class="o">(</span><span class="n">lastOp</span><span class="o">)</span> <span class="o">||</span> <span class="n">oldMap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// 当上一次操作是read时，这次write，则需要new</span>
</span><span class='line'>  <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">newMap</span> <span class="o">=</span> <span class="n">duplicateAndInsertNewMap</span><span class="o">(</span><span class="n">oldMap</span><span class="o">);</span>
</span><span class='line'>  <span class="n">newMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// 写的话，已经new了就不需要再new</span>
</span><span class='line'>  <span class="n">oldMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Get the context identified by the &lt;code&gt;key&lt;/code&gt; parameter.</span>
</span><span class='line'><span class="cm">   * &amp;lt;p/&amp;gt;</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">getPropertyMap</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">map</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="o">(</span><span class="n">key</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<blockquote>
  <blockquote>
    <p>需要注意，在上面的代码中，write操作即put会去修改 <code>lastOperation</code> ，而get操作则不会。这样就保证了，只会在第一次写时复制。</p>
  </blockquote>
</blockquote>

<h3 id="mdc-clear-">MDC clear 操作</h3>

<blockquote>
  <blockquote>
    <p>Notes：对于涉及到ThreadLocal相关使用的接口，都需要去考虑在使用完上下文对象时，清除掉对应的数据，以避免内存泄露问题。</p>
  </blockquote>
</blockquote>

<pre><code>因此，下面来分析下在MDC中如何清除掉不在需要的对象。
</code></pre>

<p>在MDC中提供了<code>clear</code>方法，该方法完成对象的清除工作，使用logback时，则调用的是<code>LogbackMDCAdapter#clear()</code>方法，继而调用<code>copyOnInheritThreadLocal.remove()</code>。</p>

<p>在ThreadLocal中，实现<code>remove()</code>方法：</p>

<p><figure class='code'><figcaption><span>MDC 实现分析 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">ThreadLocalMap</span> <span class="n">m</span> <span class="o">=</span> <span class="n">getMap</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">());</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="n">m</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>         <span class="n">m</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<blockquote>
  <blockquote>
    <p>这里，就是调用<code>ThreadLocal#remove</code>方法完成对象清理工作。</p>

    <p>所有线程的ThreadLocal都是以<code>ThreadLocalMap</code>来维护的，也就是，我们获取threadLocal对象时，实际上是根据当前线程去该Map中获取之前的设置。在清除的时候，从这个Map中获取对应的对象，然后移除map.</p>
  </blockquote>
</blockquote>

<h2 id="a-idlogbackprintlogback-a"><a id="LogbackPrint">Logback 日志输出实现</a></h2>

<p>MDC 的功能实现很简单，就是在线程上下文中，维护一个 <code>Map&lt;String,String&gt;</code> 属性来支持日志输出的时候，当我们在配置文件<code>logback.xml</code> 中配置了<code>%X{key}</code>，则后台日志打印出对应的 key 的值。</p>

<p>同样，<code>logback.xml</code>配置文件支持了多种格式的日志输出，比如<code>%highlight</code>、<code>%d</code>等等，这些标志，在<code>PatternLayout.java</code>中维护。</p>

<p><figure class='code'><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PatternLayout</span> <span class="kd">extends</span> <span class="n">PatternLayoutBase</span><span class="o">&lt;</span><span class="n">iloggingevent</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">iloggingevent</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">defaultConverterMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">HEADER_PREFIX</span> <span class="o">=</span> <span class="err">“#</span><span class="n">logback</span><span class="o">.</span><span class="na">classic</span> <span class="nl">pattern:</span> <span class="err">“</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">Parser</span><span class="o">.</span><span class="na">DEFAULT_COMPOSITE_CONVERTER_MAP</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 按照{}配置输出时间</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">d</span><span class="err">”</span><span class="o">,</span> <span class="n">DateConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">date</span><span class="err">”</span><span class="o">,</span> <span class="n">DateConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出应用启动到日志时间触发时候的毫秒数</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">r</span><span class="err">”</span><span class="o">,</span> <span class="n">RelativeTimeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">relative</span><span class="err">”</span><span class="o">,</span> <span class="n">RelativeTimeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出日志级别的信息</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">level</span><span class="err">”</span><span class="o">,</span> <span class="n">LevelConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">le</span><span class="err">”</span><span class="o">,</span> <span class="n">LevelConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">p</span><span class="err">”</span><span class="o">,</span> <span class="n">LevelConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出产生日志事件的线程名</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">t</span><span class="err">”</span><span class="o">,</span> <span class="n">ThreadConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">thread</span><span class="err">”</span><span class="o">,</span> <span class="n">ThreadConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出产生log事件的原点的日志名=我们创建logger的时候设置的</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">lo</span><span class="err">”</span><span class="o">,</span> <span class="n">LoggerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">logger</span><span class="err">”</span><span class="o">,</span> <span class="n">LoggerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">c</span><span class="err">”</span><span class="o">,</span> <span class="n">LoggerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出 提供日志事件的对应的应用信息</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">m</span><span class="err">”</span><span class="o">,</span> <span class="n">MessageConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">msg</span><span class="err">”</span><span class="o">,</span> <span class="n">MessageConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">message</span><span class="err">”</span><span class="o">,</span> <span class="n">MessageConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出调用方发布日志事件的完整类名</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">C</span><span class="err">”</span><span class="o">,</span> <span class="n">ClassOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">class</span><span class="err">”</span><span class="o">,</span> <span class="n">ClassOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出发布日志请求的方法名</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">M</span><span class="err">”</span><span class="o">,</span> <span class="n">MethodOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">method</span><span class="err">”</span><span class="o">,</span> <span class="n">MethodOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出log请求的行数</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">L</span><span class="err">”</span><span class="o">,</span> <span class="n">LineOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">line</span><span class="err">”</span><span class="o">,</span> <span class="n">LineOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出发布日志请求的java源码的文件名</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">F</span><span class="err">”</span><span class="o">,</span> <span class="n">FileOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">file</span><span class="err">”</span><span class="o">,</span> <span class="n">FileOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出和发布日志事件关联的线程的MDC</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">X</span><span class="err">”</span><span class="o">,</span> <span class="n">MDCConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">mdc</span><span class="err">”</span><span class="o">,</span> <span class="n">MDCConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出和日志事件关联的异常的堆栈信息</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">ex</span><span class="err">”</span><span class="o">,</span> <span class="n">ThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">exception</span><span class="err">”</span><span class="o">,</span> <span class="n">ThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>        <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">rEx</span><span class="err">”</span><span class="o">,</span> <span class="n">RootCauseFirstThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">rootException</span><span class="err">”</span><span class="o">,</span> <span class="n">RootCauseFirstThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>        <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">throwable</span><span class="err">”</span><span class="o">,</span> <span class="n">ThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>        <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 和上面一样，此外增加类的包信息</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">xEx</span><span class="err">”</span><span class="o">,</span> <span class="n">ExtendedThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">xException</span><span class="err">”</span><span class="o">,</span> <span class="n">ExtendedThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>        <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">xThrowable</span><span class="err">”</span><span class="o">,</span> <span class="n">ExtendedThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>        <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 当我们想不输出异常信息时，使用这个。其假装处理异常，其实无任何输出</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">nopex</span><span class="err">”</span><span class="o">,</span> <span class="n">NopThrowableInformationConverter</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>        <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">nopexception</span><span class="err">”</span><span class="o">,</span>
</span><span class='line'>        <span class="n">NopThrowableInformationConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出在类附加到日志上的上下文名字. </span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">cn</span><span class="err">”</span><span class="o">,</span> <span class="n">ContextNameConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">contextName</span><span class="err">”</span><span class="o">,</span> <span class="n">ContextNameConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出产生日志事件的调用者的位置信息</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">caller</span><span class="err">”</span><span class="o">,</span> <span class="n">CallerDataConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出和日志请求关联的marker</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">marker</span><span class="err">”</span><span class="o">,</span> <span class="n">MarkerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出属性对应的值，一般为System.properties中的属性</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">property</span><span class="err">”</span><span class="o">,</span> <span class="n">PropertyConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 输出依赖系统的行分隔符</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">n</span><span class="err">”</span><span class="o">,</span> <span class="n">LineSeparatorConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// 相关的颜色格式设置</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">black</span><span class="err">”</span><span class="o">,</span> <span class="n">BlackCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">red</span><span class="err">”</span><span class="o">,</span> <span class="n">RedCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">green</span><span class="err">”</span><span class="o">,</span> <span class="n">GreenCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">yellow</span><span class="err">”</span><span class="o">,</span> <span class="n">YellowCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">blue</span><span class="err">”</span><span class="o">,</span> <span class="n">BlueCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">magenta</span><span class="err">”</span><span class="o">,</span> <span class="n">MagentaCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">cyan</span><span class="err">”</span><span class="o">,</span> <span class="n">CyanCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">white</span><span class="err">”</span><span class="o">,</span> <span class="n">WhiteCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">gray</span><span class="err">”</span><span class="o">,</span> <span class="n">GrayCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">boldRed</span><span class="err">”</span><span class="o">,</span> <span class="n">BoldRedCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">boldGreen</span><span class="err">”</span><span class="o">,</span> <span class="n">BoldGreenCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">boldYellow</span><span class="err">”</span><span class="o">,</span> <span class="n">BoldYellowCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">boldBlue</span><span class="err">”</span><span class="o">,</span> <span class="n">BoldBlueCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">boldMagenta</span><span class="err">”</span><span class="o">,</span> <span class="n">BoldMagentaCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">boldCyan</span><span class="err">”</span><span class="o">,</span> <span class="n">BoldCyanCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">boldWhite</span><span class="err">”</span><span class="o">,</span> <span class="n">BoldWhiteCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="err">“</span><span class="n">highlight</span><span class="err">”</span><span class="o">,</span> <span class="n">HighlightingCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<blockquote>
  <blockquote>
    <p>Notes：日志模板配置，使用 <code>%</code>为前缀让解析器识别特殊输出模式，然后以<code>{}</code>后缀结尾，内部指定相应的参数设置。</p>
  </blockquote>
</blockquote>

<h3 id="section-1">初始化</h3>

<p>所谓初始化，就是我们构建<code>logger</code>的时候。在<code>LoggerFactory.getLogger()</code>，调用的是 slf4j 的方法，而底层使用的是<code>logback</code>的实现。因此，初始化的重点就是找到底层具体的实现接口，然后构建具体类。</p>

<p><figure class='code'><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="nf">getLogger</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ILoggerFactory</span> <span class="n">iLoggerFactory</span> <span class="o">=</span> <span class="n">getILoggerFactory</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">iLoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">ILoggerFactory</span> <span class="nf">getILoggerFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">INITIALIZATION_STATE</span> <span class="o">==</span> <span class="n">UNINITIALIZED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">INITIALIZATION_STATE</span> <span class="o">=</span> <span class="n">ONGOING_INITIALIZATION</span><span class="o">;</span>
</span><span class='line'>      <span class="n">performInitialization</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">INITIALIZATION_STATE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">SUCCESSFUL_INITIALIZATION:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">StaticLoggerBinder</span><span class="o">.</span><span class="na">getSingleton</span><span class="o">().</span><span class="na">getLoggerFactory</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// ……</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">ONGOING_INITIALIZATION:</span>
</span><span class='line'>        <span class="c1">// support re-entrant behavior.</span>
</span><span class='line'>        <span class="c1">// See also http://bugzilla.slf4j.org/show_bug.cgi?id=106</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">TEMP_FACTORY</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// …..</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">bind</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Set</span> <span class="n">staticLoggerBinderPathSet</span> <span class="o">=</span> <span class="n">findPossibleStaticLoggerBinderPathSet</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// the next line does the binding</span>
</span><span class='line'>      <span class="c1">// 这里并没有使用上面的返回set进行反射构建类，这里实际上才是各种初始化的地方</span>
</span><span class='line'>      <span class="n">StaticLoggerBinder</span><span class="o">.</span><span class="na">getSingleton</span><span class="o">();</span>
</span><span class='line'>      <span class="n">INITIALIZATION_STATE</span> <span class="o">=</span> <span class="n">SUCCESSFUL_INITIALIZATION</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">// ……</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ……</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="n">Set</span> <span class="nf">findPossibleStaticLoggerBinderPathSet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// use Set instead of list in order to deal with  bug #138</span>
</span><span class='line'>    <span class="c1">// LinkedHashSet appropriate here because it preserves insertion order during iteration</span>
</span><span class='line'>    <span class="n">Set</span> <span class="n">staticLoggerBinderPathSet</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LinkedHashSet</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ClassLoader</span> <span class="n">loggerFactoryClassLoader</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>              <span class="o">.</span><span class="na">getClassLoader</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Enumeration</span> <span class="n">paths</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">loggerFactoryClassLoader</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">paths</span> <span class="o">=</span> <span class="n">ClassLoader</span><span class="o">.</span><span class="na">getSystemResources</span><span class="o">(</span><span class="n">STATIC_LOGGER_BINDER_PATH</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">paths</span> <span class="o">=</span> <span class="n">loggerFactoryClassLoader</span>
</span><span class='line'>                <span class="o">.</span><span class="na">getResources</span><span class="o">(</span><span class="n">STATIC_LOGGER_BINDER_PATH</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">paths</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">URL</span> <span class="n">path</span> <span class="o">=</span> <span class="o">(</span><span class="n">URL</span><span class="o">)</span> <span class="n">paths</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
</span><span class='line'>        <span class="n">staticLoggerBinderPathSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="err">“</span><span class="n">Error</span> <span class="n">getting</span> <span class="n">resources</span> <span class="n">from</span> <span class="n">path</span><span class="err">”</span><span class="o">,</span> <span class="n">ioe</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">staticLoggerBinderPathSet</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<blockquote>
  <blockquote>
    <p>上面的部分代码，可以很明显看出，slf4j 会去调用classloader获取当前加载的类中，实现了指定的接口<code>org/slf4j/impl/StaticLoggerBinder.class</code>的类，如果多余1个，则会抛出异常。</p>

    <p>以上，依然可以从代码中看出这个只是检测是否存在符合接口的实现类，而没有像正常情况那样，通过反射构建类，返回给调用方。如何实现呢？</p>

    <p>直接在自己的包中实现一个和 <code>slf4j</code>要求路径一样的类，实现对应的接口，然后就可以调用了。不明白，看代码吧。:)</p>
  </blockquote>
</blockquote>

<p><figure class='code'><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">slf4j</span><span class="o">.</span><span class="na">impl</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">ch.qos.logback.core.status.StatusUtil</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.ILoggerFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.helpers.Util</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.spi.LoggerFactoryBinder</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">ch.qos.logback.classic.LoggerContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ch.qos.logback.classic.util.ContextInitializer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ch.qos.logback.classic.util.ContextSelectorStaticBinder</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ch.qos.logback.core.CoreConstants</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StaticLoggerBinder</span> <span class="kd">implements</span> <span class="n">LoggerFactoryBinder</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="n">StaticLoggerBinder</span> <span class="n">SINGLETON</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StaticLoggerBinder</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SINGLETON</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 这里就是创建logback的LoggerContext实例， 包含了log所需的环境配置</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">LoggerContext</span> <span class="n">defaultLoggerContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LoggerContext</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ContextSelectorStaticBinder</span> <span class="n">contextSelectorBinder</span> <span class="o">=</span> <span class="n">ContextSelectorStaticBinder</span>
</span><span class='line'>      <span class="o">.</span><span class="na">getSingleton</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="nf">StaticLoggerBinder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">defaultLoggerContext</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">CoreConstants</span><span class="o">.</span><span class="na">DEFAULT_CONTEXT_NAME</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">StaticLoggerBinder</span> <span class="nf">getSingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">SINGLETON</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// 这里会初始化配置文件和对应的模板，logback.xml解析</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">ContextInitializer</span><span class="o">(</span><span class="n">defaultLoggerContext</span><span class="o">).</span><span class="na">autoConfig</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">// ......   } </span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<blockquote>
  <blockquote>
    <p>从 package 和 import 的信息，可以看出，logback 中实现了一个 <code>org.slf4j.impl.StaticLoggerBinder</code> 类，而这个类，在slf4j 的 API 包中直接使用，所以使用slf4j时，必须还要引入其他具体的第三方包来实现相应的接口方法。</p>

    <p>此外，接下来的核心逻辑就是解析logback下各种配置文件信息，以及初始化配置。</p>
  </blockquote>
</blockquote>

<h3 id="section-2">输出日志模板解析</h3>

<p>如上所见，其实关于logback.xml的解析工作，也是在初始化的时候完成的。但是，由于其重要性，所以这里重点介绍下。</p>

<p>在 logback 中，解析xml的工作，都是交给 Action 和其继承类来完成。在 Action 类中提供了三个方法<code>begin</code>、<code>body</code>和<code>end</code>三个方法，这三个抽象方法中：</p>

<ul>
  <li>begin 方法负责处理ElementSelector元素的解析；</li>
  <li>body 方法，一般为空，处理文本的；</li>
  <li>end 方法则是处理模板解析的，所以我们的logback.xml的模板解析实在end方法中。具体是在 <code>NestedComplexPropertyIA</code>类中来解析。其继承Action类，并且其会调用具体的模板解析工具类：<code>PatternLayoutEncoder</code>类和<code>PatternLayout</code>类。</li>
</ul>

<p><code>PatternLayoutEncoder</code>会创建一个<code>PatternLayout</code>对象，然后获取到logback.xml中配置的模板字符串，即<code>[%d{yyyy-MM-dd HH:mm:ss} %highlight(%-5p) %logger.%M\(%F:%L\)] %X{THREAD_ID} %msg%n</code>，如配置的节点名一样，其在代码中同样赋值给pattern变量。</p>

<p>接下来，PatternLayoutEncoder 会调用相关方法对pattern进行解析，然后构建一个节点链表，保存这个链表会在日志输出的时使用到。</p>

<p><figure class='code'><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="nf">Parser</span><span class="o">(</span><span class="n">String</span> <span class="n">pattern</span><span class="o">,</span> <span class="n">IEscapeUtil</span> <span class="n">escapeUtil</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ScanException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">TokenStream</span> <span class="n">ts</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TokenStream</span><span class="o">(</span><span class="n">pattern</span><span class="o">,</span> <span class="n">escapeUtil</span><span class="o">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">tokenList</span> <span class="o">=</span> <span class="n">ts</span><span class="o">.</span><span class="na">tokenize</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalArgumentException</span> <span class="n">npe</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">ScanException</span><span class="o">(</span><span class="err">“</span><span class="n">Failed</span> <span class="n">to</span> <span class="n">initialize</span> <span class="n">Parser</span><span class="err">”</span><span class="o">,</span> <span class="n">npe</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">enum</span> <span class="n">TokenizerState</span> <span class="o">{</span> <span class="n">LITERAL_STATE</span><span class="o">,</span>  <span class="n">FORMAT_MODIFIER_STATE</span><span class="o">,</span> <span class="n">KEYWORD_STATE</span><span class="o">,</span> <span class="n">OPTION_STATE</span><span class="o">,</span>  <span class="n">RIGHT_PARENTHESIS_STATE</span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">List</span> <span class="nf">tokenize</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ScanException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">token</span><span class="o">&gt;</span> <span class="n">tokenList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">token</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">StringBuffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuffer</span><span class="o">();&lt;/</span><span class="n">token</span><span class="o">&gt;&lt;/</span><span class="n">token</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">while</span> <span class="o">(</span><span class="n">pointer</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">patternLength</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">pointer</span><span class="o">);</span>
</span><span class='line'>  <span class="n">pointer</span><span class="o">++;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="o">(</span><span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">LITERAL_STATE:</span>
</span><span class='line'>      <span class="n">handleLiteralState</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">tokenList</span><span class="o">,</span> <span class="n">buf</span><span class="o">);</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">FORMAT_MODIFIER_STATE:</span>
</span><span class='line'>      <span class="n">handleFormatModifierState</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">tokenList</span><span class="o">,</span> <span class="n">buf</span><span class="o">);</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">// ......</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// EOS</span>
</span><span class='line'><span class="k">switch</span> <span class="o">(</span><span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">LITERAL_STATE:</span>
</span><span class='line'>    <span class="n">addValuedToken</span><span class="o">(</span><span class="n">Token</span><span class="o">.</span><span class="na">LITERAL</span><span class="o">,</span> <span class="n">buf</span><span class="o">,</span> <span class="n">tokenList</span><span class="o">);</span>
</span><span class='line'>    <span class="k">break</span><span class="o">;</span>
</span><span class='line'> <span class="c1">// ......</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="nl">FORMAT_MODIFIER_STATE:</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">OPTION_STATE:</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ScanException</span><span class="o">(</span><span class="s">&quot;Unexpected end of pattern string&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">tokenList</span><span class="o">;</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 构建head链表</span>
</span><span class='line'>  <span class="n">Converter</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;</span> <span class="nf">compile</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">head</span> <span class="o">=</span> <span class="n">tail</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Node</span> <span class="n">n</span> <span class="o">=</span> <span class="n">top</span><span class="o">;</span> <span class="n">n</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">Node</span><span class="o">.</span><span class="na">LITERAL</span><span class="o">:</span>
</span><span class='line'>          <span class="n">addToList</span><span class="o">(</span><span class="k">new</span> <span class="n">LiteralConverter</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;((</span><span class="n">String</span><span class="o">)</span> <span class="n">n</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">Node</span><span class="o">.</span><span class="na">COMPOSITE_KEYWORD</span><span class="o">:</span>
</span><span class='line'>          <span class="n">CompositeNode</span> <span class="n">cn</span> <span class="o">=</span> <span class="o">(</span><span class="n">CompositeNode</span><span class="o">)</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>          <span class="n">CompositeConverter</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;</span> <span class="n">compositeConverter</span> <span class="o">=</span> <span class="n">createCompositeConverter</span><span class="o">(</span><span class="n">cn</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">compositeConverter</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">addError</span><span class="o">(</span><span class="s">&quot;Failed to create converter for [%&quot;</span><span class="o">+</span><span class="n">cn</span><span class="o">.</span><span class="na">getValue</span><span class="o">()+</span><span class="s">&quot;] keyword&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">addToList</span><span class="o">(</span><span class="k">new</span> <span class="n">LiteralConverter</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;(</span><span class="s">&quot;%PARSER_ERROR[&quot;</span><span class="o">+</span><span class="n">cn</span><span class="o">.</span><span class="na">getValue</span><span class="o">()+</span><span class="s">&quot;]&quot;</span><span class="o">));</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">compositeConverter</span><span class="o">.</span><span class="na">setFormattingInfo</span><span class="o">(</span><span class="n">cn</span><span class="o">.</span><span class="na">getFormatInfo</span><span class="o">());</span>
</span><span class='line'>          <span class="n">compositeConverter</span><span class="o">.</span><span class="na">setOptionList</span><span class="o">(</span><span class="n">cn</span><span class="o">.</span><span class="na">getOptions</span><span class="o">());</span>
</span><span class='line'>          <span class="n">Compiler</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;</span> <span class="n">childCompiler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Compiler</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;(</span><span class="n">cn</span><span class="o">.</span><span class="na">getChildNode</span><span class="o">(),</span>
</span><span class='line'>                  <span class="n">converterMap</span><span class="o">);</span>
</span><span class='line'>          <span class="n">childCompiler</span><span class="o">.</span><span class="na">setContext</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Converter</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;</span> <span class="n">childConverter</span> <span class="o">=</span> <span class="n">childCompiler</span><span class="o">.</span><span class="na">compile</span><span class="o">();</span>
</span><span class='line'>          <span class="n">compositeConverter</span><span class="o">.</span><span class="na">setChildConverter</span><span class="o">(</span><span class="n">childConverter</span><span class="o">);</span>
</span><span class='line'>          <span class="n">addToList</span><span class="o">(</span><span class="n">compositeConverter</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">Node</span><span class="o">.</span><span class="na">SIMPLE_KEYWORD</span><span class="o">:</span>
</span><span class='line'>          <span class="n">SimpleKeywordNode</span> <span class="n">kn</span> <span class="o">=</span> <span class="o">(</span><span class="n">SimpleKeywordNode</span><span class="o">)</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>          <span class="n">DynamicConverter</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;</span> <span class="n">dynaConverter</span> <span class="o">=</span> <span class="n">createConverter</span><span class="o">(</span><span class="n">kn</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">dynaConverter</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">dynaConverter</span><span class="o">.</span><span class="na">setFormattingInfo</span><span class="o">(</span><span class="n">kn</span><span class="o">.</span><span class="na">getFormatInfo</span><span class="o">());</span>
</span><span class='line'>            <span class="n">dynaConverter</span><span class="o">.</span><span class="na">setOptionList</span><span class="o">(</span><span class="n">kn</span><span class="o">.</span><span class="na">getOptions</span><span class="o">());</span>
</span><span class='line'>            <span class="n">addToList</span><span class="o">(</span><span class="n">dynaConverter</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// if the appropriate dynaconverter cannot be found, then replace</span>
</span><span class='line'>            <span class="c1">// it with a dummy LiteralConverter indicating an error.</span>
</span><span class='line'>            <span class="n">Converter</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;</span> <span class="n">errConveter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LiteralConverter</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;(</span><span class="s">&quot;%PARSER_ERROR[&quot;</span>
</span><span class='line'>                    <span class="o">+</span> <span class="n">kn</span><span class="o">.</span><span class="na">getValue</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">addStatus</span><span class="o">(</span><span class="k">new</span> <span class="nf">ErrorStatus</span><span class="o">(</span><span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">kn</span><span class="o">.</span><span class="na">getValue</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot;] is not a valid conversion word&quot;</span><span class="o">,</span> <span class="k">this</span><span class="o">));</span>
</span><span class='line'>            <span class="n">addToList</span><span class="o">(</span><span class="n">errConveter</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">head</span><span class="o">;</span>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<blockquote>
  <blockquote>
    <p>代码很简单，就是依次遍历pattern字符串，然后把符合要求的字符串放进tokenList中，这个list就维护了我们最终需要输出的模板的格式化模式了。</p>

    <p>在每个case里面，都会对字符串进行特定的处理，匹配具体的字符。</p>

    <p>在随后的处理中，会将这个tokenList进行转换，成为我们需要的Node类型的拥有head 和 tail 的链表。</p>

  </blockquote>
</blockquote>

<h3 id="section-3">日志输出分析</h3>

<p>构建了各种需要的环境参数，打印日志就很简单了。在需要输出日志的时候，根据初始化得到的Node链表head来解析，遇到%X的时候，从MDC中获取对应的key值，然后append到日志字符串中，然后输出。</p>

<blockquote>
  <blockquote>
    <p>在配置文件中，我们使用Appender模式，在日志输出类中，显然会调用append类似的方法了。:)</p>

    <p>其调用流程</p>
  </blockquote>
</blockquote>

<p><figure class='code'><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OutputStreamAppender</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">UnsynchronizedAppenderBase</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">append</span><span class="o">(</span><span class="n">E</span> <span class="n">eventObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">isStarted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">subAppend</span><span class="o">(</span><span class="n">eventObject</span><span class="o">);</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 这里就是日志输出实际的操作，一般如果有需要，可以重写这个方法。</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">subAppend</span><span class="o">(</span><span class="n">E</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">isStarted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// this step avoids LBCLASSIC-139</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">event</span> <span class="k">instanceof</span> <span class="n">DeferredProcessingAware</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 这里虽然是为输出准备，在检查的同时，把把必要的信息解析出来放到变量中</span>
</span><span class='line'>        <span class="o">((</span><span class="n">DeferredProcessingAware</span><span class="o">)</span> <span class="n">event</span><span class="o">).</span><span class="na">prepareForDeferredProcessing</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">// the synchronization prevents the OutputStream from being closed while we</span>
</span><span class='line'>      <span class="c1">// are writing. It also prevents multiple threads from entering the same</span>
</span><span class='line'>      <span class="c1">// converter. Converters assume that they are in a synchronized block.</span>
</span><span class='line'>      <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 避免多线程的问题，这里加了锁。而写日志的核心也是在这里</span>
</span><span class='line'>        <span class="n">writeOut</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// as soon as an exception occurs, move to non-started state</span>
</span><span class='line'>      <span class="c1">// and add a single ErrorStatus to the SM.</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">started</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="n">addStatus</span><span class="o">(</span><span class="k">new</span> <span class="nf">ErrorStatus</span><span class="o">(</span><span class="err">“</span><span class="n">IO</span> <span class="n">failure</span> <span class="n">in</span> <span class="n">appender</span><span class="err">”</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="n">ioe</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">// 这里将会调用前面我们提到过的模板类，有该类对解析出来的模板按照当前环境进行输出</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">writeOut</span><span class="o">(</span><span class="n">E</span> <span class="n">event</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">encoder</span><span class="o">.</span><span class="na">doEncode</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<blockquote>
  <blockquote>
    <p>Notes：在<code>prepareForDeferredProcessing</code>中，查询了一些常用值，比如当前线程名，比如mdc设置赋值到Map中。而这些信息，当准备结束没有出现问题时，则会给后面的输出日志时公用。</p>

    <p>这种方式，其实在我们的代码中，也可以参考。一般我们可能对当前上下文的入参检查会去查询数据库等耗费CPU或者IO的操作，然后check ok的时候，又会在正常的业务中再次做相同的重复工作，导致不必要的性能损失。</p>

  </blockquote>
</blockquote>

<p>接下来看看，针对模板进行按需获取属性值，然后输出日志的逻辑：</p>

<p><figure class='code'><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 这里的逻辑就是按照模板获取值然后转换成字节流输出到后台</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doEncode</span><span class="o">(</span><span class="n">E</span> <span class="n">event</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">txt</span> <span class="o">=</span> <span class="n">layout</span><span class="o">.</span><span class="na">doLayout</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="n">outputStream</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">convertToBytes</span><span class="o">(</span><span class="n">txt</span><span class="o">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">immediateFlush</span><span class="o">)</span>
</span><span class='line'>      <span class="n">outputStream</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">String</span> <span class="nf">doLayout</span><span class="o">(</span><span class="n">ILoggingEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">isStarted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">CoreConstants</span><span class="o">.</span><span class="na">EMPTY_STRING</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">writeLoopOnConverters</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 初始化的时候，就介绍过最后会构建一个head链表，</span>
</span><span class='line'>  <span class="c1">// 这里输出就是按照解析后的链表进行分析输出的。然后根据c类型不同，获取字符串方法也不同</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">String</span> <span class="nf">writeLoopOnConverters</span><span class="o">(</span><span class="n">E</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">(</span><span class="mi">128</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Converter</span><span class="o">&lt;</span><span class="n">e</span><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">c</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">c</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="n">event</span><span class="o">);</span>
</span><span class='line'>      <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">buf</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">e</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<blockquote>
  <blockquote>
    <p>在<code>writeLoopOnConverters</code>方法中，获取对应字符串是不同的，其根据不同的Converter，输出也不同。而Converter的判断，时就是根据我们配置的map映射来的，在初始化一节的时候，介绍的<code>PatternLayout</code>就包含各种映射关系。至于具体的convert方法，看看mdc的实现：</p>

  </blockquote>
</blockquote>

<p><figure class='code'><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MDCConverter</span> <span class="kd">extends</span> <span class="n">ClassicConverter</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">String</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">defaultValue</span> <span class="o">=</span> <span class="err">“”</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">keyInfo</span> <span class="o">=</span> <span class="n">extractDefaultReplacement</span><span class="o">(</span><span class="n">getFirstOption</span><span class="o">());</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="n">keyInfo</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">keyInfo</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">defaultValue</span> <span class="o">=</span> <span class="n">keyInfo</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">convert</span><span class="o">(</span><span class="n">ILoggingEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">mdcPropertyMap</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getMDCPropertyMap</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">mdcPropertyMap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">defaultValue</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">outputMDCForAllKeys</span><span class="o">(</span><span class="n">mdcPropertyMap</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getMDCPropertyMap</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span><span class="c1">//获取key的值</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">defaultValue</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * if no key is specified, return all the values present in the MDC, in the format “k1=v1, k2=v2, …”</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="nf">outputMDCForAllKeys</span><span class="o">(</span><span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">mdcPropertyMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">first</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">mdcPropertyMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">first</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">first</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="err">“</span><span class="o">,</span> <span class="err">“</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//format: key0=value0, key1=value1</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="err">‘</span><span class="o">=</span><span class="err">’</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">buf</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<blockquote>
  <blockquote>
    <p>我们在MDC实现的时候看到的get方法，在这里就使用了。我们将key:value键值对存放到MDC之后，在logback.xml中配置%X{key}，没有直接调用get方法，logback会根据<code>X</code>判断是MDC类型，然后根据<code>key</code>拿到MDC中对应的value，然后返回给buf中，最后append到后台日志上。</p>
  </blockquote>
</blockquote>

<h2 id="a-idenda"><a id="End">后记</a></h2>

<p>其实，本身的 MDC 使用很简单，实现原理也很简单。但是，这里为了分析从将 key:value put 进MDC，然后怎么获取，怎么打印到后台的逻辑，对整个从 SLF4J 到 logback 的运行流程进场了大体解析。而对不影响理解的一些枝节，进行了删减。因此，如果需要完全弄清楚整个逻辑，还需要进行详细分析源码。</p>

<p>在目前的代码中，我们在web.xml 中配置了 filter 来将一些用户个人访问特征存入了MDC中，这样可以获取一个用户的操作流程，根据某一个访问特征去grep的话。</p>

<p>下一次，将分享下这种实现细节背后的一些技术。虽然实现很简单，但是想深入分析下filter机制和web = tomcat + spring mvc 的请求处理流程，这些技术细节，是如何使一个MDC信息可以保存一个用户依次的访问流水记录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java日志框架slf4j API介绍及异常接口实现分析]]></title>
    <link href="http://kxcoder.github.io/blog/2014/05/02/Java-slf4j-Introduce/"/>
    <updated>2014-05-02T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2014/05/02/Java-slf4j-Introduce</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#Facade">Facade设计模式简介</a></li>
  <li><a href="#Bind">slf4j绑定日志</a></li>
  <li><a href="#API">slf4j API使用</a></li>
  <li><a href="#End">后记</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>slf4j: 简洁的java日志统一接口（Simple Logging Facade for Java），顾名思义，就是一个使用Facade设计模式实现的面向java Logging框架的接口开源包。
其和java数据库连接工具包JDBC很像，在JDBC框架中，各个不同数据库连接器分别针对不同数据库系统来实现对应的连接操作，而普通程序员只需要使用统一的JDBC接口而不需要关注具体底层使用的数据库类型，或者针对不同的数据库系统写各种兼容代码。</p>

<blockquote>
  <blockquote>
    <p>Note: slf4j其实类似于适配器，但是这里不称呼适配器，是因为当底层log日志系统不支持slf4j扩展时，比如log4j，就需要在两者中间增加一个适配器层来完成slf4j调用相关日志系统的操作接口动作。例如，slf4j为log4j提高的slf4j-log412.jar类库，但是logback支持slf4J扩展，所以其不需适配层转换。</p>
  </blockquote>
</blockquote>

<!--more-->

<p>同样，slf4j 不参与具体的日志代码实现，它只是在代码编译的时候根据程序的配置来绑定具体的日志系统。这样，使用slf4j类库就可以让你的代码独立于任意一个特定的日志API。因此，如果编写一个对外开发的API活着一个同样的类库，那么为了不限制使用你类库的代码必须使用指定的日志系统，你应该使用slf4j。</p>

<p>相对于其他日志框架，slf4j日志类库的优点和推荐使用的缘由，可以参见 ImportNew 的译文【 <a href="#http://www.importnew.com/7450.html">为什么要使用SLF4J而不是Log4J</a> 】</p>

<h2 id="a-idfacadefacadea"><a id="Facade">Facade设计模式简介</a></h2>

<p>Facade模式，或者叫做外观模式，顾名思义就是封装各个底层子系统的提供的同一类功能接口，统一成一个更易操作使用的上层接口进而对外提供交互。有了这个上层封装的接口，接口调用方只需要调用这个接口，而不需要关于各个子系统的具体逻辑实现。</p>

<p>Facade设计模式的官方定义是：Facade模式定义了一个更高层的接口，使子系统更加容易使用。</p>

<p>关于Facade模式的实例，日常生活中很多这样子的例子。比如，5、1回家，可以有好几种方式：飞机、火车、长途汽车。在实际生活中，你回家的路线应该是：</p>

<pre><code>	1. 坐车去机场（火车站/长途汽车站）；
	2. 坐飞机（火车/长途汽车）到家乡；
	3. 从家乡飞机场（火车站/长途汽车站）到家里。 
</code></pre>

<p>一般来说，上面的流程是毫无问题的。但是，如果做成一个系统，你需要对外暴露3个步骤中得3个不同的接口，外界需要根据不同的交通方式选择不同的调用接口，这无疑加大了接口调研的复杂度，以及系统的复杂度。如下图所示：</p>

<p><img src="http://kxcoder.github.io/images/2014/05/facade.png" /></p>

<p>使用Facade模式，封装各个子系统的实现，对外提供3个接口：</p>

<pre><code>	1. 坐车其站点；
	2. 做主交通工具到家乡；
	3. 从家乡的站点回家里。
</code></pre>

<p>因此，接口使用方不需要知道子系统具体是什么样的业务逻辑，其主要要在配置中，或者一开始指定交通工具，就可以让facade系统来完成下面的一系列操作。这样，除了让我们的系统对外暴露接口少了，最重要的是可以让第三方以最低的成本使用我们的接口。</p>

<h2 id="a-idbindslf4ja"><a id="Bind">slf4j绑定日志</a></h2>

<h3 id="slf4j-">3.1 slf4j 设计模式说明</h3>

<p>为了说明slf4j采用的Facade模式，也就是如果只引入slf4j-api包，日志系统将无法正常使用。例如在pom.xml文件这只有：</p>

<p><figure class='code'><figcaption><span>pom.xml依赖 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">groupid</span><span class="o">&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">slf4j</span><span class="o">&lt;/</span><span class="n">groupid</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">artifactid</span><span class="o">&gt;</span><span class="n">slf4j</span><span class="o">-</span><span class="n">api</span><span class="o">&lt;/</span><span class="n">artifactid</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="mf">1.7</span><span class="o">.</span><span class="mi">5</span><span class="o">&lt;/</span><span class="n">version</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span>     <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>而<a id="BindCode">测试代码</a>为：</p>

<p><figure class='code'><figcaption><span>测试示例 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author: ketao Date: 14-5-3 Time: 上午1:03</span>
</span><span class='line'><span class="cm"> * @version: $Id$</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">LogTest</span><span class="o">.</span><span class="na">class</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Hello world&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;ERROR&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>执行上面的代码会出现提示：</p>

<pre><code>SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
</code></pre>

<p>而如果我们引入logback日志系统，并且配置logback.xml日志配置文件：</p>

<p><figure class='code'><figcaption><span>pom.xml依赖 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">groupid</span><span class="o">&gt;</span><span class="n">ch</span><span class="o">.</span><span class="na">qos</span><span class="o">.</span><span class="na">logback</span><span class="o">&lt;/</span><span class="n">groupid</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">artifactid</span><span class="o">&gt;</span><span class="n">logback</span><span class="o">-</span><span class="n">classic</span><span class="o">&lt;/</span><span class="n">artifactid</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">13</span><span class="o">&lt;/</span><span class="n">version</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span>      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>接下来执行上面的测试代码，则会打印日志信息：</p>

<pre><code>[2014-05-03 01:27:11 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:17)] Hello world
[2014-05-03 01:27:11 [1;31mERROR[0;39m com.qunar.dubbo.LogTest.main(LogTest.java:18)] ERROR
</code></pre>

<h3 id="slf4j--1">3.2 slf4j 日志绑定流程</h3>

<p>如<a href="#BindCode">3.1</a>中的代码所示，首先调用<code>LoggerFactory.getLogger</code>的方法，这个方法会在编译的时候，绑定系统设置的真正的日志框架，如下代码所示：</p>

<p><figure class='code'><figcaption><span>日志绑定流程 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Return a logger named according to the name parameter using the statically</span>
</span><span class='line'><span class="cm">   * bound {@link ILoggerFactory} instance.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param name The name of the logger.</span>
</span><span class='line'><span class="cm">   * @return logger</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="nf">getLogger</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ILoggerFactory</span> <span class="n">iLoggerFactory</span> <span class="o">=</span> <span class="n">getILoggerFactory</span><span class="o">();</span> <span class="c1">// 这里先获取ILoggerFactory对象</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">iLoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">name</span><span class="o">);</span> <span class="c1">// 根据获取的ILoggerFactory对象，调用其对应的日志对象</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Return the {@link ILoggerFactory} instance in use.</span>
</span><span class='line'><span class="cm">   * &amp;lt;p/&amp;gt;</span>
</span><span class='line'><span class="cm">   * &amp;lt;p/&amp;gt;</span>
</span><span class='line'><span class="cm">   * ILoggerFactory instance is bound with this class at compile time.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @return the ILoggerFactory instance in use</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">ILoggerFactory</span> <span class="nf">getILoggerFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">INITIALIZATION_STATE</span> <span class="o">==</span> <span class="n">UNINITIALIZED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">INITIALIZATION_STATE</span> <span class="o">=</span> <span class="n">ONGOING_INITIALIZATION</span><span class="o">;</span>
</span><span class='line'>      <span class="n">performInitialization</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">INITIALIZATION_STATE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">SUCCESSFUL_INITIALIZATION:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">StaticLoggerBinder</span><span class="o">.</span><span class="na">getSingleton</span><span class="o">().</span><span class="na">getLoggerFactory</span><span class="o">();</span><span class="c1">// 这里就可以获取底层日志系统的单例对象了</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">NOP_FALLBACK_INITIALIZATION:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">NOP_FALLBACK_FACTORY</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">FAILED_INITIALIZATION:</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="n">UNSUCCESSFUL_INIT_MSG</span><span class="o">);</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">ONGOING_INITIALIZATION:</span>
</span><span class='line'>        <span class="c1">// support re-entrant behavior.</span>
</span><span class='line'>        <span class="c1">// See also http://bugzilla.slf4j.org/show_bug.cgi?id=106</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">TEMP_FACTORY</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="err">“</span><span class="n">Unreachable</span> <span class="n">code</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>而绑定是在<code>getILoggerFactory()</code>中调用的，在该方法的实现里，会调用<code>performInitialization()</code>，该方法调用<code>bind()</code>方法（部分代码）：</p>

<p><figure class='code'><figcaption><span>日志绑定流程 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">bind</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Set</span> <span class="n">staticLoggerBinderPathSet</span> <span class="o">=</span> <span class="n">findPossibleStaticLoggerBinderPathSet</span><span class="o">();</span><span class="c1">// 寻找程序配置的日志系统集，具体见下面代码</span>
</span><span class='line'>      <span class="n">reportMultipleBindingAmbiguity</span><span class="o">(</span><span class="n">staticLoggerBinderPathSet</span><span class="o">);</span><span class="c1">// 验证多于1个日志系统时，输出警告信息</span>
</span><span class='line'>      <span class="c1">// the next line does the binding</span>
</span><span class='line'>      <span class="n">StaticLoggerBinder</span><span class="o">.</span><span class="na">getSingleton</span><span class="o">();</span><span class="c1">// 测试是否可以获取该静态绑定类单例，可以，则置为成功状态，如下行；否则，会打出3.1中的NOP异常信息。</span>
</span><span class='line'>      <span class="n">INITIALIZATION_STATE</span> <span class="o">=</span> <span class="n">SUCCESSFUL_INITIALIZATION</span><span class="o">;</span>
</span><span class='line'>      <span class="n">reportActualBinding</span><span class="o">(</span><span class="n">staticLoggerBinderPathSet</span><span class="o">);</span><span class="c1">// 绑定，打印绑定具体日志系统的日志</span>
</span><span class='line'>      <span class="n">emitSubstituteLoggerWarning</span><span class="o">();</span><span class="c1">// 提交给临时日志factory 打印的日志，不是重点</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoClassDefFoundError</span> <span class="n">ncde</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">ncde</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">messageContainsOrgSlf4jImplStaticLoggerBinder</span><span class="o">(</span><span class="n">msg</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">INITIALIZATION_STATE</span> <span class="o">=</span> <span class="n">NOP_FALLBACK_INITIALIZATION</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="err">“</span><span class="n">Failed</span> <span class="n">to</span> <span class="n">load</span> <span class="kd">class</span> <span class="err">&quot;</span><span class="nc">org</span><span class="o">.</span><span class="na">slf4j</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">StaticLoggerBinder</span><span class="err">&quot;</span><span class="o">.</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="err">“</span><span class="n">Defaulting</span> <span class="n">to</span> <span class="n">no</span><span class="o">-</span><span class="n">operation</span> <span class="o">(</span><span class="n">NOP</span><span class="o">)</span> <span class="n">logger</span> <span class="n">implementation</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="err">“</span><span class="n">See</span> <span class="err">“</span> <span class="o">+</span> <span class="n">NO_STATICLOGGERBINDER_URL</span>
</span><span class='line'>                <span class="o">+</span> <span class="err">“</span> <span class="k">for</span> <span class="n">further</span> <span class="n">details</span><span class="o">.</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>下面看看，slf4j是如何获取系统中指定的真正底层日志系统：</p>

<p><figure class='code'><figcaption><span>日志绑定流程 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// We need to use the name of the StaticLoggerBinder class, but we can’t reference</span>
</span><span class='line'>  <span class="c1">// the class itself.</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">STATIC_LOGGER_BINDER_PATH</span> <span class="o">=</span> <span class="err">“</span><span class="n">org</span><span class="o">/</span><span class="n">slf4j</span><span class="o">/</span><span class="n">impl</span><span class="o">/</span><span class="n">StaticLoggerBinder</span><span class="o">.</span><span class="na">class</span><span class="err">”</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="n">Set</span> <span class="nf">findPossibleStaticLoggerBinderPathSet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// use Set instead of list in order to deal with  bug #138</span>
</span><span class='line'>    <span class="c1">// LinkedHashSet appropriate here because it preserves insertion order during iteration</span>
</span><span class='line'>    <span class="n">Set</span> <span class="n">staticLoggerBinderPathSet</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LinkedHashSet</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ClassLoader</span> <span class="n">loggerFactoryClassLoader</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>              <span class="o">.</span><span class="na">getClassLoader</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Enumeration</span> <span class="n">paths</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">loggerFactoryClassLoader</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">paths</span> <span class="o">=</span> <span class="n">ClassLoader</span><span class="o">.</span><span class="na">getSystemResources</span><span class="o">(</span><span class="n">STATIC_LOGGER_BINDER_PATH</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">paths</span> <span class="o">=</span> <span class="n">loggerFactoryClassLoader</span>
</span><span class='line'>                <span class="o">.</span><span class="na">getResources</span><span class="o">(</span><span class="n">STATIC_LOGGER_BINDER_PATH</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">paths</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">URL</span> <span class="n">path</span> <span class="o">=</span> <span class="o">(</span><span class="n">URL</span><span class="o">)</span> <span class="n">paths</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
</span><span class='line'>        <span class="n">staticLoggerBinderPathSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="err">“</span><span class="n">Error</span> <span class="n">getting</span> <span class="n">resources</span> <span class="n">from</span> <span class="n">path</span><span class="err">”</span><span class="o">,</span> <span class="n">ioe</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">staticLoggerBinderPathSet</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>slf4j在适配器层或者在兼容slf4j扩展的log-api 中会有一个<code>org/slf4j/impl/StaticLoggerBinder.class</code>类，这样就获取了系统中真正的日志系统。然后获取该日志的单例，打印相关的日志信息就可以了。比如，打印slf4j的<code>log.info</code>则调用logback中<code>Logger.info()</code>方法来打印日志信息。</p>

<h2 id="a-idapislf4j-apia"><a id="API">slf4j API使用</a></h2>

<p>slf4j的打印日志基本一致，主要分为：<code>trace</code>,<code>debug</code>,<code>info</code>,<code>warn</code>,<code>error</code>,比log4j少了<code>fatal</code>级别日志。由于每个级别对于的API方法级别一致，因此，这里选用info来介绍不同输入参数的API使用。</p>

<blockquote>
  <blockquote>
    <p>Tip: SLF4J 认为 ERROR 与 FATAL 并没有实质上的差别，所以拿掉了 FATAL 等级，只剩下其他五种。</p>
  </blockquote>
</blockquote>

<p><figure class='code'><figcaption><span>API使用 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * 纯字符串形式的日志</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * 指定一个参数和位置格式的info级别的日志输出形式。这个形式避免了多个object对象的创建。</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">(</span><span class="n">String</span> <span class="n">format</span><span class="o">,</span> <span class="n">Object</span> <span class="n">arg</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * 指定2个参数和对于位置格式的info级别的日志输出。</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">(</span><span class="n">String</span> <span class="n">format</span><span class="o">,</span> <span class="n">Object</span> <span class="n">arg1</span><span class="o">,</span> <span class="n">Object</span> <span class="n">arg2</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * 根据指定的参数和日志格式来输出info级别的日志信息。</span>
</span><span class='line'><span class="cm">   * 但是，需要指出这种形式虽然避免的字符串拼接的成本，但是它会私底下创建一个&lt;code&gt;Object[]&lt;/code&gt;对象在调用info方法之前，即使info级别的日志不打印。</span>
</span><span class='line'><span class="cm">   * 因此，如果不是必须3个及以上参数的话，推荐使用两个参数和一个参数的info日志。</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">(</span><span class="n">String</span> <span class="n">format</span><span class="o">,</span> <span class="n">Object</span><span class="err">…</span> <span class="n">arguments</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * 打印抛出异常信息的info 级别日志</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">t</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>此外，需要介绍的是在slf4j中还提供了含有Marker对象的日记输出API接口。Marker是常常被用来丰富log状态的对象。遵守slf4j的日志系统实现，决定了信息怎样在使用的Marker之间传达。实际上，很多遵守规范的日志系统会忽视掉marker数据,所以，我们不介绍Marker相关API接口。</p>

<p>下面给出各个接口的使用示例代码：</p>

<p><figure class='code'><figcaption><span>API使用 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author: ketao Date: 14-5-3 Time: 上午1:03</span>
</span><span class='line'><span class="cm"> * @version: $Id$</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">LogTest</span><span class="o">.</span><span class="na">class</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;纯字符串信息的info级别日志&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;一个参数:{}的info级别日志&quot;</span><span class="o">,</span> <span class="s">&quot;agr1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;二个参数:agrs1:{};agrs2:{}的info级别日志&quot;</span><span class="o">,</span> <span class="s">&quot;args1&quot;</span><span class="o">,</span> <span class="s">&quot;args2&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 下面两种方式都可以，一般使用上面一种就可以了</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;三个参数:agrs1:{};agrs2:{};args3:{} 的info级别日志&quot;</span><span class="o">,</span> <span class="s">&quot;args1&quot;</span><span class="o">,</span> <span class="s">&quot;args2&quot;</span><span class="o">,</span> <span class="s">&quot;args3&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;三个参数:agrs1:{};agrs2:{};args3:{} 的info级别日志&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&quot;args1&quot;</span><span class="o">,</span> <span class="s">&quot;args2&quot;</span><span class="o">,</span> <span class="s">&quot;args3&quot;</span> <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;======================异常相关====================================&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 测试异常相关日志</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;抛出异常,e:&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">&quot;测试抛出IO异常信息&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;二个参数:agrs1:{};agrs2:{}的info级别日志&quot;</span><span class="o">,</span> <span class="s">&quot;args1&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">&quot;测试抛出IO异常信息&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;二个参数:agrs1:{};agrs2:{}的info级别日志&quot;</span><span class="o">,</span> <span class="s">&quot;args1&quot;</span><span class="o">,</span> <span class="s">&quot;args2&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">&quot;测试抛出IO异常信息&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 下面两种方式都可以，一般使用上面一种就可以了</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;三个参数:agrs1:{};agrs2:{};args3:{} 的info级别日志&quot;</span><span class="o">,</span> <span class="s">&quot;args1&quot;</span><span class="o">,</span> <span class="s">&quot;args2&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">&quot;测试抛出IO异常信息&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;三个参数:agrs1:{};agrs2:{};args3:{} 的info级别日志&quot;</span><span class="o">,</span> <span class="s">&quot;args1&quot;</span><span class="o">,</span> <span class="s">&quot;args2&quot;</span><span class="o">,</span> <span class="s">&quot;agrs3&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span>
</span><span class='line'>            <span class="s">&quot;测试抛出IO异常信息&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;三个参数:agrs1:{};agrs2:{};args3:{} 的info级别日志&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&quot;args1&quot;</span><span class="o">,</span> <span class="s">&quot;args2&quot;</span><span class="o">,</span> <span class="s">&quot;args3&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">&quot;测试抛出IO异常信息&quot;</span><span class="o">)</span> <span class="o">});</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;三个参数:agrs1:{};agrs2:{};args3:{} 的info级别日志&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&quot;args1&quot;</span><span class="o">,</span> <span class="s">&quot;args2&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">&quot;测试抛出IO异常信息&quot;</span><span class="o">)</span> <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>对应输出日志信息：</p>

<pre><code>[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:20)] 纯字符串信息的info级别日志
[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:21)] 一个参数:agr1的info级别日志
[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:22)] 二个参数:agrs1:args1;agrs2:args2的info级别日志
[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:24)] 三个参数:agrs1:args1;agrs2:args2;args3:args3 的info级别日志
[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:25)] 三个参数:agrs1:args1;agrs2:args2;args3:args3 的info级别日志
[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:27)] ======================异常相关====================================
[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:29)] 抛出异常,e:
java.io.IOException: 测试抛出IO异常信息
	at com.qunar.dubbo.LogTest.main(LogTest.java:29) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_45]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_45]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_45]
	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_45]
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) [idea_rt.jar:na]
[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:31)] 二个参数:agrs1:args1;agrs2:java.io.IOException: 测试抛出IO异常信息的info级别日志
[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:32)] 二个参数:agrs1:args1;agrs2:args2的info级别日志
java.io.IOException: 测试抛出IO异常信息
	at com.qunar.dubbo.LogTest.main(LogTest.java:32) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_45]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_45]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_45]
	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_45]
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) [idea_rt.jar:na]
[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:35)] 三个参数:agrs1:args1;agrs2:args2;args3:java.io.IOException: 测试抛出IO异常信息 的info级别日志
[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:36)] 三个参数:agrs1:args1;agrs2:args2;args3:agrs3 的info级别日志
java.io.IOException: 测试抛出IO异常信息
	at com.qunar.dubbo.LogTest.main(LogTest.java:36) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_45]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_45]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_45]
	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_45]
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) [idea_rt.jar:na]
[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:38)] 三个参数:agrs1:args1;agrs2:args2;args3:args3 的info级别日志
java.io.IOException: 测试抛出IO异常信息
	at com.qunar.dubbo.LogTest.main(LogTest.java:38) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_45]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_45]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_45]
	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_45]
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) [idea_rt.jar:na]
[2014-05-03 03:47:14 [34mINFO [0;39m com.qunar.dubbo.LogTest.main(LogTest.java:39)] 三个参数:agrs1:args1;agrs2:args2;args3:java.io.IOException: 测试抛出IO异常信息 的info级别日志
</code></pre>

<blockquote>
  <blockquote>
    <p>Note: 从代码调用可以看到，throwable 异常信息单独作为一个参数输入，因此，如果把异常信息作为<code>{}</code>占位符中的字符串，则会调用其对应toString方法，而无法打印异常堆栈信息。可以看看下面的截取源码：<br />
<figure class='code'><figcaption><span>API使用 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">info</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">filterAndLog_0_Or3Plus</span><span class="o">(</span><span class="n">FQCN</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">Level</span><span class="o">.</span><span class="na">INFO</span><span class="o">,</span> <span class="n">msg</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// 当日志的参数string 大于1，并且包含 Throwable类型参数，则调用下面的方法   public void info(String format, Object[] argArray) {</span>
</span><span class='line'><span class="n">filterAndLog_0_Or3Plus</span><span class="o">(</span><span class="n">FQCN</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">Level</span><span class="o">.</span><span class="na">INFO</span><span class="o">,</span> <span class="n">format</span><span class="o">,</span> <span class="n">argArray</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * 在logback代码中，作者表明如果不使用Object[]创建参数数组对象，则会减少20 纳秒的时间开销。</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">filterAndLog_0_Or3Plus</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">localFQCN</span><span class="o">,</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">Marker</span> <span class="n">marker</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Level</span> <span class="n">level</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">msg</span><span class="o">,</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">params</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">final</span> <span class="n">FilterReply</span> <span class="n">decision</span> <span class="o">=</span> <span class="n">loggerContext</span>
</span><span class='line'>    <span class="o">.</span><span class="na">getTurboFilterChainDecision_0_3OrMore</span><span class="o">(</span><span class="n">marker</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="n">level</span><span class="o">,</span> <span class="n">msg</span><span class="o">,</span>
</span><span class='line'>        <span class="n">params</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">decision</span> <span class="o">==</span> <span class="n">FilterReply</span><span class="o">.</span><span class="na">NEUTRAL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">effectiveLevelInt</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">level</span><span class="o">.</span><span class="na">levelInt</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">decision</span> <span class="o">==</span> <span class="n">FilterReply</span><span class="o">.</span><span class="na">DENY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">buildLoggingEventAndAppend</span><span class="o">(</span><span class="n">localFQCN</span><span class="o">,</span> <span class="n">marker</span><span class="o">,</span> <span class="n">level</span><span class="o">,</span> <span class="n">msg</span><span class="o">,</span> <span class="n">params</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span><span class="c1">// 在这个方法里面，会LoggingEvent方法构架日志信息，而对于Throwable非空时，则会创建一个ThrowableProxy对象，具体代码见下面。   }</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 下面的代码，是对日志中的异常打印信息。显然，在messageFormat里面，使用String来处理，是无法获得这么丰富的异常堆栈信息的。</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">ThrowableProxy</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">throwable</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">this</span><span class="o">.</span><span class="na">throwable</span> <span class="o">=</span> <span class="n">throwable</span><span class="o">;</span>
</span><span class='line'><span class="k">this</span><span class="o">.</span><span class="na">className</span> <span class="o">=</span> <span class="n">throwable</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'><span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">throwable</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span>
</span><span class='line'><span class="k">this</span><span class="o">.</span><span class="na">stackTraceElementProxyArray</span> <span class="o">=</span> <span class="n">ThrowableProxyUtil</span><span class="o">.</span><span class="na">steArrayToStepArray</span><span class="o">(</span><span class="n">throwable</span>
</span><span class='line'>    <span class="o">.</span><span class="na">getStackTrace</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//下面构建详细异常的堆栈信息，这也就是我们在代码输出时，看到的一大坨at... 输出错误代码位置等。</span>
</span><span class='line'><span class="n">Throwable</span> <span class="n">nested</span> <span class="o">=</span> <span class="n">throwable</span><span class="o">.</span><span class="na">getCause</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">nested</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">cause</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ThrowableProxy</span><span class="o">(</span><span class="n">nested</span><span class="o">);</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">cause</span><span class="o">.</span><span class="na">commonFrames</span> <span class="o">=</span> <span class="n">ThrowableProxyUtil</span>
</span><span class='line'>      <span class="o">.</span><span class="na">findNumberOfCommonFrames</span><span class="o">(</span><span class="n">nested</span><span class="o">.</span><span class="na">getStackTrace</span><span class="o">(),</span>
</span><span class='line'>          <span class="n">stackTraceElementProxyArray</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">GET_SUPPRESSED_METHOD</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// this will only execute on Java 7</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">GET_SUPPRESSED_METHOD</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">throwable</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">obj</span> <span class="k">instanceof</span> <span class="n">Throwable</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Throwable</span><span class="o">[]</span> <span class="n">throwableSuppressed</span> <span class="o">=</span> <span class="o">(</span><span class="n">Throwable</span><span class="o">[])</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">throwableSuppressed</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">suppressed</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThrowableProxy</span><span class="o">[</span><span class="n">throwableSuppressed</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">throwableSuppressed</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">suppressed</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ThrowableProxy</span><span class="o">(</span><span class="n">throwableSuppressed</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">suppressed</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">commonFrames</span> <span class="o">=</span> <span class="n">ThrowableProxyUtil</span>
</span><span class='line'>              <span class="o">.</span><span class="na">findNumberOfCommonFrames</span><span class="o">(</span><span class="n">throwableSuppressed</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getStackTrace</span><span class="o">(),</span>
</span><span class='line'>                  <span class="n">stackTraceElementProxyArray</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ignore</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvocationTargetException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ignore</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<blockquote>
  <blockquote>
    <p>Note: 上面代码只是一般的步骤，对于调用<code>Object[]</code>形式的方法，则<code>ThrowableProxy</code>之前，还会对<code>Object[]</code>中的元素进行过滤处理，提取出最后一个元素判断是不是 <code>Throwable</code>类型的对象。代码参考如下：</p>
  </blockquote>
</blockquote>

<p><figure class='code'><figcaption><span>API使用 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">final</span> <span class="kd">public</span> <span class="kd">static</span> <span class="n">FormattingTuple</span> <span class="nf">format</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">messagePattern</span><span class="o">,</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">arg1</span><span class="o">,</span> <span class="n">Object</span> <span class="n">arg2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">arrayFormat</span><span class="o">(</span><span class="n">messagePattern</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="n">arg1</span><span class="o">,</span> <span class="n">arg2</span> <span class="o">});</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//这方法会对输入参数进行特殊处理和过滤  final public static FormattingTuple arrayFormat(final String messagePattern,</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">argArray</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">Throwable</span> <span class="n">throwableCandidate</span> <span class="o">=</span> <span class="n">getThrowableCandidate</span><span class="o">(</span><span class="n">argArray</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">......</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">L</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">argArray</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">FormattingTuple</span><span class="o">(</span><span class="n">sbuf</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">argArray</span><span class="o">,</span> <span class="n">throwableCandidate</span><span class="o">);</span><span class="c1">// 如果元素中有Throwable类型，则size会减少，因此，对应的Throwale参数位置为 置提取出来的异常对象</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">FormattingTuple</span><span class="o">(</span><span class="n">sbuf</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">argArray</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">static</span> <span class="kd">final</span> <span class="n">Throwable</span> <span class="nf">getThrowableCandidate</span><span class="o">(</span><span class="n">Object</span><span class="o">[]</span> <span class="n">argArray</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">argArray</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">argArray</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">final</span> <span class="n">Object</span> <span class="n">lastEntry</span> <span class="o">=</span> <span class="n">argArray</span><span class="o">[</span><span class="n">argArray</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">lastEntry</span> <span class="k">instanceof</span> <span class="n">Throwable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">(</span><span class="n">Throwable</span><span class="o">)</span> <span class="n">lastEntry</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="kc">null</span><span class="o">;</span>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<h2 id="a-idenda"><a id="End">后记</a></h2>
<p>slf4j的日志，打印抛出异常的信息时，如果只需要message，则需要在log api接口中的String 里面对应位置添加<code>{}</code>符号；否则，如果想要打印全量<font color="red">异常栈信息，则**不能也不可以**</font>在string字符串中添加<code>{}</code>，不然会大失所望。</p>

]]></content>
  </entry>
  
</feed>
