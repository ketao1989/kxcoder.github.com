<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring | 柯小小西の小水滴]]></title>
  <link href="http://kxcoder.github.io/blog/categories/spring/atom.xml" rel="self"/>
  <link href="http://kxcoder.github.io/"/>
  <updated>2015-10-07T10:57:00+08:00</updated>
  <id>http://kxcoder.github.io/</id>
  <author>
    <name><![CDATA[柯小小西]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring MVC 项目构建入门指南]]></title>
    <link href="http://kxcoder.github.io/blog/2014/05/26/Spring-MVC-Project-Introduction/"/>
    <updated>2014-05-26T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2014/05/26/Spring-MVC-Project-Introduction</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#Framework">SimpleSpringProject 结构介绍</a></li>
  <li><a href="#Configure">SimpleSpringProject 配置介绍</a></li>
  <li><a href="#DataOp">SimpleSpringProject 数据操作实现介绍</a></li>
  <li><a href="#Finally">小结</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>走入社会工作接近一年了，感慨颇多。一年前的现在，自己对java知之甚少，更不知道怎么去创建一个满足<code>spring mvc</code>架构思想的web项目。最近，为了学习<code>Spring MVC</code>框架的实现原理，首先新建了一个web项目，该项目包含 <code>Spring + Mybatis</code>，涉及数据库，DAO，service，API，业务，controller多个模块。</p>

<blockquote>
  <blockquote>
    <p>Note：这个项目代码完成的功能只是为了演示一个大项目应该具备的结构，而显然在实际工程中，这么简单地功能，是不需要如此繁杂的结构模块的。</p>
  </blockquote>
</blockquote>

<p>此外，关于<code>Spring MVC</code>演示项目的代码，可以从<code>github</code>上<code>clone</code>一份到本地，项目为：<a href="https://github.com/ketao1989/simpleSpringProject">SimpleSpringProject</a>。<code>git clone</code> 地址为：<code>https://github.com/ketao1989/simpleSpringProject.git</code></p>

<!--more-->

<h2 id="a-idframeworksimplespringproject-a"><a id="Framework">SimpleSpringProject 结构介绍</a></h2>

<p><code>simpleSpringProject</code>项目各个模块分工明确，主要由8个模块组成：</p>

<pre><code>1. simple-spring-main模块：该模块主要是提供给外界访问的controller层所在。`controller`层可以对外提供html视图，也可以对外提供RPC调用，例如 alibaba 的 dubbo接口。

2. simple-spring-api模块：该模块主要就是封装一些底层的方法接口给外部使用。比如，如果我们使用RPC接口调用服务，则只需要API包就可以了，具体实现调用方是不需要知道的。

3. simple-spring-biz模块：该模块是业务模块，也就是具体业务需要的方法基本上都是在这里实现的。在demo 中，在这一层实现api提供的接口。该模块主要调用service层提供的基本服务，组装起来，实现各种不同的业务逻辑接口。

4. simple-spring-service模块：该模块是基础服务模块，该模块会为biz业务模块提供基本的服务，这些服务功能都比较简单，业务逻辑单一。因此，在这一层进行单元测试，一般会取到比较好的效果。

5. simple-spring-dao模块：该模块是数据库相关接口模块。`Mybatis`可以把interface 和 xml结合起来，使得开发者可以把数据库表中相关操作集成在 interface 代码中，而具体的`SQL`实现则写在xml文件中。这样子，可以让整个结构更清晰。

6. simple-spring-config模块：该模块就是相关`sql`语句的配置文件所在地。一般地，会根据interface 来切分不同的配置文件，两种的关联关系是通过对于的`sql.xml`文件中`mapper namespace`来关联。

7. simple-spring-common模块：该模块一般存放一些项目公用的工具类和常量值。比如，一些配置文件中需要配置的属性值，一些xxxUtils类实现等。

8. simple-spring-model模块：该模块主要提供一些模型，各个类需要使用的对象。比如，我们需要获取一个学生个体信息，显然会作为一个对象类来实现。
</code></pre>

<blockquote>
  <blockquote>
    <p>Note：显然，对于各个模块的具体详细分工，其实还是可以调整的，比如可能有些地方会在<code>service</code>层来做稍微复杂的服务实现，而在<code>biz</code>层则稍微组合就可以了。这里，demo的模块分类，只是正常情况下，业务规模有一些大的情况下，才会进行多个模块的分工。</p>
  </blockquote>
</blockquote>

<h2 id="a-idconfiguresimplespringproject-a"><a id="Configure">SimpleSpringProject 配置介绍</a></h2>

<p><code>Spring</code>作为一个主打配置的框架，配置文件的位置，十分重要。如果，一些配置文件的一个符号错误，都会导致整个<code>MVC</code> web 项目无法正常启动。</p>

<blockquote>
  <blockquote>
    <p>首先，来看看web项目中，重中之重的配置文件<code>web.xml</code>，</p>
  </blockquote>
</blockquote>

<p><figure class='code'><figcaption><span>配置文件web.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;web-app</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="na">xmlns:web=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="na">xsi:schemalocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="na">id=</span><span class="s">&quot;WebApp_ID&quot;</span> <span class="na">version=</span><span class="s">&quot;2.5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!--启动配置文件设置--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;display-name&gt;</span>simple-spring-main<span class="nt">&lt;/display-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;context-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>classpath:applicationContext.xml<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/context-param&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;listener&gt;</span>
</span><span class='line'>        <span class="nt">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/listener&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- 请求地址匹配映射 --&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>springmvc<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>        <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>springmvc<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>*.htm<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>springmvc<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>*.json<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>springmvc<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>*.xml<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- 编码过滤器 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter-name&gt;</span>characterEncodingFilter<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="nt">&lt;/filter-class&gt;</span>
</span><span class='line'>        <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>            <span class="nt">&lt;param-name&gt;</span>encoding<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;param-value&gt;</span>UTF-8<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>            <span class="nt">&lt;param-name&gt;</span>forceEncoding<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filter-name&gt;</span>characterEncodingFilter<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>*.htm<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/filter-mapping&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- 指定404页面 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;error-page&gt;</span>
</span><span class='line'>        <span class="nt">&lt;error-code&gt;</span>404<span class="nt">&lt;/error-code&gt;</span>
</span><span class='line'>        <span class="nt">&lt;location&gt;</span>/404.html<span class="nt">&lt;/location&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/error-page&gt;</span>
</span></code></pre></td></tr></table></div></figure>

&gt;&gt; 接下来默认`springmvc-servlet.xml`文件和`applicationContext.xml`文件。`springmvc-servlet.xml`配置文件，主要定义servlet相关配置，比如scan 基本包名，视图velocity配置，jsp配置设置等信息。由于这里只有一个 mapping servlet，所以只有一个对应的配置文件，当然也可以把这个文件放置其他地方，然后再`web.xml`中定义对于的servlet就可以了。`applicationContext.xml`配置文件，则是整个项目的公共配置，比如指定数据库配置，连接池相关信息，一些spring bean 注册信息，默认的视图解析器等等。

-

&gt;&gt; 接下来，就是`mybatis.xml`配置文件，这个配置主要是针对`Mybatis`而存在的，其指定项目中`Mybatis`设置，以及一些`typeHandler`，`mapper`实现的位置。下面给出demo中的配置示例：

<figure class='code'><figcaption><span>配置文件mybatis.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE configuration
</span><span class='line'>        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
</span><span class='line'>        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;settings&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 这个配置使全局的映射器启用或禁用缓存 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&quot;cacheEnabled&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载 --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt; --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载 --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&gt; --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动） --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt; --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动 --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt; --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 允许JDBC支持生成的键。需要适合的驱动。如果设置为true则这个设置强制生成的键被使用，尽管一些驱动拒绝兼容但仍然有效（比如Derby） --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&quot;useGeneratedKeys&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 指定MyBatis如何自动映射列到字段/属性。PARTIAL只会自动映射简单，没有嵌套的结果。FULL会自动映射任意复杂的结果（嵌套的或其他情况） --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt; --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 配置默认的执行器。SIMPLE执行器没有什么特别之处。REUSE执行器重用预处理语句。BATCH执行器重用语句和批量更新 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&quot;safeRowBoundsEnabled&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&quot;defaultExecutorType&quot;</span> <span class="na">value=</span><span class="s">&quot;REUSE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 设置超时时间，它决定驱动等待一个数据库响应的时间 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&quot;defaultStatementTimeout&quot;</span> <span class="na">value=</span><span class="s">&quot;600&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/settings&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;mappers&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mapper</span> <span class="na">resource=</span><span class="s">&quot;mapper/version.xml&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/mappers&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>

-

&gt;&gt; 最后，介绍下`pom.xml`文件，这个实际上，不算是MVC 所仅有的。但是，作为一个maven项目，很多配置都比较关键，一般模块的`pom.xml`都比较简单，但是`	main`模块由于涉及编译成war包，并且针对不同的运行环境，对应打包的配置文件不同，因此，其内部配置会比较复杂。具体参考demo项目代码。


## <a id="DataOp">SimpleSpringProject 数据操作实现介绍</a>

整个项目代码都非常简单，不需要过多的去说明。在这里，对于初学者，需要介绍下，数据库相关的访问代码实现逻辑。

&gt;&gt; 首先，定义一个接口，该接口里面会声明一些需要在	`sql`中去实现的方法名，如下所示：

<figure class='code'><figcaption><span>dao层代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author: tao.ke Date: 14-5-26 Time: 上午11:28</span>
</span><span class='line'><span class="cm"> * @version: \$Id$</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">VersionDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 根据id 查询对应的version信息</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * @param id</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Version</span> <span class="nf">queryVersionById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)</span> <span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 查询所有的版本信息</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span> <span class="nf">queryAllVersions</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

&gt;&gt; 当`dao`模块则存在了需要实现的接口，则接下来可以在`config`模块中去实现它，具体实现，如下所示：

<figure class='code'><figcaption><span>配置文件mapper.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE mapper PUBLIC &quot;-//ibatis.apache.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&quot;io.github.ketao1989.dao.VersionDao&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;resultmap</span> <span class="na">id=</span><span class="s">&quot;VersionMap&quot;</span> <span class="na">type=</span><span class="s">&quot;io.github.ketao1989.model.Version&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;id</span> <span class="na">column=</span><span class="s">&quot;id&quot;</span> <span class="na">property=</span><span class="s">&quot;id&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;id&quot;</span> <span class="na">property=</span><span class="s">&quot;id&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;version_num&quot;</span> <span class="na">property=</span><span class="s">&quot;versionNum&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;description&quot;</span> <span class="na">property=</span><span class="s">&quot;description&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;update_time&quot;</span> <span class="na">property=</span><span class="s">&quot;updateTime&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/resultmap&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;sql</span> <span class="na">id=</span><span class="s">&quot;versionColumn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;trim</span> <span class="na">suffix=</span><span class="s">&quot;&quot;</span> <span class="na">suffixoverrides=</span><span class="s">&quot;,&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&quot;versionNum != null&quot;</span><span class="nt">&gt;</span>version_num,<span class="nt">&lt;/if&gt;</span>
</span><span class='line'>            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&quot;description != null&quot;</span><span class="nt">&gt;</span>description,<span class="nt">&lt;/if&gt;</span>
</span><span class='line'>            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&quot;updateTime != null&quot;</span><span class="nt">&gt;</span>update_time<span class="nt">&lt;/if&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/trim&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/sql&gt;</span>
</span><span class='line'>    <span class="nt">&lt;sql</span> <span class="na">id=</span><span class="s">&quot;versionValue&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;trim</span> <span class="na">suffix=</span><span class="s">&quot;&quot;</span> <span class="na">suffixoverrides=</span><span class="s">&quot;,&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&quot;versionNum != null&quot;</span><span class="nt">&gt;</span>#{versionNum},<span class="nt">&lt;/if&gt;</span>
</span><span class='line'>            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&quot;description != null&quot;</span><span class="nt">&gt;</span>#{description},<span class="nt">&lt;/if&gt;</span>
</span><span class='line'>            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">&quot;updateTime != null&quot;</span><span class="nt">&gt;</span>#{updateTime}<span class="nt">&lt;/if&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/trim&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/sql&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- 根据id查询Version记录 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;queryVersionById&quot;</span> <span class="na">parametertype=</span><span class="s">&quot;map&quot;</span> <span class="na">resultmap=</span><span class="s">&quot;VersionMap&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          select id,version_num,description,update_time
</span><span class='line'>          from version
</span><span class='line'>          where id = #{id}
</span><span class='line'>    <span class="nt">&lt;/select&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- 查询所有Version记录 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;queryAllVersions&quot;</span> <span class="na">resultmap=</span><span class="s">&quot;VersionMap&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          select id,version_num,description,update_time
</span><span class='line'>          from version
</span><span class='line'>    <span class="nt">&lt;/select&gt;</span>
</span><span class='line'><span class="nt">&lt;/mapper&gt;</span>
</span></code></pre></td></tr></table></div></figure>

&gt;&gt; Note：这样在`service`模块调用 `dao`模块的接口，就可以操作数据库了。当然，你在`applicationContext.xml`中需要配置下面一段代码：

<figure class='code'><figcaption><span>配置文件applicationContext.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- 创建SqlSessionFactory --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="na">name=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;configLocation&quot;</span> <span class="na">value=</span><span class="s">&quot;classpath:mybatis-config.xml&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basePackage&quot;</span> <span class="na">value=</span><span class="s">&quot;io.github.ketao1989.dao&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="na">value=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


## <a id="Finally">小结</a>

本文只是简单介绍了下`Spring MVC`项目的一些实现注意点，具体的代码实现，请参考本github上的[SimpleSpringProject](https://github.com/ketao1989/simpleSpringProject) 。在demo代码的实现里面，如果你是一个初学者，你会发现更多需要注意的地方。如果你对于本项目的各个地方都能理解，并且可以仿照新建一个项目，那么你对于`Spring MVC`就已经入门了，可以深入框架源码来进一步学习了。

当然，作为一个提供初学者使用的`Spring MVC` web工程项目，该demo只是供学习使用而已。你也可以继续在该demo上扩展，增加更多地类，更多地业务和功能，从而完成一个商业大项目。
</version></web-app>
]]></content>
  </entry>
  
</feed>
