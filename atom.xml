<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[柯小小西の小水滴]]></title>
  <link href="http://kxcoder.github.io/atom.xml" rel="self"/>
  <link href="http://kxcoder.github.io/"/>
  <updated>2015-10-07T14:48:21+08:00</updated>
  <id>http://kxcoder.github.io/</id>
  <author>
    <name><![CDATA[柯小小西]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Zookeeper 编程指南]]></title>
    <link href="http://kxcoder.github.io/blog/2015/09/05/zookeeper-programmer-guide/"/>
    <updated>2015-09-05T20:52:39+08:00</updated>
    <id>http://kxcoder.github.io/blog/2015/09/05/zookeeper-programmer-guide</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Introduction">前言</a></li>
  <li><a href="#The_ZooKeeper_Data_Model">Zookeeper 数据模型</a></li>
  <li><a href="#ZooKeeper_Sessions">Zookeeper 会话</a></li>
  <li><a href="#ZooKeeper_Watches">Zookeeper 监听</a></li>
  <li><a href="#ZooKeeper_ACL">ZooKeeper 使用 ACL 访问控制</a></li>
</ol>

<h2 id="a-idintroduction1-a"><a id="Introduction">1 前言</a></h2>

<p>该文档是提供给期望使用 <code>Zookeeper</code>协作服务功能的开发者创建分布式应用的。文档内部包含了一些概念上和实践应用上的资料信息。</p>

<p>在指南的前四节主要讨论了 <code>Zookeeper</code> 各方面的概念。这些东西对于理解 <code>Zookeeper</code>如何工作以及如何去使用 <code>Zookeeper</code> 是非常必要的。它虽然没有包含源代码，但是它是假设读者对于分布式计算相关的问题是很熟悉的。它们主要如下介绍：</p>

<ul>
  <li><a href="#The_ZooKeeper_Data_Model">Zookeeper 数据模型</a></li>
  <li><a href="#ZooKeeper_Sessions">Zookeeper 会话</a></li>
  <li><a href="#ZooKeeper_Watches">Zookeeper 监听</a></li>
  <li><a href="#Consistency_Guarantees">Zookeeper 一致性保证</a></li>
</ul>

<!--more-->

<p>后面四节主要提供了一些实践编程相关的资料。主要是：</p>

<ul>
  <li><a href="#A_Guide_to_ZooKeeper_Operations">Zookeeper 操作指南</a></li>
  <li><a href="#Bindings">Zookeeper Bindings</a></li>
  <li><a href="#Program_Structure">Zookeeper 程序结构简单示例（待定）</a></li>
  <li><a href="#Gotchas">Zookeeper 性能和可伸缩性</a></li>
</ul>

<p>文档最后的附录部分包含了一些有用的，Zookeeper 相关的链接。</p>

<p>虽然，该指南中的很多资料在其他一些独立的文章博客中都已经存在了，但是对于开始第一个 <code>Zookeeper</code> 应用的你来说，还是最后阅读完<code>Zookeeper 数据模型</code> 和 <code>Zookeeper 操作指南</code>。</p>

<h2 id="a-idthezookeeperdatamodel-2-zookeeper-a"><a id="The_ZooKeeper_Data_Model"> 2 Zookeeper 数据模型</a></h2>

<p><code>Zookeeper</code> 有一个分级的命名空间，类似于一个分布式的文件系统。唯一不同的是命名空间中每个节点可以有对应的数据关联它，就像孩子一样。这一点类似于文件系统中允许一个文件也可以成为目录一样。到节点的路径常常表示成正则的，绝对的，斜线分隔的路径；它们没有相对的引用。在路径上使用的任何编码需要满足以下限制：</p>

<ul>
  <li><code>null</code>字符不可以成为路径名字的一部分。</li>
  <li>由于显示的问题，如下字符不能使用：<code>\u0001</code>-<code>\u001F</code> 和 <code>\u007F</code>-<code>\u009F</code>.</li>
  <li>下面字符同样不被允许：<code>\ud800</code>-<code>\u0F8FF</code> 和 <code>\uFFF0</code>-<code>\uFFFF</code>.</li>
  <li><code>.</code>字符可以作为路径名字中某块名的一部分，但是<code>.</code>和<code>..</code>不能单独作为路径的一块，因为在 Zookeeper 中不允许相对路径。因此，如下是非法的：<code>/a/b/./c</code>或者<code>/a/b/../c</code>.</li>
  <li><code>zookeeper</code>字符串保留。</li>
</ul>

<h3 id="znodes">2.1 ZNodes</h3>

<p>ZooKeeper 树上的每一个节点都称之为<code>znode</code>。Znodes 维护了一个包含数据变化和acl变化版本号的状态结构体。这个结构体也包含时间戳。因此，版本号和时间戳一起确保Zookeeper验证缓存和协调更新。每一次znode的数据变化，版本号也会对应增长。例如，当一个客户端检索数据时，它也会获得该数据的版本号，然后当一个客户端执行更新或者删除时，它必须提供对应变化的znode的数据版本。如果它提供的版本不能够匹配到实际的数据版本时，更新将会失败。</p>

<blockquote>
  <blockquote>
    <p>Note:
在分布式应用工程中，<code>node</code>常常被看做一个主机，一台服务器，一组中的一个成员等等。在Zookeeper文档中，<code>znodes</code>称为数据节点；<code>Servers</code>则是标记为Zookeeper服务的机器；<code>quorum peers</code>是标记为一个集群的所有服务器；<code>client</code>是任何使用Zookeeper服务的机器或者进程。</p>

  </blockquote>
</blockquote>

<p>Znodes是开发者访问的最主要的实体。它们有一些值得去关注的特征：</p>

<h4 id="watches">2.1.1 Watches</h4>

<p>客户端可以在 znodes 上设置监听。znode 的改变将会触发监听器，然后清理监听。当一个监听器被触发时，Zookeeper 会发送对应客户端一个通知。更新的信息可以参考 <a href="#ZooKeeper_Watches">Zookeeper 监听</a>。</p>

<h4 id="section-1">2.1.2 数据访问</h4>

<p>保存在一个命名空间里的每个节点上的数据都可以被原子的读和写。读，获取对应znode上所有的数据字节；然后一个写，替换所有的数据。每个节点上的ACL(访问控制列表)可以限制<code>who can do what</code>。</p>

<p>Zookeeper 不是被设计用来作为一个通用的数据库或者大对象的存储。相反，它是用来管理协调数据的。这个数据来源于配置，状态信息，集结地点等形式中。一般，协调的数据相对来说是很小的：几千字节计算。Zookeeper 客户端和服务器实现的时候会确保znode的数据小于1M，但是通常数据会比那个小得多。操作相对大的数据将会导致一些操作会花费更对的时间，从而一些操作的延迟性，这主要是因为一些额外的时间需要被用来在网络上移动更多的数据，存储起来。如果一定需要大数据的存储，通常的处理方式是将数据存储在大容量存储系统上，比如 NFS 或者 HDFS ，然后再Zookeeper里保持存储位置的指针。</p>

<h4 id="section-2">2.1.3 短暂节点</h4>

<p>Zookeeper 也有短暂节点的概念。在会话创建时，znode存活；当会话结束时，znode删除。由于这个特性，所以其不允许有孩子。</p>

<h4 id="section-3">2.1.4 顺序节点-唯一命名</h4>

<p>当创建一个znode时，你也可以请求Zookeeper在路径的末尾增加一个单调递增的计算器。这个计算器对父节点来说是唯一的。计算器有一个<code>%010d</code>格式化–表示10个数字0补全。比如：<code>&lt;path&gt;0000000001</code>。Notes：计数器用来保存下一个顺序数字是一个有符号整形，由父节点保存，当增长到<code>2147483647</code>将会溢出。</p>

<h3 id="zookeeper--time">2.2 Zookeeper 中的 Time</h3>

<p>Zookeeper 追踪 time的多种方式如下：</p>

<ul>
  <li>
    <p>Zxid<br />
Zookeeper状态的每次改变，在<code>zxid</code>(ZooKeeper Transaction Id)里都会获取到一个时间戳。这意味着在ZooKeeper中所有都变化都是有序的。每次改变都将会有一个<code>zxid</code>，如果 zxid1 小于 zxid2，则 zxid1 一定在 zxid2 之前发生。</p>
  </li>
  <li>
    <p>版本号<br />
一个节点的每次改变都会导致对应节点的其中一个版本号递增。节点对应的三个版本号是：version(znode 数据改变对应的编号)；cversion(znode 的孩子改变对应的编号)；aversion(znode 的ACL改变对应的编号)。</p>
  </li>
  <li>
    <p>Ticks<br />
当使用多服务器的 ZooKeeper 时，服务器使用 <code>ticks</code> 来定义事件的时间，比如，状态上传，会话超时，连接超时等。tick 时间只能间接地表示最小的会话超时（每tick时间内2次）；如果一个客户端请求的会话超时小于最小的会话超时，则服务器将会告诉客户端它请求的会话超时实际上是最小的会话超时。</p>
  </li>
  <li>
    <p>真实时间<br />
ZooKeeper 不使用真实时间或者时钟时间，即使在所有我们期望把时间戳放入znode创建和修改的状态结构体里面。</p>
  </li>
</ul>

<h3 id="zookeeper-">2.3 ZooKeeper 状态结构体</h3>

<p>ZooKeeper 里每个 znode 的状态结构体都包括下面这些字段：</p>

<ul>
  <li>czxid<br />
导致znode被创建的zxid。</li>
  <li>mzxid<br />
对应znode最后一次改变的zxid。</li>
  <li>ctime<br />
当该znode创建开始的毫秒数。</li>
  <li>mtime<br />
当该znode最后一次更改开始的毫秒数。</li>
  <li>version<br />
znode数据改变的编号。</li>
  <li>cversion</li>
  <li>aversion</li>
  <li>ephemeralOwner<br />
如果该znode是临时节点，则为该节点owner的 会话id；如果不是临时节点，则为0。</li>
  <li>dataLength<br />
znode 数据字段的长度。</li>
  <li>numChildren<br />
znode对应孩子的个数。</li>
</ul>

<h2 id="a-idzookeepersessions-3-zookeeper-a"><a id="ZooKeeper_Sessions"> 3 Zookeeper 会话</a></h2>

<p>ZooKeeper 客户端通过绑定的编程语言创建一个 <code>handle</code>从而和ZooKeeper服务建立会话。一旦创建完成，<code>handle</code>开始处在  <code>CONNECTING</code> 状态，然后客户端将会和ZooKeeper服务中某个服务器连接上，然后其会切换到 <code>CONNECTED</code>状态。在通常的操作过程中，会处在这两张状态中的一种。如果发生了一个不可恢复的错误，比如会话过期或者认证失败，再或者如果应用显示地关闭 <code>handle</code>，则该 <code>handle</code> 将会转变为 <code>CLOSE</code> 状态。</p>

<p>下面的图展示了一个 ZooKeeper 客户端可能的状态流转情形：</p>

<p><img src="http://kxcoder.github.io/images/2015/09/zookeeper_stat.png" /></p>

<p>为了创建一个客户端会话，应用代码必须提供一个连接字符串，包含一个以逗号分隔的 <code>host:pair</code>列表, 每个<code>host:pair</code> 对应的是一台 ZooKeeper服务器（比如，”127.0.0.1:4545” 或者 “127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002”）。ZooKeeper 客户端会挑选任务的服务器，然后尝试去连接它。如果这个连接失败，或者这个客户端因为任何原因导致和这个服务器断开连接，客户端都将会自动尝试列表中的下一台服务器，知道一个连接被(重新)建立起来。</p>

<p><em>3.2.0 新特性</em>：一个可选择的”chroot”后缀也可能会添加到连接字符串中。和linux中的<code>chroot</code>命令相似，运行客户端的所有命令中的路径都是相对这个root来确定的。比如我们如果使用：”127.0.0.1:4545/app/a” 或者 “127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002/app/a”，则客户端将会以”/app/a” 为root，然后所有路径都是相对这个root而言的–例如，我们获取 “/foo/bar” 下面的文件，则实际上将会在 “app/a/foo/bar” 下面执行。这个特性对于多租户环境下是很有用的，这样每个用户在 ZooKeeper服务上其root都可以不同。因此，对于每个用户如果编码他们的应用中以”/”为root情况下，重复使用ZooKeeper服务将非常简单。</p>

<p>当一个客户端获取到ZooKeeper服务的一个<code>handle</code>，ZooKeeper 创建一个ZooKeeper 会话，以 64位数字表示。如果客户端连接到一台不同的 ZooKeeper服务器，它将会发送一个会话id作为连接握手的一部分。作为一个安全手段，服务器为该会话id创建一个任何ZooKeeper服务器都可以验证的password。当客户端建立完会话之后，password 将会和会话id一起发送给客户端。当客户端需要和新的服务器重新建立连接时，则发送该password 和 会话id。</p>

<p>ZooKeeper 客户端库调用创建一个ZooKeeper会话时，其中有一个参数是毫秒数的会话超时。客户端发送一个请求超时，服务器将响应从客户端获取的超时。当前的时候要求超时时间最小为 2 个 tckTime，并且最大为 20 个 tickTime。ZooKeeper 客户端API 运行访问协商的超时。</p>

<p>当一个客户端（会话）从ZK服务集群里分隔开，它将会开始搜素我们在创建会话时候指定的服务器列表。最后，当客户端和至少服务器中的一台重新建立连接后，会话将会要么转化为 <code>connected</code>状态（如果会话重连接在超时值之内），要么转化为<code>expired</code>状态（如果重连在会话超时之后）。为断开连接的客户端创建一个新的会话对象是不明智的。ZK 客户端库将会为你处理重连。在实践中，我们在客户端库中会有一些启发式的算法构建来处理像”羊群效应”等事情。只有在收到会话过期通过时，才会去创建一个新的会话。</p>

<p>会话过期由ZooKeeper集群自己管理，而不是客户端。当ZK客户端和集群建立会话时，其提供一个超时值。集群使用这个值来决定客户端会话是否超时。当集群没有在超时时间内收到返回，则发送会话过期。在会话过期的时候，集群将会删除该会话拥有的所有的临时节点，然后立即通知监听该变化的所有连接状态的客户端。在这个时间点，超时会话的客户端仍然和集群断开连接，在重新和集群建立连接之前，它将不会收到会话超时的通知。客户端将会一直带着断开连接的状态，知道TCP连接被重新建立起来，然后 超时会话的<code>watcher</code>将会接收到”会话超时”的通知。</p>

<p>一个超时的会话状态流转的过程示例：</p>

<ol>
  <li>connected：会话建立连接，客户端和集群处于通信中。</li>
  <li>客户端从集群中分割开…</li>
  <li>disconnected：客户端丢失和集群之间的连接</li>
  <li>… 时间过去了，在 超时区间之后，集群过期了会话，客户端由于和集群断开了所以看不到任何东西。</li>
  <li>… 时间进行走着，客户端恢复了和集群的网络层连接、</li>
  <li>expired：最终，客户端重新连接上集群，然后被通知过期。</li>
</ol>

<p>ZooKeeper 建立会话调用的另一个蚕食是默认的 <code>watcher</code>。当在客户端上的状态发送变更，watcher 将会被通知到。例如，如果一个客户端丢失了和服务器之间的连接，则客户端将会收到通知，或者如果客户端会话过期了。watcher 应该认为初始状态是 断开连接的。在一个新连接的case里面，发送给 watcher 的第一个通知就是会话连接事件。</p>

<p>会话通过客户端发送请求保持alive。如果会话空闲了会话超时时间段时，客户端将会发送 <code>PING</code>请求来保持会话alive。<code>PING</code>请求不仅允许 ZooKeeper服务器知道 客户端仍然活跃，也允许客户端通过连接验证 ZooKeeper服务器仍然活跃。<code>PING</code>的时间很充足，从而确保有在检测到死连接，然后重新连接到新的server的操作有足够的时间。</p>

<p>一旦一个到服务器的连接成功的建立了，客户端 lib 有两个基本的case 导致 连接丢失，当执行一个同步或者异步操作，然后出现如下情况：</p>

<ol>
  <li>在一个不再活跃/有效的会话上调用一个操作。</li>
  <li>当ZooKeeper客户端挂起一个操作时，断开和服务器之间的连接。</li>
</ol>

<p><em>3.2.0 新特性–SessionMovedException</em>：这是一个内部的异常。这个异常一般发生在一个会话和不同的服务器重新建立连接后接收到请求的时候。正常导致这个错误的原因是一个哭护短发生一个请求给一个服务器，但是网络包延迟，所以客户端超时，然后和新的服务器建立间接。当延迟的包被第一台服务器收到时，老的服务器检测到会话已经被移开，然后关闭客户端连接。客户端正常下不会看着这个错误，因为他不会从老的连接中读数据。出现这种情况的一个条件是当两个客户端尝试使用 password 和 会话id 重新建立相同的连接，其中一个客户端将重新建立连接，第二个客户端将会断开连接。</p>

<p><em>更新服务器列表</em>：我们允许客户端通过提供一组新的逗号分隔的<code>host:port</code>对列表来更新连接字符串。这个函数调用一个基于概率的负载均衡算法导致客户端断开和当前host的连接，从而达到服务器列表中连接的平均数。万一当前客户端连接的host不在新的列表中，这个调用将会导致连接被丢弃。另外，决定服务器数量的增加或者减少以及多少。</p>

<p>例如：如果前面的连接字符串包含 3 host，然后现在列表包含这 3 个 host和 2 个新加的 host，40%的客户端原来对应的连接将会迁移到新的hosts中的一个来确保均衡负载。这个方案将会导致客户端丢弃他的连接，然后0.4的概率连接到其他2台机器，在这种情况下，导致客户端随机选择连接 2 个新的host中的一台。</p>

<p>另一个例子–假设我们有5 台host，现在我们更新服务器列表移走 2 台host，然后客户端连接剩下 3 台host的依然连接，然后 移除的2台 host上的连接将被移动到剩下 3 台host的其中一台。如果连接丢弃，客户端移动到指定的模式，其可以选择一个新的服务器去根据概率算法连接服务器，而不是 RR。</p>

<p>在第一个例子中，每个客户端决定以0.4的概率来断开连接，但是一旦做完决定，它将尝试随机连接到一个新的服务器，仅仅在不能连接到新的服务器中的任何一台时，它才会尝试连接老的服务器。在找到一个服务器，或者尝试列表中所有的服务器，仍然连接失败的时候，客户端回退到正常的操作模式(从概率模式回到轮询RR模式)，即从连接字符串中选择任意的服务器，然后尝试连接它。如果失败，它将以RR模式尝试不同随机服务器。</p>

<h2 id="a-idzookeeperwatches-4-zookeeper-a"><a id="ZooKeeper_Watches"> 4 Zookeeper 监听</a></h2>

<p>在 ZooKeeper 里所有的读操作（getData()，getChildren()和 exists()）都可以将设置一个 <code>watch</code> 作为附加功能。ZooKeeper 对 <code>watch</code>的定义是：一个监听事件是一次性的 <code>trigger</code>，当监听的数据发送变化的时候，发送给设置监听的客户端们。对于这个定义，有三个关键点：</p>

<ul>
  <li>
    <p>One-time trigger<br />
当监听数据发送变化的时候，一个监听事件将会发送给客户端。例如，一个客户端使用 <code>getData("/znode1", true)</code>，然后<code>/znode1</code>的数据发送变化或者删除，客户端将会获得一个对应 <code>/znode1</code>的监听事件。<em>但是，如果<code>/znode1</code>再次改变，就不会再有监听事件发送出去，除非客户端通过另一个读操作来设置监听watch</em></p>
  </li>
  <li>
    <p>Sent to client<br />
这意味着一个正发送给客户端的事件，可能在发送修改操作的客户端完成操作返回成功 code 之前不会到达客户端。监听事件是异步发送给监听客户端的。ZooKeeper 提供一个有序的保证：一个客户端永远只有在看到一个watch事件之后才会看到这个watch对应的改变。网络延迟或者其他原因可能导致不同的客户端看到watch和更新返回code的时间不同。其关键之处在于不同客户端看到的所有事情都是有一致性的顺序的。</p>
  </li>
  <li>
    <p>The data for which the watch was set<br />
这指的是节点改变的不同方式。你可以认为 ZooKeeper 维护 watch的两个列表：数据watch 和 孩子watch。<code>getData()</code>和<code>exists()</code>设置数据watch；<code>getChildren()</code> 设置child监听。此外，你也可以认为 watch 可以根据数据返回的类型来设置。<code>getData()</code>和<code>exists()</code> 返回节点数据的信息，然而<code>getChildren()</code> 返回 孩子列表。因此，<code>setData()</code>将触发节点的数据watch 设置。一个成功的<code>create()</code>将会触发znode的数据watch 以及 父节点的child watch。一个成功的 <code>delete()</code>将会触发节点的数据watch和child watch（因为将不会再有children了）。</p>
  </li>
</ul>

<p>watch 由与对应client连接的ZooKeeper服务器负责维护。因此，这可以使得 watch 可以轻量级地设置，维护和分发。当一个客户端连接到一个新的server，watch将会出现会话时间。当和server断开连接后，将不会收到watch。当一个客户端重新连接，任务先前注册的watch将会被重新注册，然后当需要的时候触发。一般情况下，这都是显示地发生的。有一个case就是一个watch可能被丢失：一个人还未创建的znode的 existence watch 将会被丢失，如果这个znode 创建，然后当断开连接的时候又被删除了。</p>

<h3 id="watch-">4.1 watch 语义</h3>

<p>我们可以通过读ZooKeeper的三种状态来设置 watch：exists, getData, 和
getChildren。下面的列表展示了一个watch 触发和调用激活的方式：</p>

<ul>
  <li>Created event:<br />
通过 exist调用激活。</li>
  <li>Deleted event:<br />
通过调用 exists, getData, 和 getChildren 激活</li>
  <li>Changed event:<br />
通过调用 exists, getData 激活。</li>
  <li>Child event:<br />
通过调用 getChildren 激活。</li>
</ul>

<h3 id="watch--1">4.2 watch 移除</h3>

<p>我们可以调用 removeWatches 方法移除在 znode 注册的 watch。一个客户端可以本地移除watch操作，即使没有连接ZooKeeper服务器，只是本地设置标识为true。下面的列表详细说明了在成功移除watch 之后会触发什么事件：</p>

<ul>
  <li>Child Remove event:<br />
在调用getChildren的时候添加 watcher。</li>
  <li>Data Remove event:<br />
在调用 exists 或者 getData 的时候添加 watcher。</li>
</ul>

<h3 id="watch--2">4.4 关于 watch 需要记住的事情</h3>

<ul>
  <li>Watches 是一次性触发器。如果你获取了一个 watch 事件，然后你还想在未来更改的时候也获得通知，则你必须要设置另外的watch。</li>
  <li>由于watch是一次性的触发器，并且在获取时间和发送新的请求去获取watch 这段之间的延迟，所看到的发生在 ZooKeeper Znode 上的所有改变都是不可信的。需要准备好处理在获取事件和设置watch之间znode改变多次的case。</li>
  <li>一个watch对象，或者 function/context对，对于给定的通知只会被触发一次。例如，如果一个相同的watch对象被一个<code>exists 或者 getData</code> 文件file调用操作注册，然后这个文件file被删除了，这个watch对象将和这个文件file的删除通知一起，仅仅被调用一次。</li>
  <li>当你从服务器上断开连接，你将不能获得任何watch 直到连接被重新建立起来。基于这个原因，会话事件将被发生给所有突出的watch处理器。使用会话事件会进入一个安全模式：你将不能接收事件指导断开连接，所以你的处理处理这种模式下需要谨慎。</li>
</ul>

<h2 id="a-idzookeeperacl-5-zookeeper--acl-a"><a id="ZooKeeper_ACL"> 5 ZooKeeper 使用 ACL 访问控制</a></h2>

<p>（待定….）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx 反向代理配置和工作原理]]></title>
    <link href="http://kxcoder.github.io/blog/2015/08/30/nginx-proxy-configure-and-sduty/"/>
    <updated>2015-08-30T18:52:03+08:00</updated>
    <id>http://kxcoder.github.io/blog/2015/08/30/nginx-proxy-configure-and-sduty</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#Proxy">Nginx 反向代理配置说明</a></li>
  <li><a href="#ProcessRequest">Nginx 架构和请求处理流程</a></li>
  <li><a href="#ImplementationStudy">Nginx Upstream模块和Location配置</a></li>
  <li><a href="#End">后记</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p><code>Nginx</code>是一款面向性能设计的HTTP服务器，其性能相对于其他服务器表现优异。内部使用异步的事件处理模型，比如linux平台的<code>epoll</code>事件模型，unix平台的<code>kqueue</code>事件模型等。在Nginx源码的<code>src/event/modules</code>目录下，其对各个平台不同的异步模型进行了二次封装。此外，Nginx在代码实现的时候，会考虑到众多细节优化。比如：根据CPU亲缘性来分配进程和事件，避免CPU级的缓存失效；比如字符串比较时，四字节转换为整数来进行快速指令级比较，等等。</p>

<p>本博文主要目的不是Nginx源码分析，所以，对源码及其独特优秀的代码设计不会去详细介绍。</p>

<p>在最近的一些项目中，涉及到nginx的反向代理配置，然后花了一些时间了解下关于Nginx的整体请求处理流程和返现代理的实现机制。</p>

<p>Nginx虽然代码整洁，模块清晰，但是代码量毕竟还是很多，而且注释实在是太少，所以把一些学习的资料和心得整理一下，以便以后查看。</p>

<!--more-->

<h2 id="a-idproxynginx-a"><a id="Proxy">Nginx 反向代理配置说明</a></h2>

<p>反向代理指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给Internet上请求连接到客户端，此时代理服务器对外就表现为一个服务器，而此种工作模式类似于LVS-NET模型。</p>

<p>反向代理也可以理解为web服务器加速，它是一种通过在繁忙的web服务器和外部网络之间增加的 一个高速web缓冲服务器，用来降低实际的web服务器的负载的一种技术。反向代理是针对web服务器提高加速功能，所有外部网络要访问服务器时的所有请求都要通过它，这样反向代理服务器负责接收客户端的请求，然后到源服务器上获取内容，把内容返回给用户，并把内容保存在本地，以便日后再收到同样的信息请求时，它会将本地缓存里的内容直接发给用户，已减少后端web服务器的压力，提高响应速度。因此Nginx还具有缓存功能。</p>

<p>了解nginx的反向代理如何实现之前，先看看我们一般配置nginx反向代理的设置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>nginx反向代理的设置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="nginx"><span class="line">    <span class="k">upstream</span> <span class="s">cc_001</span> <span class="p">{</span>
</span><span class="line">        <span class="kn">server</span> <span class="n">192.168.1.101</span><span class="p">:</span><span class="mi">80</span><span class="p">;</span>
</span><span class="line">        <span class="kn">server</span> <span class="n">192.168.1.102</span><span class="p">:</span><span class="mi">80</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="kn">healthcheck_enabled</span><span class="p">;</span>
</span><span class="line">        <span class="kn">healthcheck_delay</span> <span class="mi">3000</span><span class="p">;</span>
</span><span class="line">        <span class="kn">healthcheck_timeout</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class="line">        <span class="kn">healthcheck_failcount</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">        <span class="kn">healthcheck_send</span> <span class="s">&#39;GET</span> <span class="s">/healthcheck.html</span> <span class="s">HTTP/1.0&#39;</span> <span class="s">&#39;Host:</span> <span class="s">local.com&#39;</span> <span class="s">&#39;Connection:</span> <span class="s">close&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">server</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">        <span class="kn">listen</span>       <span class="n">192.168.1.100</span><span class="p">:</span><span class="mi">80</span><span class="p">;</span>
</span><span class="line">        <span class="kn">server_name</span>  <span class="s">cc.local.com</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="kn">proxy_buffers</span> <span class="mi">64</span> <span class="mi">4k</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="kn">location</span> <span class="p">=</span> <span class="s">/</span> <span class="p">{</span>
</span><span class="line">            <span class="kn">proxy_pass</span> <span class="s">http://cc_001/bm/index.htm</span><span class="p">;</span>
</span><span class="line">            <span class="kn">proxy_set_header</span>   <span class="s">Host</span>             <span class="nv">$host</span><span class="p">;</span>
</span><span class="line">            <span class="kn">proxy_set_header</span>   <span class="s">X-Real-IP</span>        <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class="line">            <span class="kn">proxy_set_header</span>   <span class="s">X-Forwarded-For</span>  <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class="line">            <span class="kn">proxy_pass</span> <span class="s">http://cc_001</span><span class="p">;</span>
</span><span class="line">            <span class="kn">proxy_set_header</span>   <span class="s">Host</span>             <span class="nv">$host</span><span class="p">;</span>
</span><span class="line">            <span class="kn">proxy_set_header</span>   <span class="s">X-Real-IP</span>        <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class="line">            <span class="kn">proxy_set_header</span>   <span class="s">X-Forwarded-For</span>  <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的code主要列出来nginx 反向代理基本配置。</p>

<blockquote>
  <blockquote>
    <p>Tips：上面的配置选项都是最最基本的，一般涉及到反向代理都会使用到这些配置。对于其中的设置项，理解起来也很简单。</p>
  </blockquote>
</blockquote>

<p><em>upstream配置块</em></p>

<p>其实在nginx中，<code>upstream</code>是一个非常重要的配置。nginx所有对于动态请求的处理，基本上都需要使用<code>upstream</code>配置模块。nginx的两个很重要的功能，反向代理和负载均衡，都需要通过配置对应的<code>upstream</code>来完成。</p>

<blockquote>
  <blockquote>
    <p>其实在nginx中，有一个基础模块叫handler，这个模块可以接受来自客户端/用户端的请求，然后处理并产生对应的响应内容返回过去。因此，我们那些静态资源，前端页面什么的，都是使用handler模块来完成响应的。但是，众所知周，一般的核心服务都是后台动态产生的，这些资源就不可以方便使用handler去完成内容的生成和响应动作（当然也是可以使用开发自定义handler来完成的，比如各种xxxcgi之流，但是一般还是用来处理静态资源）。</p>

    <p>那么，upstream就出现了。其接收到用户的请求，然后转发到后端服务器拿到对应的响应资源，再返回给请求端。在整个处理过程中，其本身不会产生自己的响应内容，这是和<code>handler</code>模块唯一的区别。</p>

    <p>upstream的特性，决定了在其配置块中，设置一些后端服务器的地址和端口，就ok了。</p>

  </blockquote>
</blockquote>

<p>配置项说明：</p>

<ul>
  <li>
    <p>upstream中的server项：表明后台的一台服务器地址和端口。当客户端有请求到<code>nginx</code>服务器的时候，upstream模块根据这里配置的server，该对应的请求转发到这些server服务上，由这些server来处理请求，然后把响应结果告知upstream模块。</p>
  </li>
  <li>
    <p>healthcheck_enabled项：healthcheck健康监控功能，并不是原生nginx自带的。所以如果使用这个功能，必须要安装第三方插件：<code>ngx_http_healthcheck_module</code>。healthcheck_enabled表示启动健康检查模块功能。</p>
  </li>
  <li>
    <p>healthcheck_delay项：对同一台后端服务器两次检测之间的时间间隔，单位毫秒，默认为1000。</p>
  </li>
  <li>
    <p>healthcheck_timeout项：进行一次健康检测的超时时间，单位为毫秒，默认值2000。</p>
  </li>
  <li>
    <p>healthcheck_failcount项：对一台后端服务器检测成功或失败多少次之后方才确定其为成功或失败，并实现启用或禁用此服务器。</p>
  </li>
  <li>
    <p>healthcheck_send项：为了检测后端服务器的健康状态所发送的检测请求。然后根据各个服务器的响应情况来判断服务器是否存活。上面的配置表面，各个后台服务器上都存在<code>healthcheck.html</code>静态页面，然后nginx会get这个页面，根据是否status为200来判断是否服务器存活。</p>
  </li>
</ul>

<p><em>server配置块</em></p>

<p>在nginx中，不管怎么样的配置，都会有一个server配置块。http服务上支持若干虚拟主机。每个虚拟主机会有一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server.每个server通过监听的地址来区分。</p>

<blockquote>
  <blockquote>
    <p>Server其实就是一个虚拟主机。因为在nginx中可以配置多个server，这样就使得nginx可以在一台服务器上配置多个域名。</p>

    <p>在nginx的Server虚拟主机中，它只会处理与之对应的域名请求。并且，如果在listen中设置了ip地址，则该虚拟主机只会处理从该服务器的指定ip端口进来的请求，才会去处理。关于一台服务器设置多个别名ip地址的方式，可以参考博客<a href="http://www.cnblogs.com/mchina/archive/2012/05/21/2511824.html">在Nginx中部署基于IP的虚拟主机</a></p>
  </blockquote>
</blockquote>

<p>配置项说明：</p>

<ul>
  <li>
    <p>listen项：监听ip和端口。当nginx服务器的该ip端口有请求访问，则调用该server的配置来处理该请求。</p>
  </li>
  <li>
    <p>server_name项：域名。nginx对进入该虚拟主机的请求，检查其请求Host头是否匹配设置的server_name，如果是，则继续处理该请求。</p>
  </li>
  <li>
    <p>location块选项：Location在nginx中是一个非常重要的指令。对于HTTP请求，其被用来详细匹配URI和设置的location path。一般这个uri path会是字符串或者正则表达式形式。</p>
  </li>
</ul>

<blockquote>
  <blockquote>
    <p>: 关于location匹配，存在一些语法规则，如下：</p>

    <pre><code>  location [=|~|~*|^~|@] /uri/ { ... }
   =：表示精确匹配，如果找到，立即停止搜索并立即处理此请求。
   ~：表示区分大小写匹配。
   ~*：表示不区分大小写匹配。
   ^~：表示只匹配字符，串不查询正则表达式。
   @：指定一个命名的location，一般只用于内部重定向请求。
</code></pre>
  </blockquote>
</blockquote>

<ul>
  <li>
    <p>location中proxy_pass项：代理转发。配置了该项，当匹配location path的请求进来后，会根据upstream设置，请求后台服务器上的proxy_pass的请求。例如，上面的配置，当有请求<code>cc.local.com</code>时，由于精确匹配<code>=/</code>，则根据proxy_pass配置，则会反向代理，请求<code>192.168.1.101:80/bm/index.htm</code>。</p>
  </li>
  <li>
    <p>location中proxy_set_header项：设置代理请求头。由于经过了反向代理服务器，所以后台服务器不能获取真正的客户端请求地址等信息，这样，就需要把这些ip地址，设置回请求头部中。然后，我们在后台服务上，可以使用<code>request.get("X-Real-IP")</code>或者<code>request.get("X-Forwarded-For")</code>获取真实的请求ip地址。获取host也是如此。具体可以参考博文：<a href="http://gong1208.iteye.com/blog/1559835"> 使用nginx后如何在web应用中获取用户ip及原理解释</a>.</p>
  </li>
</ul>

<h2 id="a-idprocessrequestnginx-a"><a id="ProcessRequest">Nginx 架构和请求处理流程</a></h2>

<p>Nginx架构，在taobao的<a href="http://tengine.taobao.org/book/chapter_02.html">《Nginx开发从入门到精通》</a>电子书中，写的比较详细。这里记录一些核心的细节。</p>

<p>Nginx在启动会以daemon形式在后台运行，采用<code>多进程+异步非阻塞IO事件模型</code>来处理各种连接请求。</p>

<p>Nginx主要包含一个master进行和多个worker进行，一般worker进程个数是根据服务器CPU核数来决定的。如下图：</p>

<p><img src="http://kxcoder.github.io/images/2015/08/nginx_process.png" /></p>

<blockquote>
  <blockquote>
    <p>Notes：从上图中可以很明显地看到，4个worker进程的父进程都是master进程，表明worker进程都是从父进程fork出来的，并且父进程的ppid为1，表示其为daemon进程。</p>

    <p>需要说明的是，在nginx多进程中，每个worker都是平等的，因此每个进程处理外部请求的机会权重都是一致的。</p>

  </blockquote>
</blockquote>

<p>下面来介绍一个请求进来，进程模型的处理方式。</p>

<p><em>首先</em>，master进程一开始就会根据我们的配置，来建立需要listen的网络socket fd，然后fork出多个worker进程。</p>

<p><em>其次</em>，根据进程的特性，新建立的worker进程，也会和master进程一样，具有相同的设置。因此，其也会去监听相同ip端口的套接字socket fd。</p>

<p><em>然后</em>，这个时候有多个worker进程都在监听同样设置的socket fd，意味着当有一个请求进来的时候，所有的worker都会感知到。这样就会产生所谓的<code>惊群现象</code>。为了保证只会有一个进程成功注册到listenfd的读事件，nginx中实现了一个<code>accept_mutex</code>类似互斥锁，只有获取到这个锁的进程，才可以去注册读事件。其他进程全部accept 失败。</p>

<p><em>最后</em>，注册成功的worker进程，读取请求，解析处理，响应数据返回给客户端，断开连接，结束。因此，一个request请求，只需要worker进程就可以完成。</p>

<blockquote>
  <blockquote>
    <p>进程模型的处理方式带来的一些好处就是：进程之间是独立的，也就是一个worker进程出现异常退出，其他worker进程是不会受到影响的；此外，独立进程也会避免一些不需要的锁操作，这样子会提高处理效率，并且开发调试也更容易。</p>

    <p>如前文所述，<code>多进程模型+异步非阻塞模型</code>才是胜出的方案。单纯的多进程模型会导致连接并发数量的降低，而采用异步非阻塞IO模型很好的解决了这个问题；并且还因此避免的多线程的上下文切换导致的性能损失。</p>

    <p>关于异步非阻塞IO模型：linux的epoll介绍，可以参考：<a href="http://www.cppblog.com/deane/articles/165218.html">深入了解epoll </a></p>
  </blockquote>
</blockquote>

<h3 id="nginx-">Nginx 连接和请求处理</h3>

<p>上一节介绍了，worker进程会竞争客户端的连接请求，这种方式可能会带来一个问题，就是可能所有的请求都被一个worker进程给竞争获取了，导致其他进程都比较空闲，而某一个进程会处于忙碌的状态，这种状态可能还会导致无法及时响应连接而丢弃discard掉本有能力处理的请求。这种不公平的现象，是需要避免的，尤其是在高可靠web服务器环境下。</p>

<p>针对这种现象，Nginx采用了一个是否打开accept_mutex选项的值<code>ngx_accept_disabled</code>。标识控制一个worker进程是否需要去竞争获取accept_mutex选项，进而获取accept事件。</p>

<blockquote>
  <blockquote>
    <p>ngx_accept_disabled值，nginx单进程的所有连接总数的八分之一，减去剩下的空闲连接数量，得到的这个ngx_accept_disabled。</p>

    <p>当ngx_accept_disabled大于0时，不会去尝试获取accept_mutex锁，并且将ngx_accept_disabled减1，于是，每次执行到此处时，都会去减1，直到小于0。不去获取accept_mutex锁，就是等于让出获取连接的机会，很显然可以看出，当空余连接越少时，ngx_accept_disable越大，于是让出的机会就越多，这样其它进程获取锁的机会也就越大。不去accept，自己的连接就控制下来了，其它进程的连接池就会得到利用，这样，nginx就控制了多进程间连接的平衡了。</p>
  </blockquote>
</blockquote>

<p>接下来，看看连接处理流程（来自tengine.taobao.org）：</p>

<p><img src="http://kxcoder.github.io/images/2015/08/request_process.png" /></p>

<blockquote>
  <blockquote>
    <p>关于处理流程的说明，参考: <a href="http://tengine.taobao.org/book/chapter_02.html">http://tengine.taobao.org/book/chapter_02.html</a></p>

  </blockquote>
</blockquote>

<h2 id="a-idimplementationstudynginx-upstreamlocationa"><a id="ImplementationStudy">Nginx Upstream模块和Location配置</a></h2>

<p><em>Nginx Upstream</em></p>

<p>upstream模块实现反向代理的功能，将真正的请求转发到后端服务器上，并从后端服务器上读取响应，发回客户端。</p>

<p>从本质上说，upstream属于handler，只是他不产生自己的内容，而是通过请求后端服务器得到内容，所以才称为upstream（上游）。请求并取得响应内容的整个过程已经被封装到nginx内部，所以upstream模块只需要开发若干回调函数，完成构造请求和解析响应等具体的工作。</p>

<p><code>upstream</code>模块逻辑实现的十分复杂，对于其具体实现，不分析。</p>

<p><code>upstream</code>模块主要做两件事情：</p>

<ul>
  <li>
    <p>当外部的客户端发送一个http请求后，如果涉及更后台服务，则会创建一个到后端服务的request请求；</p>
  </li>
  <li>
    <p>请求到达后端，然后处理完成后，则upstream会将返回的数据接收过来，然后发送给外部请求的客户端。</p>
  </li>
</ul>

<p><em>Nginx Location</em></p>

<p>首先，介绍下存在的几种Location配置方式：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>nginx Location配置方式 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="nginx"><span class="line"><span class="k">location</span>  <span class="p">=</span> <span class="s">/</span> <span class="p">{</span>
</span><span class="line">  <span class="c1"># matches the query / only.</span>
</span><span class="line">  <span class="kn">[</span> <span class="s">configuration</span> <span class="s">A</span> <span class="s">]</span>
</span><span class="line"><span class="err">}</span>
</span><span class="line"><span class="s">location</span>  <span class="s">/</span> <span class="p">{</span>
</span><span class="line">  <span class="c1"># matches any query, since all queries begin with /, but regular</span>
</span><span class="line">  <span class="c1"># expressions and any longer conventional blocks will be</span>
</span><span class="line">  <span class="c1"># matched first.</span>
</span><span class="line">  <span class="kn">[</span> <span class="s">configuration</span> <span class="s">B</span> <span class="s">]</span>
</span><span class="line"><span class="err">}</span>
</span><span class="line"><span class="s">location</span> <span class="s">/documents/</span> <span class="p">{</span>
</span><span class="line">  <span class="c1"># matches any query beginning with /documents/ and continues searching,</span>
</span><span class="line">  <span class="c1"># so regular expressions will be checked. This will be matched only if</span>
</span><span class="line">  <span class="c1"># regular expressions don&#39;t find a match.</span>
</span><span class="line">  <span class="kn">[</span> <span class="s">configuration</span> <span class="s">C</span> <span class="s">]</span>
</span><span class="line"><span class="err">}</span>
</span><span class="line"><span class="s">location</span> <span class="s">^~</span> <span class="s">/images/</span> <span class="p">{</span>
</span><span class="line">  <span class="c1"># matches any query beginning with /images/ and halts searching,</span>
</span><span class="line">  <span class="c1"># so regular expressions will not be checked.</span>
</span><span class="line">  <span class="kn">[</span> <span class="s">configuration</span> <span class="s">D</span> <span class="s">]</span>
</span><span class="line"><span class="err">}</span>
</span><span class="line"><span class="s">location</span> <span class="p">~</span><span class="sr">*</span> <span class="s">\.(gif|jpg|jpeg)</span>$ <span class="p">{</span>
</span><span class="line">  <span class="c1"># matches any request ending in gif, jpg, or jpeg. However, all</span>
</span><span class="line">  <span class="c1"># requests to the /images/ directory will be handled by</span>
</span><span class="line">  <span class="c1"># Configuration D.   </span>
</span><span class="line">  <span class="kn">[</span> <span class="s">configuration</span> <span class="s">E</span> <span class="s">]</span>
</span><span class="line"><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>示例请求：</p>

<ul>
  <li>/ -&gt; configuration A</li>
  <li>/index.html -&gt; configuration B</li>
  <li>/documents/document.html -&gt; configuration C</li>
  <li>/images/1.gif -&gt; configuration D</li>
  <li>/documents/1.jpg -&gt; configuration E</li>
</ul>

<p>解析匹配规则为：</p>

<ol>
  <li>
    <p>字符串精确匹配到一个带 “=” 号前缀的location，则停止，且使用这个location的配置；</p>
  </li>
  <li>
    <p>字符串匹配剩下的非正则和非特殊location，如果匹配到某个带 “^~” 前缀的location，则停止；</p>
  </li>
  <li>
    <p>正则匹配，匹配顺序为location在配置文件中出现的顺序。如果匹配到某个正则location，则停止，并使用这个location的配置；否则，使用步骤2中得到的具有最大字符串匹配的location配置。</p>
  </li>
</ol>

<blockquote>
  <blockquote>
    <p>Notes：需要注意的是：<code>~ 开头</code>表示区分大小写的正则匹配；而<code>~*  开头</code>表示不区分大小写的正则匹配。<code>!~和!~*</code>分别为区分大小写不匹配及不区分大小写不匹配的正则</p>
  </blockquote>
</blockquote>

<h2 id="a-idenda"><a id="End">后记</a></h2>

<p>Nginx 是一个十分优秀的服务器软件，其内部相当多的设计和实现都非常巧妙和高效。</p>

<p>关于Nginx的一些好的站点有：</p>

<ul>
  <li><a href="http://tengine.taobao.org/book/">http://tengine.taobao.org/book/</a></li>
  <li><a href="http://www.pagefault.info/?cat=7">http://www.pagefault.info/?cat=7</a></li>
  <li><a href="http://nginx.org/en/docs/">http://nginx.org/en/docs/</a></li>
  <li><a href="http://kxcoder.github.io/images/2015/08/nginx_stream.png">http://kxcoder.github.io/images/2015/08/nginx_stream.png</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slf4j MDC 使用和 基于 Logback 的实现分析]]></title>
    <link href="http://kxcoder.github.io/blog/2015/04/29/LogBack-Implemention-And-Slf4j-Mdc/"/>
    <updated>2015-04-29T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2015/04/29/LogBack-Implemention-And-Slf4j-Mdc</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#MdcIntroduce">Slf4j MDC 介绍</a></li>
  <li><a href="#PrepareKnowledge">前置知识介绍</a></li>
  <li><a href="#Slf4jMdc">Log MDC 实现分析</a></li>
  <li><a href="#LogbackPrint">Logback 日志输出实现</a></li>
  <li><a href="#End">后记</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>如今，在 Java 开发中，日志的打印输出是必不可少的，<code>Slf4j + LogBack</code> 的组合是最通用的方式。</p>

<p>关于 <code>Slf4j</code> 的介绍，请参考本博客<a href="http://ketao1989.github.io/posts/Java-slf4j-Introduce.html">http://ketao1989.github.io/posts/Java-slf4j-Introduce.html</a></p>

<p>有了日志之后，我们就可以追踪各种线上问题。但是，在分布式系统中，各种无关日志穿行其中，导致我们可能无法直接定位整个操作流程。因此，我们可能需要对一个用户的操作流程进行归类标记，比如使用<code>线程+时间戳</code>，或者用户身份标识等；如此，我们可以从大量日志信息中grep出某个用户的操作流程，或者某个时间的流转记录。</p>

<!--more-->

<p>因此，这就有了 <code>Slf4j MDC</code> 方法。</p>

<h2 id="a-idmdcintroduceslf4j-mdc-a"><a id="MdcIntroduce">Slf4j MDC 介绍</a></h2>

<p>MDC ( Mapped Diagnostic Contexts )，顾名思义，其目的是为了便于我们诊断线上问题而出现的方法工具类。虽然，Slf4j 是用来适配其他的日志具体实现包的，但是针对 MDC功能，目前只有logback 以及 log4j 支持，或者说由于该功能的重要性，slf4j 专门为logback系列包装接口提供外部调用(玩笑～：）)。</p>

<blockquote>
  <blockquote>
    <p>logback 和 log4j 的作者为同一人，所以这里统称logback系列。</p>
  </blockquote>
</blockquote>

<p>先来看看 MDC 对外提高的接口：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>MDC对外接口 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MDC</span> <span class="o">{</span>
</span><span class="line">  <span class="c1">//Put a context value as identified by key</span>
</span><span class="line">  <span class="c1">//into the current thread&#39;s context map.</span>
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">val</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//Get the context identified by the key parameter.</span>
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//Remove the context identified by the key parameter.</span>
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//Clear all entries in the MDC.</span>
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>接口定义非常简单，此外，其使用也非常简单。</p>

  </blockquote>
</blockquote>

<p>如上代码所示，一般，我们在代码中，只需要将指定的值put到线程上下文的Map中，然后，在对应的地方使用 get方法获取对应的值。此外，对于一些线程池使用的应用场景，可能我们在最后使用结束时，需要调用clear方法来清洗将要丢弃的数据。</p>

<p>然后，看看一个MDC使用的简单示例。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogTest</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">LogTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">MDC</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;THREAD_ID&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">()));</span>
</span><span class="line">
</span><span class="line">        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;纯字符串信息的info级别日志&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后看看logback的输出模板配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;configuration&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;log.base&quot;</span> <span class="na">value=</span><span class="s">&quot;${catalina.base}/logs&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;contextListener</span> <span class="na">class=</span><span class="s">&quot;ch.qos.logback.classic.jul.LevelChangePropagator&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;resetJUL&gt;</span>true<span class="nt">&lt;/resetJUL&gt;</span>
</span><span class="line">    <span class="nt">&lt;/contextListener&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&quot;console&quot;</span> <span class="na">class=</span><span class="s">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;encoder</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class="line">            <span class="nt">&lt;pattern&gt;</span>[%d{yyyy-MM-dd HH:mm:ss} %highlight(%-5p) %logger.%M\(%F:%L\)] %X{THREAD_ID} %msg%n<span class="nt">&lt;/pattern&gt;</span>
</span><span class="line">        <span class="nt">&lt;/encoder&gt;</span>
</span><span class="line">    <span class="nt">&lt;/appender&gt;</span>
</span><span class="line">    <span class="nt">&lt;root</span> <span class="na">level=</span><span class="s">&quot;INFO&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">&quot;console&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;/root&gt;</span>
</span><span class="line"><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>于是，就有了输出：</p>

<pre><code>[2015-04-30 15:34:35 INFO  io.github.ketao1989.log4j.LogTest.main(LogTest.java:29)] 1 纯字符串信息的info级别日志
</code></pre>

<blockquote>
  <blockquote>
    <p>当我们在web应用中，对服务的所有请求前进行filter拦截，然后加上自定义的唯一标识到MDC中，就可以在所有日志输出中，清楚看到某用户的操作流程。关于web MDC，会单独一遍博客介绍。</p>

    <p>此外，关于logback 是如何将模板中的变量替换成具体的值，会在下一节分析。</p>

    <p>在日志模板logback.xml 中，使用 <code>%X{ }</code>来占位，替换到对应的 MDC 中 key 的值。</p>

  </blockquote>
</blockquote>

<h2 id="a-idprepareknowledgea"><a id="PrepareKnowledge">前置知识介绍</a></h2>

<h3 id="inheritablethreadlocal-">InheritableThreadLocal 介绍</h3>

<p>在代码开发中，经常使用 <code>ThreadLocal</code>来保证在同一个线程中共享变量。在 <code>ThreadLocal</code> 中，每个线程都拥有了自己独立的一个变量，线程间不存在共享竞争发生，并且它们也能最大限度的由CPU调度，并发执行。显然这是一种以空间来换取线程安全性的策略。</p>

<p>但是，<code>ThreadLocal</code>有一个问题，就是它只保证在同一个线程间共享变量，也就是说如果这个线程起了一个新线程，那么新线程是不会得到父线程的变量信息的。因此，为了保证子线程可以拥有父线程的某些变量视图，JDK提供了一个数据结构，<code>InheritableThreadLocal</code>。</p>

<p>javadoc 文档对 InheritableThreadLocal 说明：</p>

<blockquote>
  <blockquote>
    <p>该类扩展了 ThreadLocal，为子线程提供从父线程那里继承的值：在创建子线程时，子线程会接收所有可继承的线程局部变量的初始值，以获得父线程所具有的值。通常，子线程的值与父线程的值是一致的；但是，通过重写这个类中的 childValue 方法，子线程的值可以作为父线程值的一个任意函数。</p>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p>当必须将变量（如用户 ID 和 事务 ID）中维护的每线程属性（per-thread-attribute）自动传送给创建的所有子线程时，应尽可能地采用可继承的线程局部变量，而不是采用普通的线程局部变量。</p>
  </blockquote>
</blockquote>

<p>代码对比可以看出两者区别：</p>

<blockquote>
  <blockquote>
    <p>ThreadLocal:</p>
  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ThreadLocal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Method childValue is visibly defined in subclass</span>
</span><span class="line"><span class="cm">     * InheritableThreadLocal, but is internally defined here for the</span>
</span><span class="line"><span class="cm">     * sake of providing createInheritedMap factory method without</span>
</span><span class="line"><span class="cm">     * needing to subclass the map class in InheritableThreadLocal.</span>
</span><span class="line"><span class="cm">     * This technique is preferable to the alternative of embedding</span>
</span><span class="line"><span class="cm">     * instanceof tests in methods.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">T</span> <span class="nf">childValue</span><span class="o">(</span><span class="n">T</span> <span class="n">parentValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>InheritableThreadLocal:</p>
  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>InheritableThreadLocal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InheritableThreadLocal</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Computes the child&#39;s initial value for this inheritable thread-local</span>
</span><span class="line"><span class="cm">     * variable as a function of the parent&#39;s value at the time the child</span>
</span><span class="line"><span class="cm">     * thread is created.  This method is called from within the parent</span>
</span><span class="line"><span class="cm">     * thread before the child is started.</span>
</span><span class="line"><span class="cm">     * &lt;p&gt;</span>
</span><span class="line"><span class="cm">     * This method merely returns its input argument, and should be overridden</span>
</span><span class="line"><span class="cm">     * if a different behavior is desired.</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @param parentValue the parent thread&#39;s value</span>
</span><span class="line"><span class="cm">     * @return the child thread&#39;s initial value</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">protected</span> <span class="n">T</span> <span class="nf">childValue</span><span class="o">(</span><span class="n">T</span> <span class="n">parentValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">parentValue</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Get the map associated with a ThreadLocal.</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @param t the current thread</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">ThreadLocalMap</span> <span class="nf">getMap</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">       <span class="k">return</span> <span class="n">t</span><span class="o">.</span><span class="na">inheritableThreadLocals</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Create the map associated with a ThreadLocal.</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @param t the current thread</span>
</span><span class="line"><span class="cm">     * @param firstValue value for the initial entry of the table.</span>
</span><span class="line"><span class="cm">     * @param map the map to store.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kt">void</span> <span class="nf">createMap</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">,</span> <span class="n">T</span> <span class="n">firstValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">t</span><span class="o">.</span><span class="na">inheritableThreadLocals</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ThreadLocalMap</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">firstValue</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 这个是开发时一般使用的类，直接copy父线程的变量</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CopyOnInheritThreadLocal</span> <span class="kd">extends</span>
</span><span class="line">    <span class="n">InheritableThreadLocal</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Child threads should get a copy of the parent&#39;s hashmap.</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">protected</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">childValue</span><span class="o">(</span>
</span><span class="line">      <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">parentValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">parentValue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="n">parentValue</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>为了支持InheritableThreadLocal的父子线程传递变量，JDK在Thread中，定义了<code>ThreadLocal.ThreadLocalMap inheritableThreadLocals</code> 属性。该属性变量在线程初始化的时候，如果父线程的该变量不为null，则会把其值复制到ThreadLocal。</p>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p>从上面的代码实现，还可以看到，如果我们使用原生的 <code>InheritableThreadLocal</code>类则在子线程中修改变量，可能会影响到父线程的变量值，及其他子线程的值。因此，一般我们推荐没有特殊情况，最好使用<code>CopyOnInheritThreadLocal</code>类，该实现是新建一个map来保持值，而不是直接使用父线程的引用。</p>
  </blockquote>
</blockquote>

<h2 id="a-idslf4jmdclog-mdc-a"><a id="Slf4jMdc">Log MDC 实现分析</a></h2>

<h3 id="slf4j-mdc-">Slf4j MDC 实现分析</h3>

<p>Slf4j 的实现原则就是调用底层具体实现类，比如logback,logging等包；而不会去实现具体的输出打印等操作。因此，除了前文中介绍的门面(Facade)模式外，提供这种功能的还有适配器(Adapter)模式和装饰(Decorator)模式。</p>

<p>MDC 使用的就是<code>Decorator</code>模式，虽然，其类命名为M <code>MDCAdapter</code>。</p>

<p>Slf4j MDC 内部实现很简单。实现一个单例对应实例，获取具体的MDC实现类，然后其对外接口，就是对参数进行校验，然后调用 MDCAdapter 的方法实现。</p>

<p>实现源码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>MDC 实现分析 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MDC</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">static</span> <span class="n">MDCAdapter</span> <span class="n">mdcAdapter</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="nf">MDC</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">static</span> <span class="o">{</span>
</span><span class="line">    <span class="k">try</span> <span class="o">{</span>
</span><span class="line">      <span class="n">mdcAdapter</span> <span class="o">=</span> <span class="n">StaticMDCBinder</span><span class="o">.</span><span class="na">SINGLETON</span><span class="o">.</span><span class="na">getMDCA</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoClassDefFoundError</span> <span class="n">ncde</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="c1">//......</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">val</span><span class="o">)</span>
</span><span class="line">      <span class="kd">throws</span> <span class="n">IllegalArgumentException</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;key parameter cannot be null&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">mdcAdapter</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;MDCAdapter cannot be null. See also &quot;</span>
</span><span class="line">          <span class="o">+</span> <span class="n">NULL_MDCA_URL</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="n">mdcAdapter</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IllegalArgumentException</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;key parameter cannot be null&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">mdcAdapter</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;MDCAdapter cannot be null. See also &quot;</span>
</span><span class="line">          <span class="o">+</span> <span class="n">NULL_MDCA_URL</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">mdcAdapter</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>对于Slf4j的MDC 部分非常简单，MDC的核心实现是在logback方法中的。</p>

    <p>在 logback 中，提供了 <code>LogbackMDCAdapter</code>类，其实现了<code>MDCAdapter</code>接口。基于性能的考虑，logback 对于InheritableThreadLocal的使用做了一些优化工作。</p>

  </blockquote>
</blockquote>

<h3 id="logback-mdc-">Logback MDC 实现分析</h3>

<p>Logback 中基于 MDC 实现了<code>LogbackMDCAdapter</code> 类，其 get 方法实现很简单，但是 put 方法会做一些优化操作。</p>

<p>关于 put 方法，主要有：</p>

<ul>
  <li>
    <p>使用原始的<code>InheritableThreadLocal&lt;Map&lt;String, String&gt;&gt;</code>类，而不是使用子线程复制类 <code>CopyOnInheritThreadLocal</code>。这样，运行时可以大量避免不必要的copy操作，节省CPU消耗，毕竟在大量log操作中，子线程会很少去修改父线程中的<code>key-value</code>值。</p>
  </li>
  <li>
    <p>由于上一条的优化，所以代码实现上实现了一个<code>写时复制版本的 InheritableThreadLocal</code>。实现会根据上一次操作来确定是否需要copy一份新的引用map，而不是去修改老的父线程的map引用。</p>
  </li>
  <li>
    <p>此外，和 log4j 不同，其map中的val可以为null。</p>
  </li>
</ul>

<p>下面给出，get 和 put 的代码实现：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>MDC 实现分析 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">LogbackMDCAdapter</span> <span class="kd">implements</span> <span class="n">MDCAdapter</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">final</span> <span class="n">InheritableThreadLocal</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">copyOnInheritThreadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InheritableThreadLocal</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">WRITE_OPERATION</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">READ_OPERATION</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// keeps track of the last operation performed</span>
</span><span class="line">  <span class="kd">final</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">lastOperation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="n">Integer</span> <span class="nf">getAndSetLastOperation</span><span class="o">(</span><span class="kt">int</span> <span class="n">op</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Integer</span> <span class="n">lastOp</span> <span class="o">=</span> <span class="n">lastOperation</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class="line">    <span class="n">lastOperation</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">op</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">lastOp</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">wasLastOpReadOrNull</span><span class="o">(</span><span class="n">Integer</span> <span class="n">lastOp</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">lastOp</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">lastOp</span><span class="o">.</span><span class="na">intValue</span><span class="o">()</span> <span class="o">==</span> <span class="n">READ_OPERATION</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">duplicateAndInsertNewMap</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">oldMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">newMap</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedMap</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;());</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">oldMap</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="c1">// we don&#39;t want the parent thread modifying oldMap while we are</span>
</span><span class="line">        <span class="c1">// iterating over it</span>
</span><span class="line">        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">oldMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">          <span class="n">newMap</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">oldMap</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">copyOnInheritThreadLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">newMap</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">newMap</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">val</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IllegalArgumentException</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;key cannot be null&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">oldMap</span> <span class="o">=</span> <span class="n">copyOnInheritThreadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class="line">    <span class="n">Integer</span> <span class="n">lastOp</span> <span class="o">=</span> <span class="n">getAndSetLastOperation</span><span class="o">(</span><span class="n">WRITE_OPERATION</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">wasLastOpReadOrNull</span><span class="o">(</span><span class="n">lastOp</span><span class="o">)</span> <span class="o">||</span> <span class="n">oldMap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="c1">// 当上一次操作是read时，这次write，则需要new</span>
</span><span class="line">      <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">newMap</span> <span class="o">=</span> <span class="n">duplicateAndInsertNewMap</span><span class="o">(</span><span class="n">oldMap</span><span class="o">);</span>
</span><span class="line">      <span class="n">newMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">      <span class="c1">// 写的话，已经new了就不需要再new</span>
</span><span class="line">      <span class="n">oldMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Get the context identified by the &lt;code&gt;key&lt;/code&gt; parameter.</span>
</span><span class="line"><span class="cm">   * &lt;p/&gt;</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">getPropertyMap</span><span class="o">();</span>
</span><span class="line">    <span class="k">if</span> <span class="o">((</span><span class="n">map</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">key</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>需要注意，在上面的代码中，write操作即put会去修改 <code>lastOperation</code> ，而get操作则不会。这样就保证了，只会在第一次写时复制。</p>
  </blockquote>
</blockquote>

<h3 id="mdc-clear-">MDC clear 操作</h3>

<blockquote>
  <blockquote>
    <p>Notes：对于涉及到ThreadLocal相关使用的接口，都需要去考虑在使用完上下文对象时，清除掉对应的数据，以避免内存泄露问题。</p>
  </blockquote>
</blockquote>

<pre><code>因此，下面来分析下在MDC中如何清除掉不在需要的对象。
</code></pre>

<p>在MDC中提供了<code>clear</code>方法，该方法完成对象的清除工作，使用logback时，则调用的是<code>LogbackMDCAdapter#clear()</code>方法，继而调用<code>copyOnInheritThreadLocal.remove()</code>。</p>

<p>在ThreadLocal中，实现<code>remove()</code>方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>MDC 实现分析 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">         <span class="n">ThreadLocalMap</span> <span class="n">m</span> <span class="o">=</span> <span class="n">getMap</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">());</span>
</span><span class="line">         <span class="k">if</span> <span class="o">(</span><span class="n">m</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">             <span class="n">m</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">     <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>这里，就是调用<code>ThreadLocal#remove</code>方法完成对象清理工作。</p>

    <p>所有线程的ThreadLocal都是以<code>ThreadLocalMap</code>来维护的，也就是，我们获取threadLocal对象时，实际上是根据当前线程去该Map中获取之前的设置。在清除的时候，从这个Map中获取对应的对象，然后移除map.</p>
  </blockquote>
</blockquote>

<h2 id="a-idlogbackprintlogback-a"><a id="LogbackPrint">Logback 日志输出实现</a></h2>

<p>MDC 的功能实现很简单，就是在线程上下文中，维护一个 <code>Map&lt;String,String&gt;</code> 属性来支持日志输出的时候，当我们在配置文件<code>logback.xml</code> 中配置了<code>%X{key}</code>，则后台日志打印出对应的 key 的值。</p>

<p>同样，<code>logback.xml</code>配置文件支持了多种格式的日志输出，比如<code>%highlight</code>、<code>%d</code>等等，这些标志，在<code>PatternLayout.java</code>中维护。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PatternLayout</span> <span class="kd">extends</span> <span class="n">PatternLayoutBase</span><span class="o">&lt;</span><span class="n">ILoggingEvent</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">defaultConverterMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">HEADER_PREFIX</span> <span class="o">=</span> <span class="s">&quot;#logback.classic pattern: &quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">static</span> <span class="o">{</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">Parser</span><span class="o">.</span><span class="na">DEFAULT_COMPOSITE_CONVERTER_MAP</span><span class="o">);</span>
</span><span class="line">    <span class="c1">// 按照{}配置输出时间</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;d&quot;</span><span class="o">,</span> <span class="n">DateConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;date&quot;</span><span class="o">,</span> <span class="n">DateConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出应用启动到日志时间触发时候的毫秒数</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;r&quot;</span><span class="o">,</span> <span class="n">RelativeTimeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;relative&quot;</span><span class="o">,</span> <span class="n">RelativeTimeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出日志级别的信息</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;level&quot;</span><span class="o">,</span> <span class="n">LevelConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;le&quot;</span><span class="o">,</span> <span class="n">LevelConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;p&quot;</span><span class="o">,</span> <span class="n">LevelConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出产生日志事件的线程名</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;t&quot;</span><span class="o">,</span> <span class="n">ThreadConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;thread&quot;</span><span class="o">,</span> <span class="n">ThreadConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出产生log事件的原点的日志名=我们创建logger的时候设置的</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;lo&quot;</span><span class="o">,</span> <span class="n">LoggerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;logger&quot;</span><span class="o">,</span> <span class="n">LoggerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="n">LoggerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出 提供日志事件的对应的应用信息</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;m&quot;</span><span class="o">,</span> <span class="n">MessageConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;msg&quot;</span><span class="o">,</span> <span class="n">MessageConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;message&quot;</span><span class="o">,</span> <span class="n">MessageConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出调用方发布日志事件的完整类名</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;C&quot;</span><span class="o">,</span> <span class="n">ClassOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;class&quot;</span><span class="o">,</span> <span class="n">ClassOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出发布日志请求的方法名</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;M&quot;</span><span class="o">,</span> <span class="n">MethodOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;method&quot;</span><span class="o">,</span> <span class="n">MethodOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出log请求的行数</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;L&quot;</span><span class="o">,</span> <span class="n">LineOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;line&quot;</span><span class="o">,</span> <span class="n">LineOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出发布日志请求的java源码的文件名</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;F&quot;</span><span class="o">,</span> <span class="n">FileOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;file&quot;</span><span class="o">,</span> <span class="n">FileOfCallerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出和发布日志事件关联的线程的MDC</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;X&quot;</span><span class="o">,</span> <span class="n">MDCConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;mdc&quot;</span><span class="o">,</span> <span class="n">MDCConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出和日志事件关联的异常的堆栈信息</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;ex&quot;</span><span class="o">,</span> <span class="n">ThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;exception&quot;</span><span class="o">,</span> <span class="n">ThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span>
</span><span class="line">        <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;rEx&quot;</span><span class="o">,</span> <span class="n">RootCauseFirstThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;rootException&quot;</span><span class="o">,</span> <span class="n">RootCauseFirstThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span>
</span><span class="line">        <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;throwable&quot;</span><span class="o">,</span> <span class="n">ThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span>
</span><span class="line">        <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 和上面一样，此外增加类的包信息</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;xEx&quot;</span><span class="o">,</span> <span class="n">ExtendedThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;xException&quot;</span><span class="o">,</span> <span class="n">ExtendedThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span>
</span><span class="line">        <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;xThrowable&quot;</span><span class="o">,</span> <span class="n">ExtendedThrowableProxyConverter</span><span class="o">.</span><span class="na">class</span>
</span><span class="line">        <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 当我们想不输出异常信息时，使用这个。其假装处理异常，其实无任何输出</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;nopex&quot;</span><span class="o">,</span> <span class="n">NopThrowableInformationConverter</span><span class="o">.</span><span class="na">class</span>
</span><span class="line">        <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;nopexception&quot;</span><span class="o">,</span>
</span><span class="line">        <span class="n">NopThrowableInformationConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出在类附加到日志上的上下文名字. </span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;cn&quot;</span><span class="o">,</span> <span class="n">ContextNameConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;contextName&quot;</span><span class="o">,</span> <span class="n">ContextNameConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出产生日志事件的调用者的位置信息</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;caller&quot;</span><span class="o">,</span> <span class="n">CallerDataConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出和日志请求关联的marker</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;marker&quot;</span><span class="o">,</span> <span class="n">MarkerConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出属性对应的值，一般为System.properties中的属性</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;property&quot;</span><span class="o">,</span> <span class="n">PropertyConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 输出依赖系统的行分隔符</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;n&quot;</span><span class="o">,</span> <span class="n">LineSeparatorConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="c1">// 相关的颜色格式设置</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;black&quot;</span><span class="o">,</span> <span class="n">BlackCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;red&quot;</span><span class="o">,</span> <span class="n">RedCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;green&quot;</span><span class="o">,</span> <span class="n">GreenCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;yellow&quot;</span><span class="o">,</span> <span class="n">YellowCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;blue&quot;</span><span class="o">,</span> <span class="n">BlueCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;magenta&quot;</span><span class="o">,</span> <span class="n">MagentaCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;cyan&quot;</span><span class="o">,</span> <span class="n">CyanCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;white&quot;</span><span class="o">,</span> <span class="n">WhiteCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;gray&quot;</span><span class="o">,</span> <span class="n">GrayCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;boldRed&quot;</span><span class="o">,</span> <span class="n">BoldRedCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;boldGreen&quot;</span><span class="o">,</span> <span class="n">BoldGreenCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;boldYellow&quot;</span><span class="o">,</span> <span class="n">BoldYellowCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;boldBlue&quot;</span><span class="o">,</span> <span class="n">BoldBlueCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;boldMagenta&quot;</span><span class="o">,</span> <span class="n">BoldMagentaCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;boldCyan&quot;</span><span class="o">,</span> <span class="n">BoldCyanCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;boldWhite&quot;</span><span class="o">,</span> <span class="n">BoldWhiteCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">    <span class="n">defaultConverterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;highlight&quot;</span><span class="o">,</span> <span class="n">HighlightingCompositeConverter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：日志模板配置，使用 <code>%</code>为前缀让解析器识别特殊输出模式，然后以<code>{}</code>后缀结尾，内部指定相应的参数设置。</p>
  </blockquote>
</blockquote>

<h3 id="section-1">初始化</h3>

<p>所谓初始化，就是我们构建<code>logger</code>的时候。在<code>LoggerFactory.getLogger()</code>，调用的是 slf4j 的方法，而底层使用的是<code>logback</code>的实现。因此，初始化的重点就是找到底层具体的实现接口，然后构建具体类。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="nf">getLogger</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">ILoggerFactory</span> <span class="n">iLoggerFactory</span> <span class="o">=</span> <span class="n">getILoggerFactory</span><span class="o">();</span>
</span><span class="line">    <span class="k">return</span> <span class="n">iLoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="n">ILoggerFactory</span> <span class="nf">getILoggerFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">INITIALIZATION_STATE</span> <span class="o">==</span> <span class="n">UNINITIALIZED</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="n">INITIALIZATION_STATE</span> <span class="o">=</span> <span class="n">ONGOING_INITIALIZATION</span><span class="o">;</span>
</span><span class="line">      <span class="n">performInitialization</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">switch</span> <span class="o">(</span><span class="n">INITIALIZATION_STATE</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">case</span> <span class="nl">SUCCESSFUL_INITIALIZATION:</span>
</span><span class="line">        <span class="k">return</span> <span class="n">StaticLoggerBinder</span><span class="o">.</span><span class="na">getSingleton</span><span class="o">().</span><span class="na">getLoggerFactory</span><span class="o">();</span>
</span><span class="line">      <span class="c1">// ......</span>
</span><span class="line">      <span class="k">case</span> <span class="nl">ONGOING_INITIALIZATION:</span>
</span><span class="line">        <span class="c1">// support re-entrant behavior.</span>
</span><span class="line">        <span class="c1">// See also http://bugzilla.slf4j.org/show_bug.cgi?id=106</span>
</span><span class="line">        <span class="k">return</span> <span class="n">TEMP_FACTORY</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="c1">// .....</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">bind</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">try</span> <span class="o">{</span>
</span><span class="line">      <span class="n">Set</span> <span class="n">staticLoggerBinderPathSet</span> <span class="o">=</span> <span class="n">findPossibleStaticLoggerBinderPathSet</span><span class="o">();</span>
</span><span class="line">      <span class="c1">// the next line does the binding</span>
</span><span class="line">      <span class="c1">// 这里并没有使用上面的返回set进行反射构建类，这里实际上才是各种初始化的地方</span>
</span><span class="line">      <span class="n">StaticLoggerBinder</span><span class="o">.</span><span class="na">getSingleton</span><span class="o">();</span>
</span><span class="line">      <span class="n">INITIALIZATION_STATE</span> <span class="o">=</span> <span class="n">SUCCESSFUL_INITIALIZATION</span><span class="o">;</span>
</span><span class="line">      <span class="c1">// ......</span>
</span><span class="line">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="c1">// ......</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Set</span> <span class="nf">findPossibleStaticLoggerBinderPathSet</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="c1">// use Set instead of list in order to deal with  bug #138</span>
</span><span class="line">    <span class="c1">// LinkedHashSet appropriate here because it preserves insertion order during iteration</span>
</span><span class="line">    <span class="n">Set</span> <span class="n">staticLoggerBinderPathSet</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LinkedHashSet</span><span class="o">();</span>
</span><span class="line">    <span class="k">try</span> <span class="o">{</span>
</span><span class="line">      <span class="n">ClassLoader</span> <span class="n">loggerFactoryClassLoader</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">class</span>
</span><span class="line">              <span class="o">.</span><span class="na">getClassLoader</span><span class="o">();</span>
</span><span class="line">      <span class="n">Enumeration</span> <span class="n">paths</span><span class="o">;</span>
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">loggerFactoryClassLoader</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">paths</span> <span class="o">=</span> <span class="n">ClassLoader</span><span class="o">.</span><span class="na">getSystemResources</span><span class="o">(</span><span class="n">STATIC_LOGGER_BINDER_PATH</span><span class="o">);</span>
</span><span class="line">      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">        <span class="n">paths</span> <span class="o">=</span> <span class="n">loggerFactoryClassLoader</span>
</span><span class="line">                <span class="o">.</span><span class="na">getResources</span><span class="o">(</span><span class="n">STATIC_LOGGER_BINDER_PATH</span><span class="o">);</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">      <span class="k">while</span> <span class="o">(</span><span class="n">paths</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">        <span class="n">URL</span> <span class="n">path</span> <span class="o">=</span> <span class="o">(</span><span class="n">URL</span><span class="o">)</span> <span class="n">paths</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
</span><span class="line">        <span class="n">staticLoggerBinderPathSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="s">&quot;Error getting resources from path&quot;</span><span class="o">,</span> <span class="n">ioe</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">staticLoggerBinderPathSet</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>上面的部分代码，可以很明显看出，slf4j 会去调用classloader获取当前加载的类中，实现了指定的接口<code>org/slf4j/impl/StaticLoggerBinder.class</code>的类，如果多余1个，则会抛出异常。</p>

    <p>以上，依然可以从代码中看出这个只是检测是否存在符合接口的实现类，而没有像正常情况那样，通过反射构建类，返回给调用方。如何实现呢？</p>

    <p>直接在自己的包中实现一个和 <code>slf4j</code>要求路径一样的类，实现对应的接口，然后就可以调用了。不明白，看代码吧。:)</p>
  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">slf4j</span><span class="o">.</span><span class="na">impl</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">ch.qos.logback.core.status.StatusUtil</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.slf4j.ILoggerFactory</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.slf4j.helpers.Util</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.slf4j.spi.LoggerFactoryBinder</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">ch.qos.logback.classic.LoggerContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">ch.qos.logback.classic.util.ContextInitializer</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">ch.qos.logback.classic.util.ContextSelectorStaticBinder</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">ch.qos.logback.core.CoreConstants</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StaticLoggerBinder</span> <span class="kd">implements</span> <span class="n">LoggerFactoryBinder</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="kd">static</span> <span class="n">StaticLoggerBinder</span> <span class="n">SINGLETON</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StaticLoggerBinder</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">  <span class="kd">static</span> <span class="o">{</span>
</span><span class="line">    <span class="n">SINGLETON</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// 这里就是创建logback的LoggerContext实例， 包含了log所需的环境配置</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">LoggerContext</span> <span class="n">defaultLoggerContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LoggerContext</span><span class="o">();</span>
</span><span class="line">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ContextSelectorStaticBinder</span> <span class="n">contextSelectorBinder</span> <span class="o">=</span> <span class="n">ContextSelectorStaticBinder</span>
</span><span class="line">      <span class="o">.</span><span class="na">getSingleton</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="nf">StaticLoggerBinder</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">defaultLoggerContext</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">CoreConstants</span><span class="o">.</span><span class="na">DEFAULT_CONTEXT_NAME</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="n">StaticLoggerBinder</span> <span class="nf">getSingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">SINGLETON</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">try</span> <span class="o">{</span>
</span><span class="line">      <span class="k">try</span> <span class="o">{</span>
</span><span class="line">        <span class="c1">// 这里会初始化配置文件和对应的模板，logback.xml解析</span>
</span><span class="line">        <span class="k">new</span> <span class="nf">ContextInitializer</span><span class="o">(</span><span class="n">defaultLoggerContext</span><span class="o">).</span><span class="na">autoConfig</span><span class="o">();</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">      <span class="c1">// ......</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>从 package 和 import 的信息，可以看出，logback 中实现了一个 <code>org.slf4j.impl.StaticLoggerBinder</code> 类，而这个类，在slf4j 的 API 包中直接使用，所以使用slf4j时，必须还要引入其他具体的第三方包来实现相应的接口方法。</p>

    <p>此外，接下来的核心逻辑就是解析logback下各种配置文件信息，以及初始化配置。</p>
  </blockquote>
</blockquote>

<h3 id="section-2">输出日志模板解析</h3>

<p>如上所见，其实关于logback.xml的解析工作，也是在初始化的时候完成的。但是，由于其重要性，所以这里重点介绍下。</p>

<p>在 logback 中，解析xml的工作，都是交给 Action 和其继承类来完成。在 Action 类中提供了三个方法<code>begin</code>、<code>body</code>和<code>end</code>三个方法，这三个抽象方法中：</p>

<ul>
  <li>begin 方法负责处理ElementSelector元素的解析；</li>
  <li>body 方法，一般为空，处理文本的；</li>
  <li>end 方法则是处理模板解析的，所以我们的logback.xml的模板解析实在end方法中。具体是在 <code>NestedComplexPropertyIA</code>类中来解析。其继承Action类，并且其会调用具体的模板解析工具类：<code>PatternLayoutEncoder</code>类和<code>PatternLayout</code>类。</li>
</ul>

<p><code>PatternLayoutEncoder</code>会创建一个<code>PatternLayout</code>对象，然后获取到logback.xml中配置的模板字符串，即<code>[%d{yyyy-MM-dd HH:mm:ss} %highlight(%-5p) %logger.%M\(%F:%L\)] %X{THREAD_ID} %msg%n</code>，如配置的节点名一样，其在代码中同样赋值给pattern变量。</p>

<p>接下来，PatternLayoutEncoder 会调用相关方法对pattern进行解析，然后构建一个节点链表，保存这个链表会在日志输出的时使用到。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">  <span class="kd">public</span> <span class="nf">Parser</span><span class="o">(</span><span class="n">String</span> <span class="n">pattern</span><span class="o">,</span> <span class="n">IEscapeUtil</span> <span class="n">escapeUtil</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ScanException</span> <span class="o">{</span>
</span><span class="line">    <span class="k">try</span> <span class="o">{</span>
</span><span class="line">      <span class="n">TokenStream</span> <span class="n">ts</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TokenStream</span><span class="o">(</span><span class="n">pattern</span><span class="o">,</span> <span class="n">escapeUtil</span><span class="o">);</span>
</span><span class="line">      <span class="k">this</span><span class="o">.</span><span class="na">tokenList</span> <span class="o">=</span> <span class="n">ts</span><span class="o">.</span><span class="na">tokenize</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalArgumentException</span> <span class="n">npe</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">throw</span> <span class="k">new</span> <span class="nf">ScanException</span><span class="o">(</span><span class="s">&quot;Failed to initialize Parser&quot;</span><span class="o">,</span> <span class="n">npe</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">enum</span> <span class="n">TokenizerState</span> <span class="o">{</span> <span class="n">LITERAL_STATE</span><span class="o">,</span>  <span class="n">FORMAT_MODIFIER_STATE</span><span class="o">,</span> <span class="n">KEYWORD_STATE</span><span class="o">,</span> <span class="n">OPTION_STATE</span><span class="o">,</span>  <span class="n">RIGHT_PARENTHESIS_STATE</span><span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">  <span class="n">List</span> <span class="nf">tokenize</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ScanException</span> <span class="o">{</span>
</span><span class="line">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Token</span><span class="o">&gt;</span> <span class="n">tokenList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Token</span><span class="o">&gt;();</span>
</span><span class="line">    <span class="n">StringBuffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuffer</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="o">(</span><span class="n">pointer</span> <span class="o">&lt;</span> <span class="n">patternLength</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">pointer</span><span class="o">);</span>
</span><span class="line">      <span class="n">pointer</span><span class="o">++;</span>
</span><span class="line">
</span><span class="line">      <span class="k">switch</span> <span class="o">(</span><span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">LITERAL_STATE:</span>
</span><span class="line">          <span class="n">handleLiteralState</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">tokenList</span><span class="o">,</span> <span class="n">buf</span><span class="o">);</span>
</span><span class="line">          <span class="k">break</span><span class="o">;</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">FORMAT_MODIFIER_STATE:</span>
</span><span class="line">          <span class="n">handleFormatModifierState</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">tokenList</span><span class="o">,</span> <span class="n">buf</span><span class="o">);</span>
</span><span class="line">          <span class="k">break</span><span class="o">;</span>
</span><span class="line">        <span class="c1">// ......</span>
</span><span class="line">
</span><span class="line">        <span class="k">default</span><span class="o">:</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// EOS</span>
</span><span class="line">    <span class="k">switch</span> <span class="o">(</span><span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">case</span> <span class="nl">LITERAL_STATE:</span>
</span><span class="line">        <span class="n">addValuedToken</span><span class="o">(</span><span class="n">Token</span><span class="o">.</span><span class="na">LITERAL</span><span class="o">,</span> <span class="n">buf</span><span class="o">,</span> <span class="n">tokenList</span><span class="o">);</span>
</span><span class="line">        <span class="k">break</span><span class="o">;</span>
</span><span class="line">     <span class="c1">// ......</span>
</span><span class="line">
</span><span class="line">      <span class="k">case</span> <span class="nl">FORMAT_MODIFIER_STATE:</span>
</span><span class="line">      <span class="k">case</span> <span class="nl">OPTION_STATE:</span>
</span><span class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ScanException</span><span class="o">(</span><span class="s">&quot;Unexpected end of pattern string&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">tokenList</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 构建head链表</span>
</span><span class="line">  <span class="n">Converter</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">compile</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">head</span> <span class="o">=</span> <span class="n">tail</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="n">Node</span> <span class="n">n</span> <span class="o">=</span> <span class="n">top</span><span class="o">;</span> <span class="n">n</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">switch</span> <span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">case</span> <span class="n">Node</span><span class="o">.</span><span class="na">LITERAL</span><span class="o">:</span>
</span><span class="line">          <span class="n">addToList</span><span class="o">(</span><span class="k">new</span> <span class="n">LiteralConverter</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;((</span><span class="n">String</span><span class="o">)</span> <span class="n">n</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
</span><span class="line">          <span class="k">break</span><span class="o">;</span>
</span><span class="line">        <span class="k">case</span> <span class="n">Node</span><span class="o">.</span><span class="na">COMPOSITE_KEYWORD</span><span class="o">:</span>
</span><span class="line">          <span class="n">CompositeNode</span> <span class="n">cn</span> <span class="o">=</span> <span class="o">(</span><span class="n">CompositeNode</span><span class="o">)</span> <span class="n">n</span><span class="o">;</span>
</span><span class="line">          <span class="n">CompositeConverter</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">compositeConverter</span> <span class="o">=</span> <span class="n">createCompositeConverter</span><span class="o">(</span><span class="n">cn</span><span class="o">);</span>
</span><span class="line">          <span class="k">if</span><span class="o">(</span><span class="n">compositeConverter</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">addError</span><span class="o">(</span><span class="s">&quot;Failed to create converter for [%&quot;</span><span class="o">+</span><span class="n">cn</span><span class="o">.</span><span class="na">getValue</span><span class="o">()+</span><span class="s">&quot;] keyword&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">addToList</span><span class="o">(</span><span class="k">new</span> <span class="n">LiteralConverter</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;(</span><span class="s">&quot;%PARSER_ERROR[&quot;</span><span class="o">+</span><span class="n">cn</span><span class="o">.</span><span class="na">getValue</span><span class="o">()+</span><span class="s">&quot;]&quot;</span><span class="o">));</span>
</span><span class="line">            <span class="k">break</span><span class="o">;</span>
</span><span class="line">          <span class="o">}</span>
</span><span class="line">          <span class="n">compositeConverter</span><span class="o">.</span><span class="na">setFormattingInfo</span><span class="o">(</span><span class="n">cn</span><span class="o">.</span><span class="na">getFormatInfo</span><span class="o">());</span>
</span><span class="line">          <span class="n">compositeConverter</span><span class="o">.</span><span class="na">setOptionList</span><span class="o">(</span><span class="n">cn</span><span class="o">.</span><span class="na">getOptions</span><span class="o">());</span>
</span><span class="line">          <span class="n">Compiler</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">childCompiler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Compiler</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;(</span><span class="n">cn</span><span class="o">.</span><span class="na">getChildNode</span><span class="o">(),</span>
</span><span class="line">                  <span class="n">converterMap</span><span class="o">);</span>
</span><span class="line">          <span class="n">childCompiler</span><span class="o">.</span><span class="na">setContext</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class="line">          <span class="n">Converter</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">childConverter</span> <span class="o">=</span> <span class="n">childCompiler</span><span class="o">.</span><span class="na">compile</span><span class="o">();</span>
</span><span class="line">          <span class="n">compositeConverter</span><span class="o">.</span><span class="na">setChildConverter</span><span class="o">(</span><span class="n">childConverter</span><span class="o">);</span>
</span><span class="line">          <span class="n">addToList</span><span class="o">(</span><span class="n">compositeConverter</span><span class="o">);</span>
</span><span class="line">          <span class="k">break</span><span class="o">;</span>
</span><span class="line">        <span class="k">case</span> <span class="n">Node</span><span class="o">.</span><span class="na">SIMPLE_KEYWORD</span><span class="o">:</span>
</span><span class="line">          <span class="n">SimpleKeywordNode</span> <span class="n">kn</span> <span class="o">=</span> <span class="o">(</span><span class="n">SimpleKeywordNode</span><span class="o">)</span> <span class="n">n</span><span class="o">;</span>
</span><span class="line">          <span class="n">DynamicConverter</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">dynaConverter</span> <span class="o">=</span> <span class="n">createConverter</span><span class="o">(</span><span class="n">kn</span><span class="o">);</span>
</span><span class="line">          <span class="k">if</span> <span class="o">(</span><span class="n">dynaConverter</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">dynaConverter</span><span class="o">.</span><span class="na">setFormattingInfo</span><span class="o">(</span><span class="n">kn</span><span class="o">.</span><span class="na">getFormatInfo</span><span class="o">());</span>
</span><span class="line">            <span class="n">dynaConverter</span><span class="o">.</span><span class="na">setOptionList</span><span class="o">(</span><span class="n">kn</span><span class="o">.</span><span class="na">getOptions</span><span class="o">());</span>
</span><span class="line">            <span class="n">addToList</span><span class="o">(</span><span class="n">dynaConverter</span><span class="o">);</span>
</span><span class="line">          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// if the appropriate dynaconverter cannot be found, then replace</span>
</span><span class="line">            <span class="c1">// it with a dummy LiteralConverter indicating an error.</span>
</span><span class="line">            <span class="n">Converter</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">errConveter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LiteralConverter</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;(</span><span class="s">&quot;%PARSER_ERROR[&quot;</span>
</span><span class="line">                    <span class="o">+</span> <span class="n">kn</span><span class="o">.</span><span class="na">getValue</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">addStatus</span><span class="o">(</span><span class="k">new</span> <span class="nf">ErrorStatus</span><span class="o">(</span><span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">kn</span><span class="o">.</span><span class="na">getValue</span><span class="o">()</span>
</span><span class="line">                    <span class="o">+</span> <span class="s">&quot;] is not a valid conversion word&quot;</span><span class="o">,</span> <span class="k">this</span><span class="o">));</span>
</span><span class="line">            <span class="n">addToList</span><span class="o">(</span><span class="n">errConveter</span><span class="o">);</span>
</span><span class="line">          <span class="o">}</span>
</span><span class="line">
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>代码很简单，就是依次遍历pattern字符串，然后把符合要求的字符串放进tokenList中，这个list就维护了我们最终需要输出的模板的格式化模式了。</p>

    <p>在每个case里面，都会对字符串进行特定的处理，匹配具体的字符。</p>

    <p>在随后的处理中，会将这个tokenList进行转换，成为我们需要的Node类型的拥有head 和 tail 的链表。</p>

  </blockquote>
</blockquote>

<h3 id="section-3">日志输出分析</h3>

<p>构建了各种需要的环境参数，打印日志就很简单了。在需要输出日志的时候，根据初始化得到的Node链表head来解析，遇到%X的时候，从MDC中获取对应的key值，然后append到日志字符串中，然后输出。</p>

<blockquote>
  <blockquote>
    <p>在配置文件中，我们使用Appender模式，在日志输出类中，显然会调用append类似的方法了。:)</p>

    <p>其调用流程</p>
  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OutputStreamAppender</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">UnsynchronizedAppenderBase</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">append</span><span class="o">(</span><span class="n">E</span> <span class="n">eventObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(!</span><span class="n">isStarted</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">subAppend</span><span class="o">(</span><span class="n">eventObject</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// 这里就是日志输出实际的操作，一般如果有需要，可以重写这个方法。</span>
</span><span class="line">  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">subAppend</span><span class="o">(</span><span class="n">E</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(!</span><span class="n">isStarted</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">try</span> <span class="o">{</span>
</span><span class="line">      <span class="c1">// this step avoids LBCLASSIC-139</span>
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">event</span> <span class="k">instanceof</span> <span class="n">DeferredProcessingAware</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="c1">// 这里虽然是为输出准备，在检查的同时，把把必要的信息解析出来放到变量中</span>
</span><span class="line">        <span class="o">((</span><span class="n">DeferredProcessingAware</span><span class="o">)</span> <span class="n">event</span><span class="o">).</span><span class="na">prepareForDeferredProcessing</span><span class="o">();</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">      <span class="c1">// the synchronization prevents the OutputStream from being closed while we</span>
</span><span class="line">      <span class="c1">// are writing. It also prevents multiple threads from entering the same</span>
</span><span class="line">      <span class="c1">// converter. Converters assume that they are in a synchronized block.</span>
</span><span class="line">      <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="c1">// 避免多线程的问题，这里加了锁。而写日志的核心也是在这里</span>
</span><span class="line">        <span class="n">writeOut</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="c1">// as soon as an exception occurs, move to non-started state</span>
</span><span class="line">      <span class="c1">// and add a single ErrorStatus to the SM.</span>
</span><span class="line">      <span class="k">this</span><span class="o">.</span><span class="na">started</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">      <span class="n">addStatus</span><span class="o">(</span><span class="k">new</span> <span class="nf">ErrorStatus</span><span class="o">(</span><span class="s">&quot;IO failure in appender&quot;</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="n">ioe</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="c1">// 这里将会调用前面我们提到过的模板类，有该类对解析出来的模板按照当前环境进行输出</span>
</span><span class="line">  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">writeOut</span><span class="o">(</span><span class="n">E</span> <span class="n">event</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">    <span class="k">this</span><span class="o">.</span><span class="na">encoder</span><span class="o">.</span><span class="na">doEncode</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：在<code>prepareForDeferredProcessing</code>中，查询了一些常用值，比如当前线程名，比如mdc设置赋值到Map中。而这些信息，当准备结束没有出现问题时，则会给后面的输出日志时公用。</p>

    <p>这种方式，其实在我们的代码中，也可以参考。一般我们可能对当前上下文的入参检查会去查询数据库等耗费CPU或者IO的操作，然后check ok的时候，又会在正常的业务中再次做相同的重复工作，导致不必要的性能损失。</p>

  </blockquote>
</blockquote>

<p>接下来看看，针对模板进行按需获取属性值，然后输出日志的逻辑：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">  <span class="c1">// 这里的逻辑就是按照模板获取值然后转换成字节流输出到后台</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doEncode</span><span class="o">(</span><span class="n">E</span> <span class="n">event</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">    <span class="n">String</span> <span class="n">txt</span> <span class="o">=</span> <span class="n">layout</span><span class="o">.</span><span class="na">doLayout</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class="line">    <span class="n">outputStream</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">convertToBytes</span><span class="o">(</span><span class="n">txt</span><span class="o">));</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">immediateFlush</span><span class="o">)</span>
</span><span class="line">      <span class="n">outputStream</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">doLayout</span><span class="o">(</span><span class="n">ILoggingEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(!</span><span class="n">isStarted</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="n">CoreConstants</span><span class="o">.</span><span class="na">EMPTY_STRING</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">writeLoopOnConverters</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// 初始化的时候，就介绍过最后会构建一个head链表，</span>
</span><span class="line">  <span class="c1">// 这里输出就是按照解析后的链表进行分析输出的。然后根据c类型不同，获取字符串方法也不同</span>
</span><span class="line">  <span class="kd">protected</span> <span class="n">String</span> <span class="nf">writeLoopOnConverters</span><span class="o">(</span><span class="n">E</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">StringBuilder</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">(</span><span class="mi">128</span><span class="o">);</span>
</span><span class="line">    <span class="n">Converter</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span><span class="line">    <span class="k">while</span> <span class="o">(</span><span class="n">c</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="n">c</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="n">event</span><span class="o">);</span>
</span><span class="line">      <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">buf</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>在<code>writeLoopOnConverters</code>方法中，获取对应字符串是不同的，其根据不同的Converter，输出也不同。而Converter的判断，时就是根据我们配置的map映射来的，在初始化一节的时候，介绍的<code>PatternLayout</code>就包含各种映射关系。至于具体的convert方法，看看mdc的实现：</p>

  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Logback 日志输出实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MDCConverter</span> <span class="kd">extends</span> <span class="n">ClassicConverter</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="n">String</span> <span class="n">key</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">String</span> <span class="n">defaultValue</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">String</span><span class="o">[]</span> <span class="n">keyInfo</span> <span class="o">=</span> <span class="n">extractDefaultReplacement</span><span class="o">(</span><span class="n">getFirstOption</span><span class="o">());</span>
</span><span class="line">    <span class="n">key</span> <span class="o">=</span> <span class="n">keyInfo</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">keyInfo</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="n">defaultValue</span> <span class="o">=</span> <span class="n">keyInfo</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="kd">super</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="kd">super</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">convert</span><span class="o">(</span><span class="n">ILoggingEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">mdcPropertyMap</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getMDCPropertyMap</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">mdcPropertyMap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="n">defaultValue</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nf">outputMDCForAllKeys</span><span class="o">(</span><span class="n">mdcPropertyMap</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">      <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getMDCPropertyMap</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span><span class="c1">//获取key的值</span>
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">defaultValue</span><span class="o">;</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * if no key is specified, return all the values present in the MDC, in the format &quot;k1=v1, k2=v2, ...&quot;</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">String</span> <span class="nf">outputMDCForAllKeys</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">mdcPropertyMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">StringBuilder</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class="line">    <span class="kt">boolean</span> <span class="n">first</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">mdcPropertyMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">first</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">first</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">        <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;, &quot;</span><span class="o">);</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">      <span class="c1">//format: key0=value0, key1=value1</span>
</span><span class="line">      <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;=&#39;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">buf</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>我们在MDC实现的时候看到的get方法，在这里就使用了。我们将key:value键值对存放到MDC之后，在logback.xml中配置%X{key}，没有直接调用get方法，logback会根据<code>X</code>判断是MDC类型，然后根据<code>key</code>拿到MDC中对应的value，然后返回给buf中，最后append到后台日志上。</p>
  </blockquote>
</blockquote>

<h2 id="a-idenda"><a id="End">后记</a></h2>

<p>其实，本身的 MDC 使用很简单，实现原理也很简单。但是，这里为了分析从将 key:value put 进MDC，然后怎么获取，怎么打印到后台的逻辑，对整个从 SLF4J 到 logback 的运行流程进场了大体解析。而对不影响理解的一些枝节，进行了删减。因此，如果需要完全弄清楚整个逻辑，还需要进行详细分析源码。</p>

<p>在目前的代码中，我们在web.xml 中配置了 filter 来将一些用户个人访问特征存入了MDC中，这样可以获取一个用户的操作流程，根据某一个访问特征去grep的话。</p>

<p>下一次，将分享下这种实现细节背后的一些技术。虽然实现很简单，但是想深入分析下filter机制和web = tomcat + spring mvc 的请求处理流程，这些技术细节，是如何使一个MDC信息可以保存一个用户依次的访问流水记录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 教程学习之 Python 面向对象编程]]></title>
    <link href="http://kxcoder.github.io/blog/2015/02/26/Python-Tutoril-Python-Object-Oriented-Programming/"/>
    <updated>2015-02-26T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2015/02/26/Python-Tutoril-Python-Object-Oriented-Programming</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#BasicGuide">Python 面向对象编程介绍</a></li>
  <li><a href="#AdvancedTech">Python 面向对象编程技巧</a></li>
  <li><a href="#SourceCode">Python 面向对象编程代码示例</a></li>
</ol>

<p><br />
## <a id="Intro">前言</a></p>

<p>在之前的学习中，基本上都是使用类似于面对过程的方式来写代码，学习各种 Python 的基础知识，接下来，我们需要继续学习面向对象的Python，也就是类对象继承等概念。</p>

<p>对象和属性，这些概念在任务编程语言中，其定义都是一致的。我们通过一个对象来表示一个物体，而这个物体的一些特征，就是对象中的属性。比如，一个人，作为一个对象 Person，则会有<code>姓名，身高，体重，性别，出生日期</code>等属性，这些属性就是这个人的对外特性了。</p>

<!--more-->

<h2 id="a-idbasicguidepython-a"><a id="BasicGuide">Python 面向对象编程介绍</a></h2>

<p>类，就是对一类物体进行抽象的表示，比如上面的 Person；而实例，则是具体化了每一个类的属性值，其可以决定某一个物体特征的对象。</p>

<p>在 Python 中，可以如下来定义一个类：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="sd">&quot;&quot;&quot;docstring for Person&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class="line">        <span class="nb">super</span><span class="p">(</span><span class="n">Person</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__name</span> <span class="o">=</span> <span class="n">name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>class</code> 用来表示这是一个类，<code>object</code> 表示该类继承的父类，默认是 object，但是推荐是写上父类，即使其继承 <code>object</code>类。</p>

<blockquote>
  <blockquote>
    <p>Tips：Python 中，默认规定，类下面的第一行注释，是该类的 doc 说明。</p>

    <p>此外，<code>__xx__</code>形式的属性和方法，在Python中都是有特殊用途的，比如 <strong>len</strong> 方法返回长度，再比如 <strong>init</strong> 方法是类对象初始化时调用的，<strong>new</strong> 方法则是构造对象的时候调用的，即在 <code>__init__</code> 之前调用。</p>

  </blockquote>
</blockquote>

<p>接下来，需要说明的是，Python 的权限控制。</p>

<p>和 Java 完全不一样，Python 没有关键字来说明该变量属性或者方法是 私有的 还是受保护的，亦或者是公共的。</p>

<p>Python 使用一种约定的方式来，声明访问限制的粒度。</p>

<ul>
  <li>
    <p>xx ：这种方式命名的变量或者方法，都是 <code>public</code>粒度的；</p>
  </li>
  <li>
    <p>_xx ：这种方式命名的变量或者方法，都是 <code>protected</code>粒度的；</p>
  </li>
  <li>
    <p>__xx ：私有属性的变量或者方法，外部调用会报错的。</p>
  </li>
</ul>

<p>Python 中拥有的一些特殊功能的方法：</p>

<ul>
  <li>
    <p>type() ：获取对象的类型，比如，type(‘abc’)会返回 <code>&lt;type 'str'&gt;</code> .</p>
  </li>
  <li>
    <p>isinstance()：type 方法不能很好的判断拥有继承关系的对象，而 <code>isinstance</code> 则可以。例如：<code>isinstance(person,object) #person是Person的实例</code>.</p>
  </li>
  <li>
    <p>dir()：想要获取一个类下面所有的方法吗？使用 dir 就可以了，比如<code>dir('abc')</code></p>
  </li>
  <li>
    <p>hasattr/getattr/setattr()：依次是判断一个对象是否有指定属性，获取该属性，设置某个属性</p>
  </li>
</ul>

<h2 id="a-idadvancedtechpython-a"><a id="AdvancedTech">Python 面向对象编程技巧</a></h2>

<p>Python 中还有一些比较高大上的技巧。</p>

<p><em><code>@property</code>装饰器</em></p>

<p>装饰器概念，在 <code>Python 函数式编程</code> 中已经介绍了。我们在类的代码 coding 中，有一些可能想要把方法使用如同属性使用般方便，则可以使用<code>@property</code>装饰器。</p>

<p>注解方式，如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">    <span class="nd">@property</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">age</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">try</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__age</span>
</span><span class="line">        <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@age.setter</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">age</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__age</span> <span class="o">=</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>metaclass 元类</em></p>

<p>Python 中，元类是一个很神奇的东西，由于其涉及到了底层的类结构构造，所以全部深入理解起来，可能会比较复杂。</p>

<p>关于元类的资料，可以参考<a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python">http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python</a>，第一个 answer 回答的特别棒。</p>

<p>当我们定义了类以后，就可以根据这个类创建出实例，所以：先定义类，然后创建实例。</p>

<p>但是如果我们想创建出类呢？那就必须根据metaclass创建出类，所以：先定义metaclass，然后创建类。</p>

<p>连接起来就是：先定义metaclass，就可以创建类，最后创建实例。</p>

<p>所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。</p>

<p>现在，一个简单的示例，就是，对于该类所有的自定义属性，其name都大写。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Female</span><span class="p">(</span><span class="n">Person</span><span class="o">.</span><span class="n">Person</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="sd">&quot;&quot;&quot;docstring for Female&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">log_construct</span><span class="p">(</span><span class="n">class_name</span><span class="p">,</span> <span class="n">class_parent</span><span class="p">,</span> <span class="n">class_attr</span><span class="p">):</span>
</span><span class="line">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;==----==---contruct---===---&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">upper_attr</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">        <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">class_attr</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">            <span class="k">if</span> <span class="n">key</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;__&#39;</span><span class="p">):</span>  <span class="c"># 不能改变class自带的属性</span>
</span><span class="line">                <span class="n">upper_attr</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">upper_attr</span><span class="p">[</span><span class="n">key</span><span class="o">.</span><span class="n">upper</span><span class="p">()]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="nb">type</span><span class="p">(</span><span class="n">class_name</span><span class="p">,</span> <span class="n">class_parent</span><span class="p">,</span> <span class="n">upper_attr</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">married</span><span class="p">):</span>
</span><span class="line">        <span class="n">Person</span><span class="o">.</span><span class="n">Person</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__married</span> <span class="o">=</span> <span class="n">married</span>
</span><span class="line">
</span><span class="line">    <span class="n">__metaclass__</span> <span class="o">=</span> <span class="n">log_construct</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">felame</span> <span class="o">=</span> <span class="n">Female</span><span class="p">(</span><span class="s">&#39;ketao1989&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class="line">    <span class="n">felame</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class="line">    <span class="k">print</span> <span class="n">felame</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">Female</span><span class="p">,</span> <span class="s">&#39;MARRIED&#39;</span><span class="p">)</span> <span class="c"># 返回Ture</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idsourcecodepython-a"><a id="SourceCode">Python 面向对象编程代码示例</a></h2>

<p>这里主要是两个类，涉及到继承，和一些面向对象的使用方法。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="c"># @Date    : 2015-02-22 19:49:20</span>
</span><span class="line"><span class="c"># @Author  : ketao1989</span>
</span><span class="line"><span class="c"># @Version : $Id$</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">json</span>
</span><span class="line">
</span><span class="line"><span class="nb">reload</span><span class="p">(</span><span class="n">sys</span><span class="p">)</span>
</span><span class="line"><span class="n">sys</span><span class="o">.</span><span class="n">setdefaultencoding</span><span class="p">(</span><span class="s">&#39;utf8&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="sd">&quot;&quot;&quot;docstring for Person&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class="line">        <span class="nb">super</span><span class="p">(</span><span class="n">Person</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@property</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__name</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@name.setter</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__name</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__tranform_name</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__tranform_name</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;_test&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@property</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">age</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">try</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__age</span>
</span><span class="line">        <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@age.setter</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">age</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__age</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s"> &#39;s age is : </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">get_name</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">age</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&#39;ketao1989&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">person</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">    <span class="k">print</span> <span class="n">person</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">    <span class="k">print</span> <span class="n">person</span>
</span><span class="line">    <span class="k">print</span> <span class="n">os</span><span class="o">.</span><span class="n">uname</span><span class="p">()</span>
</span><span class="line">    <span class="k">print</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">&#39;PATH&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="nb">dir</span><span class="p">(</span><span class="s">&#39;abc&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="c"># @Date    : 2015-02-22 20:34:46</span>
</span><span class="line"><span class="c"># @Author  : ketao1989</span>
</span><span class="line"><span class="c"># @Version : $Id$</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">Person</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">logging</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">json</span>
</span><span class="line">
</span><span class="line"><span class="nb">reload</span><span class="p">(</span><span class="n">sys</span><span class="p">)</span>
</span><span class="line"><span class="n">sys</span><span class="o">.</span><span class="n">setdefaultencoding</span><span class="p">(</span><span class="s">&#39;utf8&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Female</span><span class="p">(</span><span class="n">Person</span><span class="o">.</span><span class="n">Person</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="sd">&quot;&quot;&quot;docstring for Female&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">log_construct</span><span class="p">(</span><span class="n">class_name</span><span class="p">,</span> <span class="n">class_parent</span><span class="p">,</span> <span class="n">class_attr</span><span class="p">):</span>
</span><span class="line">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;==----==---contruct---===---&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">upper_attr</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">        <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">class_attr</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">            <span class="k">if</span> <span class="n">key</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;__&#39;</span><span class="p">):</span>  <span class="c"># 不能改变class自带的属性</span>
</span><span class="line">                <span class="n">upper_attr</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">upper_attr</span><span class="p">[</span><span class="n">key</span><span class="o">.</span><span class="n">upper</span><span class="p">()]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="nb">type</span><span class="p">(</span><span class="n">class_name</span><span class="p">,</span> <span class="n">class_parent</span><span class="p">,</span> <span class="n">upper_attr</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">married</span><span class="p">):</span>
</span><span class="line">        <span class="n">Person</span><span class="o">.</span><span class="n">Person</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__married</span> <span class="o">=</span> <span class="n">married</span>
</span><span class="line">
</span><span class="line">    <span class="n">__metaclass__</span> <span class="o">=</span> <span class="n">log_construct</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@property</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">married</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__married</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@married.setter</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">married</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__married</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot;_Female____&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">prefix</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="n">Person</span><span class="o">.</span><span class="n">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">prefix</span> <span class="o">+</span> <span class="s">&quot;,married is : </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">MARRIED</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">felame</span> <span class="o">=</span> <span class="n">Female</span><span class="p">(</span><span class="s">&#39;ketao1989&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class="line">    <span class="n">felame</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class="line">    <span class="k">print</span> <span class="n">felame</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">Female</span><span class="p">,</span> <span class="s">&#39;MARRIED&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span> <span class="n">Female</span>
</span><span class="line">    <span class="k">print</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">Female</span><span class="p">,</span> <span class="s">&#39;job&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">felame</span><span class="o">.</span><span class="n">job</span> <span class="o">=</span> <span class="s">&#39;dev&#39;</span>
</span><span class="line">    <span class="k">print</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">felame</span><span class="p">,</span> <span class="s">&#39;job&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">felame</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">
</span><span class="line">    <span class="n">felame1</span> <span class="o">=</span> <span class="n">Female</span><span class="p">(</span><span class="s">&#39;ketao&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">Female</span><span class="p">,</span> <span class="s">&#39;job&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">felame1</span><span class="p">,</span> <span class="s">&#39;job&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">felame</span><span class="p">,</span> <span class="s">&#39;job&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">felame</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__class__</span>
</span><span class="line">    <span class="k">print</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">felame</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="k">lambda</span> <span class="n">obj</span><span class="p">:</span> <span class="n">obj</span><span class="o">.</span><span class="n">__dict__</span><span class="p">)</span>
</span><span class="line">    <span class="n">json_str</span> <span class="o">=</span> <span class="s">&#39;{&quot;_Person__name&quot;: &quot;ketao1989&quot;, &quot;_Person__age&quot;: 100, &quot;job&quot;: &quot;dev&quot;, &quot;_Female__married&quot;: false}&#39;</span>
</span><span class="line">    <span class="n">felame2</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">json_str</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">felame2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes : 在Female类中，继承需要写成<code>Person.Person</code>的形式，前面的<code>Person</code>是module,后面的 <code>Person</code>才是类。</p>

    <p>此外，使用metaClass方式更改属性时，只会修改该类自己的属性，而不会更改其继承的父类的属性名。</p>
  </blockquote>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 教程学习之 Python 函数式编程]]></title>
    <link href="http://kxcoder.github.io/blog/2015/02/17/Python-Tutoril-Python-Functional-Programing/"/>
    <updated>2015-02-17T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2015/02/17/Python-Tutoril-Python-Functional-Programing</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#FunctionalProgram">Python 函数式编程</a></li>
  <li><a href="#Decorator">Python 装饰器</a></li>
</ol>

<p><br />
## <a id="Intro">前言</a></p>

<p>函数式编程是一种比较抽象的编程范式，其将各种指令计算运行作为数学中函数计算一样，尽量避免状态和变量的概念，因此函数式编程，一大特点就是无副作用，这对于并发编程大行其道的今天，是非常优良的特点。</p>

<p>Python 作为一个动态脚本语言，其很早就支持了函数式编程范式。</p>

<!--more-->

<h2 id="a-idfunctionalprogrampython-a"><a id="FunctionalProgram">Python 函数式编程</a></h2>

<p>Python 函数式编程，涉及太多的内容。简单介绍几个点。</p>

<h3 id="section-1">高阶函数</h3>

<p>所谓高阶函数，和数学上的高阶函数定义基本一样，就是对函数进行计算处理的函数。其处理对象是另一个函数。</p>

<p><em>Map 和 Reduce 函数</em></p>

<p>云计算中，关于 MapReduce 的并行计算框架，在其他很多编程语言中，都会提供 API 方法。即使在Java这种笨重的语言中，也已经提供了相关的方法给开发者使用。</p>

<p>Python 的 map 方法，表示分别对列表中的元素独立处理；Reduce 方法，则表示对map处理完的结果，按照指定的方式进行聚合处理。</p>

<p>看看示例代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">lowerLetter</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">c</span> <span class="o">&gt;=</span> <span class="s">&#39;a&#39;</span> <span class="ow">and</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="s">&#39;z&#39;</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">True</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">firstUpper</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class="line">    <span class="n">ss</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">lowerLetter</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]):</span>
</span><span class="line">                <span class="n">ss</span> <span class="o">=</span> <span class="n">ss</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">))</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">ss</span> <span class="o">=</span> <span class="n">ss</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">lowerLetter</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]):</span>
</span><span class="line">                <span class="n">ss</span> <span class="o">=</span> <span class="n">ss</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">ss</span> <span class="o">=</span> <span class="n">ss</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ss</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">mergeWords</span><span class="p">(</span><span class="n">strA</span><span class="p">,</span> <span class="n">strB</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">strA</span> <span class="o">+</span> <span class="s">&#39;-&#39;</span> <span class="o">+</span> <span class="n">strB</span>
</span><span class="line">
</span><span class="line"><span class="n">mm</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">firstUpper</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;zfc&#39;</span><span class="p">,</span> <span class="s">&#39;Azc&#39;</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span> <span class="n">mm</span>
</span><span class="line">
</span><span class="line"><span class="n">rr</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">mergeWords</span><span class="p">,</span> <span class="n">mm</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">rr</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes ：<br />
- map 方法，对每个列表的元素处理，开头字符大写，其他字母都小写。代码中使用了最简单的原始字符处理方式处理，主要是学习下python的字节操作方法。</p>

    <ul>
      <li>Reduce方法，则把所有的单词都聚合在一起，使用<code>-</code>相连。reduce 方法会自动依次取出上一次的reduce结果和接下来的元素，再调用reduce处理。</li>
    </ul>

  </blockquote>
</blockquote>

<p><em>filter 函数</em></p>

<p>filter 函数用来按照我们的要求，过滤队列。我们首先，给出一个过滤条件来依次判断列表的元素是否满足，根据返回的<code>True</code>或则<code>False</code>来决定去留。</p>

<p>看看示例代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">contains</span><span class="p">(</span><span class="n">ss</span><span class="p">,</span> <span class="n">subStr</span><span class="o">=</span><span class="s">&#39;z&#39;</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ss</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">subStr</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line"><span class="c"># [&#39;zfc&#39;, &#39;Azc&#39;]</span>
</span><span class="line"><span class="n">ff</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="n">contains</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;zfc&#39;</span><span class="p">,</span> <span class="s">&#39;Azc&#39;</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span> <span class="n">ff</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>sorted 函数</em></p>

<p>排序方法，对列表按照比较函数的返回结果，进行排序，返回排序完之后的列表。</p>

<p>看看示例代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># [&#39;Azc&#39;, &#39;abc&#39;, &#39;zfc&#39;]</span>
</span><span class="line"><span class="n">sl</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">([</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;zfc&#39;</span><span class="p">,</span> <span class="s">&#39;Azc&#39;</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span> <span class="n">sl</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">revertSortCmp</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">    <span class="k">elif</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="c"># [&#39;zfc&#39;, &#39;abc&#39;, &#39;Azc&#39;]</span>
</span><span class="line"><span class="n">rsl</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">([</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;zfc&#39;</span><span class="p">,</span> <span class="s">&#39;Azc&#39;</span><span class="p">],</span> <span class="n">revertSortCmp</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">rsl</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">返回函数</h3>

<p>所谓返回函数，其实这也是函数式编程的核心之一。因为有了返回函数，我们可以确保函数式编程方法在获取结果的时候，才会执行；而不是，赋值函数的时候，立即执行。</p>

<p>这种延迟计算的特性，使得很多时候，可以获得更好的计算性能。</p>

<p>看看示例代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">lazy_tranform</span><span class="p">(</span><span class="n">ll</span><span class="p">):</span>
</span><span class="line">    <span class="n">resTotal</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">tranform</span><span class="p">():</span>
</span><span class="line">        <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">ll</span><span class="p">:</span>
</span><span class="line">            <span class="n">xf</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="s">&#39;-tranform&#39;</span>
</span><span class="line">            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">xf</span><span class="p">)</span>
</span><span class="line">            <span class="n">resTotal</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">xf</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">res</span><span class="p">,</span> <span class="n">resTotal</span>
</span><span class="line">    <span class="k">return</span> <span class="n">tranform</span>
</span><span class="line">
</span><span class="line"><span class="n">lf</span> <span class="o">=</span> <span class="n">lazy_tranform</span><span class="p">([</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;zfc&#39;</span><span class="p">,</span> <span class="s">&#39;Azc&#39;</span><span class="p">])</span>
</span><span class="line"><span class="c">#&lt;function tranform at 0x1006309b0&gt;</span>
</span><span class="line"><span class="k">print</span> <span class="n">lf</span>
</span><span class="line"><span class="c">#([&#39;abc-tranform&#39;, &#39;zfc-tranform&#39;, &#39;Azc-tranform&#39;], [&#39;abc-tranform&#39;, &#39;zfc-tranform&#39;, &#39;Azc-tranform&#39;])</span>
</span><span class="line"><span class="k">print</span> <span class="n">lf</span><span class="p">()</span>
</span><span class="line"><span class="c">#([&#39;abc-tranform&#39;, &#39;zfc-tranform&#39;, &#39;Azc-tranform&#39;], [&#39;abc-tranform&#39;, &#39;zfc-tranform&#39;, &#39;Azc-tranform&#39;, &#39;abc-tranform&#39;, &#39;zfc-tranform&#39;, &#39;Azc-tranform&#39;])</span>
</span><span class="line"><span class="k">print</span> <span class="n">lf</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes ：可以看到上面，对于<code>resTotal</code>变量，当函数多次运行，结果会重复 append 到列表中。 也就是说，对于返回函数，这种变量<code>resTotal</code>定义相对于是全局的，所有使用该函数的地方，都会这个变量进行变更。</p>

    <p>上面的代码，如果不了解，是很难定位到错误的。下面的代码，告诉你，如果你非要这样子写，应该如何处理这种涉及到<code>闭包</code>的问题。</p>

  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">closure_tranform</span><span class="p">(</span><span class="n">ll</span><span class="p">):</span>
</span><span class="line">    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">ll</span><span class="p">:</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">tranform</span><span class="p">():</span>
</span><span class="line">            <span class="n">xf</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="s">&#39;-tranform&#39;</span>
</span><span class="line">            <span class="k">return</span> <span class="n">xf</span>
</span><span class="line">        <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tranform</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">res</span>
</span><span class="line">
</span><span class="line"><span class="c"># &lt;function tranform at 0x100630aa0&gt; &lt;function tranform at 0x100630b18&gt; &lt;function tranform at 0x100630b90&gt;</span>
</span><span class="line"><span class="c"># Azc-tranform Azc-tranform Azc-tranform</span>
</span><span class="line"><span class="n">lf1</span><span class="p">,</span> <span class="n">lf2</span><span class="p">,</span> <span class="n">lf3</span> <span class="o">=</span> <span class="n">closure_tranform</span><span class="p">([</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;zfc&#39;</span><span class="p">,</span> <span class="s">&#39;Azc&#39;</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span> <span class="n">lf1</span><span class="p">,</span> <span class="n">lf2</span><span class="p">,</span> <span class="n">lf3</span>
</span><span class="line"><span class="k">print</span> <span class="n">lf1</span><span class="p">(),</span> <span class="n">lf2</span><span class="p">(),</span> <span class="n">lf3</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">closure_tranform_opz</span><span class="p">(</span><span class="n">ll</span><span class="p">):</span>
</span><span class="line">    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">ll</span><span class="p">:</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">tranform</span><span class="p">(</span><span class="n">y</span><span class="p">):</span>
</span><span class="line">            <span class="k">def</span> <span class="nf">tranform_closure</span><span class="p">():</span>
</span><span class="line">                <span class="n">xf</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="s">&#39;-tranform&#39;</span>
</span><span class="line">                <span class="k">return</span> <span class="n">xf</span>
</span><span class="line">            <span class="k">return</span> <span class="n">tranform_closure</span>
</span><span class="line">        <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tranform</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">res</span>
</span><span class="line"><span class="c"># &lt;function tranform_closure at 0x100630cf8&gt; &lt;function tranform_closure at 0x100630c80&gt; &lt;function tranform_closure at 0x100630d70&gt;</span>
</span><span class="line"><span class="c"># abc-tranform zfc-tranform Azc-tranform</span>
</span><span class="line"><span class="n">lfo1</span><span class="p">,</span> <span class="n">lfo2</span><span class="p">,</span> <span class="n">lfo3</span> <span class="o">=</span> <span class="n">closure_tranform_opz</span><span class="p">([</span><span class="s">&#39;abc&#39;</span><span class="p">,</span> <span class="s">&#39;zfc&#39;</span><span class="p">,</span> <span class="s">&#39;Azc&#39;</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span> <span class="n">lfo1</span><span class="p">,</span> <span class="n">lfo2</span><span class="p">,</span> <span class="n">lfo3</span>
</span><span class="line"><span class="k">print</span> <span class="n">lfo1</span><span class="p">(),</span> <span class="n">lfo2</span><span class="p">(),</span> <span class="n">lfo3</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes ：出现这种现象，就是因为我们的方法都是延迟加载，也就是说，最后的变量已经变更了，上面的代码中<code>i</code>就像<code>resTotal</code> 一样，是个全局变量，所以会在多次调用函数中彼此影响。</p>

  </blockquote>
</blockquote>

<h2 id="a-iddecoratorpython-a"><a id="Decorator">Python 装饰器</a></h2>

<p>熟悉 AOP 面向方面编程的同学，都了解切点，切面等概念。重要的是，使用 AOP 编程，可以让核心的业务代码和运维调试等代码切分开，也可以让老代码在一定程度上更容易升级。比如最通用的场景：日志记录，事务管理，权限拦截，自定义数据管理等。</p>

<p>在 Python 中，完成 AOP 编码范式的就是<code>Python 装饰器</code>。使用 <code>@</code>标记，就可以完成 AOP 简单功能了。</p>

<p>看看示例代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">logger</span><span class="p">(</span><span class="n">user_name</span><span class="o">=</span><span class="s">&#39;ketao1989&#39;</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">        <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kv</span><span class="p">):</span>
</span><span class="line">            <span class="k">print</span> <span class="s">&#39;Welcome,&#39;</span><span class="p">,</span> <span class="n">user_name</span><span class="p">,</span> <span class="n">func</span><span class="o">.</span><span class="n">__name__</span>
</span><span class="line">            <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kv</span><span class="p">)</span>
</span><span class="line">            <span class="k">print</span> <span class="s">&#39;Goodbye,&#39;</span><span class="p">,</span> <span class="n">user_name</span><span class="p">,</span> <span class="n">func</span><span class="o">.</span><span class="n">__name__</span>
</span><span class="line">        <span class="k">return</span> <span class="n">wrapper</span>
</span><span class="line">    <span class="k">return</span> <span class="n">log</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">logger</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kv</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;Welcome,&#39;</span><span class="p">,</span> <span class="n">func</span><span class="o">.</span><span class="n">__name__</span>
</span><span class="line">        <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kv</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;Goodbye,&#39;</span><span class="p">,</span> <span class="n">func</span><span class="o">.</span><span class="n">__name__</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c">#@log(&#39;ketao1989&#39;)</span>
</span><span class="line"><span class="nd">@log</span>
</span><span class="line"><span class="k">def</span> <span class="nf">logger_test</span><span class="p">(</span><span class="n">params</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;execute core function (</span><span class="si">%s</span><span class="s">) ......&#39;</span> <span class="o">%</span> <span class="n">params</span>
</span><span class="line">
</span><span class="line"><span class="n">logger_test</span><span class="p">([</span><span class="s">&#39;test_param1&#39;</span><span class="p">,</span> <span class="s">&#39;test_param2&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：代码示例中，标记<code>@functools.wraps(func)</code>，是因为在装饰器中可能原始的函数的<code>__name__</code>等被覆盖，而该标注，可以保证原始携带的func的内置属性依然保持。</p>

    <p>此外，在代码的开始，需要<code>import functools</code>引入模块。</p>

  </blockquote>
</blockquote>

<p>关于 Python 装饰器参考：<a href="http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html">http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 教程学习之 Python 函数和高级特性]]></title>
    <link href="http://kxcoder.github.io/blog/2015/02/15/Python-Tutoril-Python-Function-And-Advances/"/>
    <updated>2015-02-15T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2015/02/15/Python-Tutoril-Python-Function-And-Advances</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#Function">Python 函数</a></li>
  <li><a href="#Advanced">Python 高级特性</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>上一篇博客简单介绍了 Python 基本的概念和操作方法。但是，和其他编程语言一样，是缺少不了函数的。有了函数，代码才会被多次复用，程序才会简洁和易读。</p>

<p>同样，也是为了开发的简洁，Python 还为提供了 Slice切片等高级特性。切片可让我们更方便的操作列表数据结构，也使得代码更易开发和阅读。</p>

<!--more-->

<h2 id="a-idfunctionpython-a"><a id="Function">Python 函数</a></h2>

<p>Python 函数和数学中函数的概念是一致的，都是对逻辑的一种抽象表示。在 Python 中，我们通过def来定义一个函数方法。</p>

<p>Python 的一些函数方法使用，如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="c"># @Date    : 2015-02-14 11:08:03</span>
</span><span class="line"><span class="c"># @Author  : ketao1989</span>
</span><span class="line"><span class="c"># @Version : $Id$</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line">
</span><span class="line"><span class="nb">reload</span><span class="p">(</span><span class="n">sys</span><span class="p">)</span>
</span><span class="line"><span class="n">sys</span><span class="o">.</span><span class="n">setdefaultencoding</span><span class="p">(</span><span class="s">&#39;utf8&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">funTypeCheck</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="nb">int</span><span class="p">):</span>
</span><span class="line">        <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s">&#39;类型不一致&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">10</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;x is my number&#39;</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;x is not my number&#39;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">moreReturns</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">:</span>
</span><span class="line">        <span class="n">y</span> <span class="o">=</span> <span class="mi">101</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">x</span> <span class="o">=</span> <span class="mi">101</span>
</span><span class="line">    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">defaultParams</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">extra</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class="line">    <span class="n">multiply</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">multiply</span> <span class="o">=</span> <span class="n">multiply</span> <span class="o">*</span> <span class="n">x</span>
</span><span class="line">    <span class="k">return</span> <span class="n">multiply</span> <span class="o">+</span> <span class="n">extra</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">variableParams</span><span class="p">(</span><span class="o">*</span><span class="n">numbers</span><span class="p">):</span>
</span><span class="line">    <span class="n">sum1</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class="line">        <span class="n">sum1</span> <span class="o">+=</span> <span class="n">num</span>
</span><span class="line">    <span class="k">return</span> <span class="n">sum1</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">variableDictParams</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;----&#39;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="s">&#39;----&#39;</span>
</span><span class="line">    <span class="k">print</span> <span class="n">kw</span>
</span><span class="line">
</span><span class="line"><span class="c"># @tail_call_optimized</span>
</span><span class="line"><span class="k">def</span> <span class="nf">factFunction</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="n">s</span>
</span><span class="line">    <span class="k">return</span> <span class="n">factFunction</span><span class="p">(</span><span class="n">s</span> <span class="o">*</span> <span class="n">n</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">funTypeCheck</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">moreReturns</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
</span><span class="line">
</span><span class="line">    <span class="n">multiply</span> <span class="o">=</span> <span class="n">defaultParams</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">multiply</span>
</span><span class="line">    <span class="n">multiply</span> <span class="o">=</span> <span class="n">defaultParams</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">multiply</span>
</span><span class="line">    <span class="n">multiply</span> <span class="o">=</span> <span class="n">defaultParams</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">extra</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">multiply</span>
</span><span class="line">
</span><span class="line">    <span class="n">sum1</span> <span class="o">=</span> <span class="n">variableParams</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="n">sum1</span>
</span><span class="line">
</span><span class="line">    <span class="n">variableDictParams</span><span class="p">(</span><span class="s">&#39;ketao1989&#39;</span><span class="p">,</span> <span class="n">web</span><span class="o">=</span><span class="s">&#39;ketao1989.github.com&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span> <span class="n">factFunction</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&#39;-------------&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">funTypeCheck</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：<code>isinstance</code> 方法判断是否是指定类型。</p>

    <ul>
      <li>
        <p><code>moreReturns(x, y)</code> 函数，返回多个结果。其本质上，就是返回一个tuple.</p>
      </li>
      <li>
        <p><code>defaultParams(x, n=2, extra=0)</code> 函数，设置默认的参数值。在调用的时候，我们可以替换任意一个默认的参数，比如extra，可以：<code>defaultParams(5, extra=2)</code></p>
      </li>
      <li>
        <p><code>variableParams(*numbers)</code> 函数，设置可变个值。</p>
      </li>
      <li>
        <p><code>variableDictParams(name, **kv)</code>函数，设置可变你的参数。其实，其类似Map来根据调用方确定参数。</p>
      </li>
    </ul>

  </blockquote>
</blockquote>

<h2 id="a-idadvancedpython-a"><a id="Advanced">Python 高级特性</a></h2>

<h3 id="section-1">切片</h3>

<p>切片，很简单。就是我们日常对列表进行sub操作的时候，一般需要<code>for</code>循环操作，而 Python 提供了一个更简单的方法来处理这些问题，就是切片。其，表示形式为:<code>[i:j:k]</code>，其中，i表示列表的开始位置索引，j表示列表的结束位置索引（不包含该文章）,k表示循环步长。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">ll</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c"># [4, 6],开始:结束:步长</span>
</span><span class="line"><span class="k">print</span> <span class="n">ll</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c"># (1, 3, 5)</span>
</span><span class="line"><span class="k">print</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,)[</span><span class="mi">0</span><span class="p">::</span><span class="mi">2</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">迭代</h3>

<p>Python 的迭代，相对于 C 语言的迭代语法，有了很大的进步。使用 <code>for ... in</code> 方式来遍历一个集合或者 Map 数据，方便快捷。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">ll</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">56</span><span class="p">]</span>
</span><span class="line"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">ll</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="n">x</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">ll</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span> <span class="n">i</span><span class="p">,</span> <span class="n">value</span>
</span><span class="line">
</span><span class="line"><span class="n">lt</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">)]</span>
</span><span class="line"><span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">lt</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
</span><span class="line">
</span><span class="line"><span class="n">dd</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="s">&#39;C&#39;</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="s">&#39;D&#39;</span><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dd</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="n">key</span>
</span><span class="line"><span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">dd</span><span class="o">.</span><span class="n">itervalues</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span> <span class="n">value</span>
</span><span class="line"><span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">dd</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">列表生成器</h3>

<p>迭代对于列表的优化还不够，Python 还提供了更牛逼的特性：让我们一行代码生成一个列表。</p>

<p>比如，生成一个 1 到 10 数字的平方数，组成一个列表，使用列表生成器，可以如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">lg</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)]</span>
</span><span class="line"><span class="k">print</span> <span class="n">lg</span>
</span><span class="line">
</span><span class="line"><span class="c"># 产生偶数的平方数</span>
</span><span class="line"><span class="n">lo</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line"><span class="k">print</span> <span class="n">lo</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes ：由于列表生成器，是一次生成所有的列表元素，对于很大的列表，如果一次生成完成，然后全部放在内存里，肯定是不好的，因此，Python 还提供了 <code>生成器</code>。</p>

  </blockquote>
</blockquote>

<p>生成器，可以根据生成规则，在使用的时候，才会构造元素。构造简单的生成器，和列表生成器一样，只需要把<code>[ ]</code> 替换成<code>( )</code>即可。例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># &lt;generator object &lt;genexpr&gt; at 0x107de44b0&gt;</span>
</span><span class="line"><span class="n">lg</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)]</span>
</span><span class="line"><span class="k">print</span> <span class="n">lg</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Tips：如果需要打印，可以使用for，单个使用.next()方法依次调用，直到出现异常。</p>
  </blockquote>
</blockquote>

<p>对于复杂一点的生成器，则需要使用 <code>yield</code> 关键字来完成。比如，在我们的一些函数中，某一个变量连续产生的数组，可以使用<code>yield x</code>来完成生成器设置。</p>

<p>例如，构造一个通俗的生成器，如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">generateFun</span><span class="p">():</span>
</span><span class="line">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</span><span class="line"><span class="c"># &lt;generator object generateFun at 0x102f5a5a0&gt;</span>
</span><span class="line"><span class="n">gf</span> <span class="o">=</span> <span class="n">generateFun</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span> <span class="n">gf</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">gf</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 教程学习之Python基础知识]]></title>
    <link href="http://kxcoder.github.io/blog/2015/02/13/Python-Tutoril-Python-Basic-Knowledge/"/>
    <updated>2015-02-13T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2015/02/13/Python-Tutoril-Python-Basic-Knowledge</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#Sublime">Sublime Python 插件安装</a></li>
  <li><a href="#BasicKnowledge">Python 基础知识</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>2015年春节临近，提前请假回家，闲下来的功夫，系统学习下 python 语言，倒是也好。</p>

<p>Python 在日常工作中，主要是脚本语言的开发，由于开发快捷容易，并且在所有 Linux 版本都会安装 Python 的语言环境，不需要额外的配置工作。</p>

<!--more-->

<h2 id="a-idsublimesublime-python-a"><a id="Sublime">Sublime Python 插件安装</a></h2>

<p>对于 Python 的基础知识的学习，已经工作中脚本语言的开发，使用 Sublime 编辑器可以非常好的满足我们的需求，并且 Sublime 提供了丰富的插件供使用，非常便捷。</p>

<p>开发 Python(Django) 语言，一般推荐安装 :</p>

<ul>
  <li>
    <p><code>SublimeCodeIntel</code> 插件：一款代码自动提示的插件。</p>
  </li>
  <li>
    <p><code>Python PEP8 Autoformat</code> 插件：一款针对 Python 的代码格式化插件，快捷键为<code>Ctrl + Shift + R</code>。</p>
  </li>
  <li>
    <p><code>SublimeTmpl</code> 插件：一款自定义文件模板的插件，可以跟进我们的配置在创建文件时，跟进模板完成初始化填充。关于 Python 的代码模板如下所示：</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sublime模板 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="c"># @Date    : ${date}</span>
</span><span class="line"><span class="c"># @Author  : ${author}</span>
</span><span class="line"><span class="c"># @Version : \$Id\$</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="err">$</span><span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="kn">import</span> <span class="nn">os</span><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nb">reload</span><span class="p">(</span><span class="n">sys</span><span class="p">)</span>
</span><span class="line"><span class="n">sys</span><span class="o">.</span><span class="n">setdefaultencoding</span><span class="p">(</span><span class="s">&#39;utf8&#39;</span><span class="p">)</span>
</span><span class="line"><span class="err">$</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：打开 <code>preferences --&gt; pachages</code>，在打开的目录下依次找到<code>sublimeTmpl --&gt; templates --&gt; python.tmpl</code>，直接修改就好了。</p>

  </blockquote>
</blockquote>

<h2 id="a-idbasicknowledgepython-a"><a id="BasicKnowledge">Python 基础知识</a></h2>

<p>基础知识都非常简单，这里贴一下学习的测试代码，就好了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="nb">reload</span><span class="p">(</span><span class="n">sys</span><span class="p">)</span>
</span><span class="line"><span class="n">sys</span><span class="o">.</span><span class="n">setdefaultencoding</span><span class="p">(</span><span class="s">&#39;utf8&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 100</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">100</span>
</span><span class="line"><span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="n">a</span>
</span><span class="line"><span class="k">elif</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="mi">0</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="o">-</span><span class="n">a</span>
</span><span class="line">
</span><span class="line"><span class="c"># 中文</span>
</span><span class="line"><span class="k">print</span> <span class="s">u&#39;中文&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c"># 4</span>
</span><span class="line"><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;zhang&#39;</span><span class="p">,</span> <span class="s">&#39;li&#39;</span><span class="p">,</span> <span class="s">&#39;wang&#39;</span><span class="p">,</span> <span class="s">&#39;er&#39;</span><span class="p">]</span>
</span><span class="line"><span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 5</span>
</span><span class="line"><span class="n">names</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;ma&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># [&#39;zhang&#39;, &#39;li&#39;, &#39;wang&#39;, &#39;zi&#39;, &#39;er&#39;, &#39;ma&#39;]</span>
</span><span class="line"><span class="n">names</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&#39;zi&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">names</span>
</span><span class="line">
</span><span class="line"><span class="c"># [&#39;zhang&#39;, &#39;li&#39;, &#39;wang&#39;, &#39;zi&#39;, &#39;er&#39;]</span>
</span><span class="line"><span class="n">names</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span> <span class="n">names</span>
</span><span class="line">
</span><span class="line"><span class="c"># [&#39;ma&#39;, &#39;li&#39;, &#39;wang&#39;, &#39;zi&#39;, &#39;er&#39;]</span>
</span><span class="line"><span class="n">names</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;ma&#39;</span>
</span><span class="line"><span class="k">print</span> <span class="n">names</span>
</span><span class="line">
</span><span class="line"><span class="c"># [&#39;ma&#39;, &#39;li&#39;, &#39;wang&#39;, &#39;zi&#39;, &#39;er&#39;, [&#39;subzhang&#39;, &#39;subwang&#39;]]</span>
</span><span class="line"><span class="n">names</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="s">&#39;subzhang&#39;</span><span class="p">,</span> <span class="s">&#39;subwang&#39;</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span> <span class="n">names</span>
</span><span class="line">
</span><span class="line"><span class="c"># (&#39;ma&#39;, &#39;li&#39;, &#39;wang&#39;, &#39;zi&#39;, &#39;er&#39;, [&#39;subzhang&#39;, &#39;subwang&#39;])</span>
</span><span class="line"><span class="n">tumples</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">tumples</span>
</span><span class="line">
</span><span class="line"><span class="c"># [&#39;ma&#39;, &#39;li&#39;, &#39;wang&#39;, &#39;zi&#39;, &#39;er&#39;, [&#39;subzhang&#39;, &#39;subwang&#39;]]</span>
</span><span class="line"><span class="n">names</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">tumples</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">names</span>
</span><span class="line">
</span><span class="line"><span class="c"># 分别打印元素，[&#39;subzhang&#39;, &#39;subwang&#39;]是一体的</span>
</span><span class="line"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">tumples</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="n">x</span>
</span><span class="line"><span class="c"># dict字典，ketao</span>
</span><span class="line"><span class="n">maps</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;ketao&#39;</span><span class="p">,</span> <span class="s">&#39;age&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="s">&#39;job&#39;</span><span class="p">:</span> <span class="s">&#39;dev&#39;</span><span class="p">}</span>
</span><span class="line"><span class="k">print</span> <span class="n">maps</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c"># {&#39;job&#39;: &#39;dev&#39;, &#39;age&#39;: 25, &#39;program&#39;: &#39;python&#39;, &#39;name&#39;: &#39;ketao&#39;}</span>
</span><span class="line"><span class="n">maps</span><span class="p">[</span><span class="s">&#39;program&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;python&#39;</span>
</span><span class="line"><span class="k">print</span> <span class="n">maps</span>
</span><span class="line">
</span><span class="line"><span class="c"># {&#39;job&#39;: &#39;dev&#39;, &#39;gender&#39;: &#39;male&#39;, &#39;age&#39;: 25, &#39;program&#39;: &#39;python&#39;, &#39;name&#39;: &#39;ketao&#39;}</span>
</span><span class="line"><span class="k">if</span> <span class="s">&#39;gender&#39;</span> <span class="ow">in</span> <span class="n">maps</span><span class="p">:</span>
</span><span class="line">    <span class="k">pass</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="n">maps</span><span class="p">[</span><span class="s">&#39;gender&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;male&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">maps</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;gender&#39;</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span> <span class="n">maps</span>
</span><span class="line">
</span><span class="line"><span class="c"># set([&#39;wang&#39;, 14, &#39;zhang&#39;])</span>
</span><span class="line"><span class="n">sets</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;zhang&#39;</span><span class="p">,</span> <span class="s">&quot;wang&quot;</span><span class="p">,</span> <span class="mi">14</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span> <span class="n">sets</span>
</span><span class="line">
</span><span class="line"><span class="c"># set([&#39;li&#39;, &#39;wang&#39;, 14, &#39;zhang&#39;])</span>
</span><span class="line"><span class="n">sets</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s">&#39;li&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">sets</span>
</span><span class="line">
</span><span class="line"><span class="c"># set([14, &#39;zhang&#39;]); set([&#39;ma&#39;, &#39;wang&#39;, &#39;zhang&#39;, 14, &#39;li&#39;])</span>
</span><span class="line"><span class="n">setss</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;zhang&#39;</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="s">&#39;ma&#39;</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span> <span class="n">setss</span> <span class="o">&amp;</span> <span class="n">sets</span>
</span><span class="line"><span class="k">print</span> <span class="n">setss</span> <span class="o">|</span> <span class="n">sets</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes : 需要说明的是，必须在python 脚本中，注入 utf-8 相关配置，不然会出现下面的编码问题。如果使用模板，请参考上一节。</p>

  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试代码结果 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class="line">  File <span class="s2">&quot;/Users/ketao/python/test.py&quot;</span>, line 20, in &lt;module&gt;
</span><span class="line">    print u<span class="s1">&#39;中文&#39;</span>
</span><span class="line">UnicodeEncodeError: <span class="s1">&#39;ascii&#39;</span> codec can<span class="err">&#39;</span>t encode characters in position 0-1: ordinal not in range<span class="o">(</span>128<span class="o">)</span>
</span><span class="line"><span class="o">[</span>Finished in 0.0s with <span class="nb">exit </span>code 1<span class="o">]</span>
</span><span class="line"><span class="o">[</span>shell_cmd: python -u <span class="s2">&quot;/Users/ketao/python/test.py&quot;</span><span class="o">]</span>
</span><span class="line"><span class="o">[</span>dir: /Users/ketao/python<span class="o">]</span>
</span><span class="line"><span class="o">[</span>path: /usr/bin:/bin:/usr/sbin:/sbin<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jackson 自定义反序列化Java对象实现]]></title>
    <link href="http://kxcoder.github.io/blog/2015/02/10/Jackson-Deserialize-Java-Object-Implementation/"/>
    <updated>2015-02-10T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2015/02/10/Jackson-Deserialize-Java-Object-Implementation</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#CustomizeDeserialize">Jackson自定义反序列化方法</a></li>
  <li><a href="#RegisterDeserializer">自定义反序列化方法注册到Jackson</a></li>
  <li><a href="#JacksonCustomizeSample">Java对象反序列化自定义示例</a></li>
  <li><a href="#End">总结</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>上一篇博客，介绍了关于<a href="http://ketao1989.github.io/posts/Jackson-Serialize-Java-Object-Implementation.html">Jackson 自定义序列化</a>，本文将介绍关于 Jackson 自定义反序列化。</p>

<p>反序列化，Jackson 工具包中已经支持了开发中常用的 Java 类型的解析功能；但是还是会遇到一些我们需要自定义的解析转换工作。比如外部的一些非主流时间格式转换，再比如说对于一些类型转换，做一些额外数据校验和默认容错处理工作，再比如说前端的某种格式的字符串，我们想直接使用自定义反序列化类来完成到 Java Object 的转换工作等等，都需要我们去自己实现 Jackson 反序列化类。</p>

<!--more-->

<p>和<code>Jackson 自定义序列化</code>相似，Jackson 为自定义的反序列化扩展，也提供了简单易用的接口。</p>

<h2 id="a-idcustomizedeserializejackson-a"><a id="CustomizeDeserialize">Jackson 自定义反序列化方法</a></h2>

<p>在 Jackson 自定义序列化中提供了两种接口，但是在反序列的时候，只有一个接口使用。不过，和序列化一样，反序列化的扩展也很简单，接口为：<code>org.codehaus.jackson.map.JsonDeserializer</code>，Jackson还提供了一个通用的扩展子类<code>com.fasterxml.jackson.databind.deser.std.StdDeserializer</code>。</p>

<p>一般，我们可以直接继承<code>JsonDeserializer</code>抽象类就已经足够满足我们的自定义反序列化需求了。</p>

<h3 id="jsondeserializer-">JsonDeserializer 接口</h3>

<p>和序列化很像，这里我们也只需要实现一个反序列化方法<code>deserialize</code> 就足够了。当然，如果你有其他的更高的需求，可以进一步 override 其他的方法。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>JsonDeserializer 接口 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Abstract class that defines API used by {@link ObjectMapper} (and</span>
</span><span class="line"><span class="cm"> * other chained {@link JsonDeserializer}s too) to deserialize Objects of</span>
</span><span class="line"><span class="cm"> * arbitrary types from JSON, using provided {@link JsonParser}.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">JsonDeserializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 当请求将JSON内容反序列成java类型对象的时候，该方法将会被调用。然后，会返回一个</span>
</span><span class="line"><span class="cm">     * 由方法自己构造的对象实例。</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * 需要注意的是，当JSON为null的时候，该方法该不会被调用，因此，方法不需要去</span>
</span><span class="line"><span class="cm">     * check 该值是否为null。</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">T</span> <span class="nf">deserialize</span><span class="o">(</span><span class="n">JsonParser</span> <span class="n">jp</span><span class="o">,</span> <span class="n">DeserializationContext</span> <span class="n">ctxt</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 和上面常用的方法不同，这个方法带有一个初始化的对象实例，该实例由反序列类配置的。</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * 当然，这个方法是不必须实现的。一般的，我们转换一个JSON为集合或者Map的时候，可以把</span>
</span><span class="line"><span class="cm">     * 通用的元素put到集合中，这样返回的时候，就不需要再操作了。</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">T</span> <span class="nf">deserialize</span><span class="o">(</span><span class="n">JsonParser</span> <span class="n">jp</span><span class="o">,</span> <span class="n">DeserializationContext</span> <span class="n">ctxt</span><span class="o">,</span>
</span><span class="line">                         <span class="n">T</span> <span class="n">intoValue</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">(</span><span class="s">&quot;Can not update object of type &quot;</span>
</span><span class="line">                <span class="o">+</span><span class="n">intoValue</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot; (by deserializer of type &quot;</span><span class="o">+</span><span class="n">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot;)&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 这个方法主要是用来支持兼容老的代码，编码编译错误。</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * 也就是说，当我们使用新的代码和反序列化工具的时候，可能还需要去兼容老的代码数据</span>
</span><span class="line"><span class="cm">     * 反序列化，这样子就可以尝试使用老的反序列化类进行解析工作。</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">deserializeWithType</span><span class="o">(</span><span class="n">JsonParser</span> <span class="n">jp</span><span class="o">,</span> <span class="n">DeserializationContext</span> <span class="n">ctxt</span><span class="o">,</span>
</span><span class="line">            <span class="n">TypeDeserializer</span> <span class="n">typeDeserializer</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="c1">// We could try calling </span>
</span><span class="line">        <span class="k">return</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">typeDeserializer</span><span class="o">.</span><span class="na">deserializeTypedFromAny</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">       <span class="c1">// ........</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Tips：这个反序列化方法实现起来很简单，只需要实现核心的<code>deserialize</code>方法，使用<code>jp.getText</code>获取 value 然后对字符串进行我们需要的各种操作转换，赋值给创建的对象实例，就 OK 了。</p>

  </blockquote>
</blockquote>

<h2 id="a-idregisterdeserializerjacksona"><a id="RegisterDeserializer">自定义反序列化方法注册到Jackson</a></h2>

<p>和序列化一样，Jackson 也提供了三种方法来注册到 <code>ObjectMapper</code> 上。根据官方推荐，这里只介绍两种方式：</p>

<ul>
  <li>
    <p>使用 <code>Module Interface</code>模式来注册反序列化方法（全局）</p>
  </li>
  <li>
    <p>使用注解，细粒度到具体模型对象的属性。</p>
  </li>
</ul>

<h3 id="simplemodule-">SimpleModule 类注册</h3>

<p><code>SimpleModule</code>类是1.8版本才提供的注册类，当我们想在全局的反序列环境下，对指定类型的每一次反序列化都会按照这个类方法进行解析，就可以在<code>SimpleModule</code>中添加指定的自定义反序列类。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>SimpleModule 类注册  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleModule</span> <span class="kd">extends</span> <span class="n">Module</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">_name</span><span class="o">;</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kd">final</span> <span class="n">Version</span> <span class="n">_version</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">protected</span> <span class="n">SimpleSerializers</span> <span class="n">_serializers</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="kd">protected</span> <span class="n">SimpleDeserializers</span> <span class="n">_deserializers</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">SimpleModule</span> <span class="nf">addDeserializer</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">,</span> <span class="n">JsonDeserializer</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">deser</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">_deserializers</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">_deserializers</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleDeserializers</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">_deserializers</span><span class="o">.</span><span class="na">addDeserializer</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">deser</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">SimpleModule</span> <span class="nf">addKeyDeserializer</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">type</span><span class="o">,</span> <span class="n">KeyDeserializer</span> <span class="n">deser</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">_keyDeserializers</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">_keyDeserializers</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleKeyDeserializers</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">_keyDeserializers</span><span class="o">.</span><span class="na">addDeserializer</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">deser</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// ......</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Tips：显然，我们在<code>objectMapper.registerModule</code>中注册构造的simpleModule对象实例，这个实例调用<code>addDeserializer</code>把我们自定义的反序列化方法添加进去就可以了。</p>

  </blockquote>
</blockquote>

<h3 id="jsondeserialize-">@JsonDeserialize 注解</h3>

<p>使用注解的方式来注册自定义的反序列化方法，可以把自定义粒度控制到某一个类型对象属性上，但是这对于想全局反序列化某个类型，这种方式都会很繁琐。</p>

<p><code>@JsonDeserialize</code>和序列化注解，完全一样。使用方式如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>@JsonDeserialize 注解  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">    <span class="nd">@JsonDeserialize</span><span class="o">(</span><span class="n">using</span> <span class="o">=</span> <span class="n">CustomizeJsonDeserializer</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setB</span><span class="o">(</span><span class="n">TypeB</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idjacksoncustomizesamplejavaa"><a id="JacksonCustomizeSample">Java对象反序列化自定义示例</a></h2>

<p>和 Jackson 自定义序列化一样，这里主要把实现继承反序列化接口的代码和 mapper 注册贴出来，参考下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>@JsonDeserialize 注解  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomizeJsonDeserializer</span> <span class="kd">extends</span> <span class="n">JsonDeserializer</span><span class="o">&lt;</span><span class="n">TypeB</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">TypeB</span> <span class="nf">deserialize</span><span class="o">(</span><span class="n">JsonParser</span> <span class="n">jp</span><span class="o">,</span> <span class="n">DeserializationContext</span> <span class="n">ctxt</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">jp</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</span><span class="line">        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">properities</span> <span class="o">=</span> <span class="n">Splitter</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">).</span><span class="na">trimResults</span><span class="o">().</span><span class="na">withKeyValueSeparator</span><span class="o">(</span><span class="s">&quot;=&quot;</span><span class="o">).</span><span class="na">split</span><span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">substringBetween</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="s">&quot;{&quot;</span><span class="o">,</span> <span class="s">&quot;}&quot;</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">JsonUtils</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">properities</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">        <span class="n">TypeB</span> <span class="n">typeB</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TypeB</span><span class="o">(</span><span class="n">properities</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;address&quot;</span><span class="o">),</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">properities</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;code&quot;</span><span class="o">)));</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="n">typeB</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonUtils</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">JsonUtils</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ObjectMapper</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="o">{</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">ALLOW_COMMENTS</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">ALLOW_UNQUOTED_FIELD_NAMES</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">ALLOW_SINGLE_QUOTES</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">ALLOW_UNQUOTED_CONTROL_CHARS</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">INTERN_FIELD_NAMES</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">CANONICALIZE_FIELD_NAMES</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">DeserializationConfig</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">setSerializationInclusion</span><span class="o">(</span><span class="n">JsonSerialize</span><span class="o">.</span><span class="na">Inclusion</span><span class="o">.</span><span class="na">NON_NULL</span><span class="o">);</span><span class="c1">// JSON节点不包含属性值为NULL</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">decode</span><span class="o">(</span><span class="n">String</span> <span class="n">json</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">valueType</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="n">SimpleModule</span> <span class="n">deserializeModule</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleModule</span><span class="o">(</span><span class="s">&quot;DeserializeModule&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">Version</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>
</span><span class="line">            <span class="n">deserializeModule</span><span class="o">.</span><span class="na">addDeserializer</span><span class="o">(</span><span class="n">TypeB</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="k">new</span> <span class="nf">CustomizeJsonDeserializer</span><span class="o">());</span> <span class="c1">// assuming serializer declares correct class to bind to</span>
</span><span class="line">            <span class="n">objectMapper</span><span class="o">.</span><span class="na">registerModule</span><span class="o">(</span><span class="n">deserializeModule</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">valueType</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;decode(String, Class&lt;T&gt;)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span> <span class="c1">//$NON-NLS-1$</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonMappingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;decode(String, Class&lt;T&gt;)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span> <span class="c1">//$NON-NLS-1$</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;decode(String, Class&lt;T&gt;)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span> <span class="c1">//$NON-NLS-1$</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idenda"><a id="End">总结</a></h2>

<ul>
  <li>
    <p>官方序列化简要介绍：<a href="http://wiki.fasterxml.com/JacksonHowToCustomDeserializers">http://wiki.fasterxml.com/JacksonHowToCustomDeserializers</a></p>
  </li>
  <li>
    <p>测试代码git地址:<a href="https://github.com/ketao1989/JavaApiUtilsProject">https://github.com/ketao1989/JavaApiUtilsProject</a></p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jackson 自定义序列化Java对象实现]]></title>
    <link href="http://kxcoder.github.io/blog/2015/02/07/Jackson-Serialize-Java-Object-Implementation/"/>
    <updated>2015-02-07T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2015/02/07/Jackson-Serialize-Java-Object-Implementation</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#CustomizeSerialize">Jackson自定义序列化方法</a></li>
  <li><a href="#RegisterSerializer">自定义序列化方法注册到Jackson</a></li>
  <li><a href="#JacksonCustomizeSample">Java对象序列化自定义示例</a></li>
  <li><a href="#End">总结</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>关于Jackson工具类的相关学习和研究，先前已经写过一篇博文；但是，后来由于工作事情就草草结尾。此外，虽然对Jackson序列化和反序列化的实现机制进行了初步学习，但是现在看看，那时候的博客经验和技术水平决定了整篇博文结构并不是清晰明了，并且反序列化的整个简单的解析，对日常开发并没有直接帮助。对于Jackson这种模块化设计，轻巧灵活的扩展方法，多维度的性能效率优化，导致了最后博文的质量非常不好。因此，接下来几篇博文，将会以日常开发使用的一些API为入口，来分别介绍其使用方式和内部实现，然后在此基础上，对此博文进行分拆。</p>

<!--more-->

<p>在开发中，前后端交互的项目，现在一般都是基于JSON文本格式给出API接口，因此对于java对象的序列化就是十分重要的了。基于Spring MVC的配置中，我们配置<code>org.springframework.http.converter.json.MappingJacksonHttpMessageConverter</code> bean时，就是需要配置<code>messageConverters</code>转换器。而针对json的转换器，就可以使用Jackson的<code>objectMapper</code>对象了。</p>

<p>返回给前端的<code>Response Body</code>一般需要良好的可读性，不能因为后端处理方便，就直接破坏前端展示。比如，我们后端使用枚举处理一些情况，但是如果把枚举英文或者数字返回给前端页面，对用户来说是非常不友好的。因此，这里就是涉及到了java对象自定义序列化的问题了。Jackson工具为我们提供了非常多的常见默认的序列化方法，以及一些扩展的接口；参考系统的序列化方法，我们就可以实现自定义的了。</p>

<h2 id="a-idcustomizeserializejacksona"><a id="CustomizeSerialize">Jackson自定义序列化方法</a></h2>

<p>在Jackson中，提供了多种方式去实现自定义的序列化方法。例如，<code>org.codehaus.jackson.map.JsonSerializableWithType</code>接口以及<code>org.codehaus.jackson.map.JsonSerializer</code>接口。</p>

<h3 id="jsonserializablewithtype-">JsonSerializableWithType 接口</h3>

<p>JsonSerializableWithType 接口主要提供了两个方法。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>JsonSerializableWithType 接口 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Interface that is to replace {@link JsonSerializable} to</span>
</span><span class="line"><span class="cm"> * allow for dynamic type information embedding.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * @since 1.5</span>
</span><span class="line"><span class="cm"> * @author tatu</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;deprecation&quot;</span><span class="o">)</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">JsonSerializableWithType</span>
</span><span class="line">    <span class="kd">extends</span> <span class="n">JsonSerializable</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">serializeWithType</span><span class="o">(</span><span class="n">JsonGenerator</span> <span class="n">jgen</span><span class="o">,</span> <span class="n">SerializerProvider</span> <span class="n">provider</span><span class="o">,</span>
</span><span class="line">            <span class="n">TypeSerializer</span> <span class="n">typeSer</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Deprecated</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">JsonSerializable</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">serialize</span><span class="o">(</span><span class="n">JsonGenerator</span> <span class="n">jgen</span><span class="o">,</span> <span class="n">SerializerProvider</span> <span class="n">provider</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在早期还没有<code>JsonSerializableWithType</code>接口的时候，官方推荐使用<code>JsonSerializable</code>接口。但是，从version 1.5之后，Jackson提供了JsonSerializableWithType来替换JsonSerializable，因为JsonSerializable接口不支持处理某些额外的类型信息。</p>

<p>但是，由于实现JsonSerializableWithType接口的方法比较麻烦，所以，Jackson对外提供了其他可以自定义序列化的抽象类<code>SerializerBase</code>和<code>ScalarSerializerBase</code>。其中ScalarSerializerBase是对SerializerBase的再次封装，它只针对输出了JSON 字符串，boolean或者数字类型才有用。</p>

<p>继承<code>SerializerBase</code>抽象类，主要实现<code>serialize(TypeB value, JsonGenerator jgen, SerializerProvider provider)</code>方法即可，实现起来非常简单。此外,Jackson还提供了另一种简单易用的自定义序列化方法，给开发者使用，这就是<code>JsonSerializer</code>接口。</p>

<h3 id="jsonserializer-">JsonSerializer 接口</h3>

<p>JsonSerializer类就是一个抽象类，我们只需要简单实现其中的抽象方法就可以完成自定义的序列化工作。</p>

<p>先来看看<code>JsonSerializer</code>抽象类的主要方法实现：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>JsonSerializer 接口 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * ObjectMapper类定义的抽象API类来给JsonGenerator类完成序列化任意对象到JSON功能。</span>
</span><span class="line"><span class="cm"> *&lt;p&gt;</span>
</span><span class="line"><span class="cm"> * 需要说明的是，官方推荐使用继承SerializerBase类完成自定义序列化工作，替代使用本类。</span>
</span><span class="line"><span class="cm"> * 主要是因为，SerializerBase类提供了更多的可选择的方法给开发者去定制会。</span>
</span><span class="line"><span class="cm"> * 当然，如果你只需要简单的序列化功能，则继承这个类足够了。</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">JsonSerializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">serialize</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">,</span> <span class="n">JsonGenerator</span> <span class="n">jgen</span><span class="o">,</span> <span class="n">SerializerProvider</span> <span class="n">provider</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Method that can be called to ask implementation to serialize</span>
</span><span class="line"><span class="cm">     * values of type this serializer handles, using specified type serializer</span>
</span><span class="line"><span class="cm">     * for embedding necessary type information.</span>
</span><span class="line"><span class="cm">     *&lt;p&gt;</span>
</span><span class="line"><span class="cm">     * Default implementation will ignore serialization of type information,</span>
</span><span class="line"><span class="cm">     * and just calls {@link #serialize}: serializers that can embed</span>
</span><span class="line"><span class="cm">     * type information should override this to implement actual handling.</span>
</span><span class="line"><span class="cm">     * Most common such handling is done by something like:</span>
</span><span class="line"><span class="cm">     *&lt;pre&gt;</span>
</span><span class="line"><span class="cm">     *  // note: method to call depends on whether this type is serialized as JSON scalar, object or Array!</span>
</span><span class="line"><span class="cm">     *  typeSer.writeTypePrefixForScalar(value, jgen);</span>
</span><span class="line"><span class="cm">     *  serialize(value, jgen, provider);</span>
</span><span class="line"><span class="cm">     *  typeSer.writeTypeSuffixForScalar(value, jgen);</span>
</span><span class="line"><span class="cm">     *&lt;/pre&gt;</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">serializeWithType</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">,</span> <span class="n">JsonGenerator</span> <span class="n">jgen</span><span class="o">,</span> <span class="n">SerializerProvider</span> <span class="n">provider</span><span class="o">,</span>
</span><span class="line">            <span class="n">TypeSerializer</span> <span class="n">typeSer</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="n">serialize</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">jgen</span><span class="o">,</span> <span class="n">provider</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样，继承<code>JsonSerializer</code>类，实现serialize方法，就可以完成自定义序列化工作了。其实，和第一种方法相比，其本质上都是一样的，就是实现serialize序列化方法。</p>

<h2 id="a-idregisterserializerjacksona"><a id="RegisterSerializer">自定义序列化方法注册到Jackson</a></h2>

<p>Jackson提供了多种方式注册自定义序列化类，虽然官方指出第一种继承JsonSerializableWithType的方式不需要注册，但是测试了下，发现貌似不起作用。</p>

<p>虽然注册的方式很多，但是主要是三种，并且最后一种在1.8版本以后已经标记为过时状态：</p>

<ul>
  <li>
    <p>继承 <code>Module interface</code>接口，官方推荐使用模块接口来完成注册功能；</p>
  </li>
  <li>
    <p>使用注解方式<code>@JsonSerialize</code>在方法或field上标记；</p>
  </li>
  <li>
    <p>继承<code>CustomSerializerFactory</code>接口，通过addXxxMapping来自定义SerializerFactory。</p>
  </li>
</ul>

<h3 id="module-interface">Module interface接口</h3>

<p>模块接口，是Jackson在1.7以后的版本中给出的。Module接口，是Jackson专门提供了自定义序列化方法类注册到ObjectMapper实例上的接口，比如我们新增了一个数据类型。</p>

<p>在开发过程中，我们只需要直接使用<code>SimpleModule</code>类就可以完成注册了，一般没有必要去实现<code>Module</code>抽象类。</p>

<blockquote>
  <blockquote>
    <p>Tips：其实Module也提供了反序列化来完成自定义类的注册工作，其他博文会再介绍。</p>
  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Module interface接口 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Simple {@link Module} implementation that allows registration</span>
</span><span class="line"><span class="cm"> * of serializers and deserializers, and bean serializer</span>
</span><span class="line"><span class="cm"> * and deserializer modifiers.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * @since 1.7</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleModule</span> <span class="kd">extends</span> <span class="n">Module</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">_name</span><span class="o">;</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kd">final</span> <span class="n">Version</span> <span class="n">_version</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// ........</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">SimpleModule</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Version</span> <span class="n">version</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="n">_name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">        <span class="n">_version</span> <span class="o">=</span> <span class="n">version</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// .......</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="n">SimpleModule</span> <span class="nf">addSerializer</span><span class="o">(</span><span class="n">JsonSerializer</span><span class="o">&lt;?&gt;</span> <span class="n">ser</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">_serializers</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">_serializers</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleSerializers</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">_serializers</span><span class="o">.</span><span class="na">addSerializer</span><span class="o">(</span><span class="n">ser</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="c1">// .......</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="jsonserialize-">@JsonSerialize 注解</h3>

<p>通过注解的方式注册序列化方法，对使用体验来说非常友好。但是会存在两个问题：首先，提供的序列化类的功能比较简单，然后，就是提供的粒度比较小，然后你想在全局的某个类型上都是有自定义序列化，则需要对每个对象类型上都需要标记注解。</p>

<p><code>@JsonSerialize</code> 注解的配置参数有很多种，但是我们只需要using这种来指明具体的自定义序列化类就可以了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>@JsonSerialize 注解 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Annotation used for configuring serialization aspects, by attaching</span>
</span><span class="line"><span class="cm"> * to &quot;getter&quot; methods or fields, or to value classes.</span>
</span><span class="line"><span class="cm"> * When annotating value classes, configuration is used for instances</span>
</span><span class="line"><span class="cm"> * of the value class but can be overridden by more specific annotations</span>
</span><span class="line"><span class="cm"> * (ones that attach to methods or fields).</span>
</span><span class="line"><span class="cm"> *&lt;p&gt;</span>
</span><span class="line"><span class="cm"> * An example annotation would be:</span>
</span><span class="line"><span class="cm"> *&lt;pre&gt;</span>
</span><span class="line"><span class="cm"> *  &amp;#64;JsonSerialize(using=MySerializer.class,</span>
</span><span class="line"><span class="cm"> *    as=MySubClass.class,</span>
</span><span class="line"><span class="cm"> *    include=JsonSerialize.Inclusion.NON_NULL,</span>
</span><span class="line"><span class="cm"> *    typing=JsonSerialize.Typing.STATIC</span>
</span><span class="line"><span class="cm"> *  )</span>
</span><span class="line"><span class="cm"> *&lt;/pre&gt;</span>
</span><span class="line"><span class="cm"> * (which would be redundant, since some properties block others:</span>
</span><span class="line"><span class="cm"> * specifically, &#39;using&#39; has precedence over &#39;as&#39;, which has precedence</span>
</span><span class="line"><span class="cm"> * over &#39;typing&#39; setting)</span>
</span><span class="line"><span class="cm"> *&lt;p&gt;</span>
</span><span class="line"><span class="cm"> * NOTE: since version 1.2, annotation has also been applicable</span>
</span><span class="line"><span class="cm"> * to (constructor) parameters</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * @since 1.1</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="nd">@Target</span><span class="o">({</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">,</span> <span class="n">ElementType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">,</span> <span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">,</span> <span class="n">ElementType</span><span class="o">.</span><span class="na">PARAMETER</span><span class="o">})</span>
</span><span class="line"><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class="line"><span class="nd">@JacksonAnnotation</span>
</span><span class="line"><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">JsonSerialize</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">    <span class="c1">// // // Annotations for explicitly specifying deserializer</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Serializer class to use for</span>
</span><span class="line"><span class="cm">     * serializing associated value. Depending on what is annotated,</span>
</span><span class="line"><span class="cm">     * value is either an instance of annotated class (used globablly</span>
</span><span class="line"><span class="cm">     * anywhere where class serializer is needed); or only used for</span>
</span><span class="line"><span class="cm">     * serializing property access via a getter method.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">JsonSerializer</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">using</span><span class="o">()</span> <span class="k">default</span> <span class="n">JsonSerializer</span><span class="o">.</span><span class="na">None</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// .......</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="customserializerfactory">CustomSerializerFactory接口</h3>

<p>最后一种注册自定义序列化类的方法就是通过使用自定义序列化factory工厂，也就是继承SerializerFactory类。</p>

<p>首先，我们使用或者扩展已经存在的<code>CustomSerializerFactory</code>。然后调用实例对象实现的<code>addSpecificMapping</code>或者<code>addGenericMapping</code>方法增加mapping关系，把自定义的序列化方法add到序列化列表中。最后，我们可以把这个工厂set到ObjectMapper实例对象上。</p>

<h2 id="a-idjacksoncustomizesamplejavaa"><a id="JacksonCustomizeSample">Java对象序列化自定义示例</a></h2>

<p>下面给出使用自定义序列化类来完成Java对象到JSON的转换工作。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Java对象序列化自定义示例 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonUtils</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">JsonUtils</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ObjectMapper</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="o">{</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">ALLOW_COMMENTS</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">ALLOW_UNQUOTED_FIELD_NAMES</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">ALLOW_SINGLE_QUOTES</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">ALLOW_UNQUOTED_CONTROL_CHARS</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">INTERN_FIELD_NAMES</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">CANONICALIZE_FIELD_NAMES</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">DeserializationConfig</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">setSerializationInclusion</span><span class="o">(</span><span class="n">JsonSerialize</span><span class="o">.</span><span class="na">Inclusion</span><span class="o">.</span><span class="na">NON_NULL</span><span class="o">);</span><span class="c1">// JSON节点不包含属性值为NULL</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">encode</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line"><span class="c1">//            SimpleModule SerializeModule = new SimpleModule(&quot;SerializeModule&quot;, new Version(1, 0, 0, null));</span>
</span><span class="line"><span class="c1">//            SerializeModule.addSerializer(new CustomizeJsonSerializerBaser(TypeB.class)); // assuming serializer declares correct class to bind to</span>
</span><span class="line"><span class="c1">//            objectMapper.registerModule(SerializeModule);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//            CustomSerializerFactory customSerializerFactory = new CustomSerializerFactory();</span>
</span><span class="line"><span class="c1">//            customSerializerFactory.addSpecificMapping(TypeB.class,new CustomizeJsonSerializerBaser(TypeB.class));</span>
</span><span class="line"><span class="c1">//            objectMapper.setSerializerFactory(customSerializerFactory);</span>
</span><span class="line">
</span><span class="line">            <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonGenerationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;encode(Object)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span> <span class="c1">//$NON-NLS-1$</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonMappingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;encode(Object)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span> <span class="c1">//$NON-NLS-1$</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;encode(Object)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span> <span class="c1">//$NON-NLS-1$</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：JsonUtils类封装了Jackson序列化操作。代码中，提供了通过Module接口方式和创建<code>CustomSerializerFactory</code>对象来完成注册加载。</p>

  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Java对象序列化自定义示例 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomizeJsonSerializer</span> <span class="kd">extends</span> <span class="n">JsonSerializer</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">serialize</span><span class="o">(</span><span class="n">List</span> <span class="n">value</span><span class="o">,</span> <span class="n">JsonGenerator</span> <span class="n">jgen</span><span class="o">,</span> <span class="n">SerializerProvider</span> <span class="n">provider</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span> <span class="o">{</span>
</span><span class="line">        <span class="n">jgen</span><span class="o">.</span><span class="na">writeStartArray</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">va</span> <span class="o">:</span><span class="n">value</span><span class="o">){</span>
</span><span class="line">            <span class="n">jgen</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">va</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">&quot;TestSerialize&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//jgen.writeString(Joiner.on(&quot;;&quot;).join(value));</span>
</span><span class="line">        <span class="n">jgen</span><span class="o">.</span><span class="na">writeEndArray</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomizeJsonSerializerBaser</span> <span class="kd">extends</span> <span class="n">SerializerBase</span><span class="o">&lt;</span><span class="n">TypeB</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 注解必须有默认构造韩式</span>
</span><span class="line">    <span class="kd">public</span> <span class="nf">CustomizeJsonSerializerBaser</span><span class="o">(){</span>
</span><span class="line">        <span class="kd">super</span><span class="o">(</span><span class="n">TypeB</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">protected</span> <span class="nf">CustomizeJsonSerializerBaser</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">TypeB</span><span class="o">&gt;</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="kd">super</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">protected</span> <span class="nf">CustomizeJsonSerializerBaser</span><span class="o">(</span><span class="n">JavaType</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">protected</span> <span class="nf">CustomizeJsonSerializerBaser</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">t</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">dummy</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">dummy</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">serialize</span><span class="o">(</span><span class="n">TypeB</span> <span class="n">value</span><span class="o">,</span> <span class="n">JsonGenerator</span> <span class="n">jgen</span><span class="o">,</span> <span class="n">SerializerProvider</span> <span class="n">provider</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonGenerationException</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">jgen</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line">       <span class="c1">// System.out.println(&quot;======================&quot;);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：这里提供了两种不同的方式开发自定义序列化方法。目前，从1.8开始，官方推荐使用第二种方式实现自定义序列化类，但是如果只需要简单的序列化功能，使用第一种完全可以满足需求。</p>

  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Java对象序列化自定义示例 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClassA</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">hobby</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">TypeB</span> <span class="n">b</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@JsonSerialize</span><span class="o">(</span><span class="n">using</span> <span class="o">=</span> <span class="n">CustomizeJsonSerializerBaser</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">TypeB</span> <span class="nf">getB</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">b</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setB</span><span class="o">(</span><span class="n">TypeB</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@JsonSerialize</span><span class="o">(</span><span class="n">using</span> <span class="o">=</span> <span class="n">CustomizeJsonSerializer</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getHobby</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">hobby</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHobby</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">hobby</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">hobby</span> <span class="o">=</span> <span class="n">hobby</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;ClassA{&quot;</span> <span class="o">+</span>
</span><span class="line">                <span class="s">&quot;name=&#39;&quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span><span class="line">                <span class="s">&quot;, age=&quot;</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span>
</span><span class="line">                <span class="s">&quot;, hobby=&quot;</span> <span class="o">+</span> <span class="n">hobby</span> <span class="o">+</span>
</span><span class="line">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TypeB</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">String</span> <span class="n">address</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">code</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">TypeB</span><span class="o">(</span><span class="n">String</span> <span class="n">address</span><span class="o">,</span> <span class="kt">int</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">code</span> <span class="o">=</span> <span class="n">code</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAddress</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">address</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddress</span><span class="o">(</span><span class="n">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCode</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">code</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCode</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">code</span> <span class="o">=</span> <span class="n">code</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;TypeB{&quot;</span> <span class="o">+</span>
</span><span class="line">                <span class="s">&quot;address=&#39;&quot;</span> <span class="o">+</span> <span class="n">address</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span><span class="line">                <span class="s">&quot;, code=&quot;</span> <span class="o">+</span> <span class="n">code</span> <span class="o">+</span>
</span><span class="line">                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonSerializeTest</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">ClassA</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ClassA</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">a</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class="line">        <span class="n">a</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;ketao1989&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="n">a</span><span class="o">.</span><span class="na">setHobby</span><span class="o">(</span><span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="s">&quot;dinner&quot;</span><span class="o">,</span><span class="s">&quot;swimming&quot;</span><span class="o">,</span><span class="s">&quot;music&quot;</span><span class="o">,</span><span class="s">&quot;programming&quot;</span><span class="o">));</span>
</span><span class="line">        <span class="n">a</span><span class="o">.</span><span class="na">setB</span><span class="o">(</span><span class="k">new</span> <span class="nf">TypeB</span><span class="o">(</span><span class="s">&quot;jiangxi&quot;</span><span class="o">,</span><span class="mi">320000</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">        <span class="n">String</span> <span class="n">aJsonStr</span> <span class="o">=</span> <span class="n">JsonUtils</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">aJsonStr</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">ClassA</span> <span class="n">aa</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ClassA</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">aa</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">19</span><span class="o">);</span>
</span><span class="line">        <span class="n">aa</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;kexiaoxiaoxi&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="n">aa</span><span class="o">.</span><span class="na">setHobby</span><span class="o">(</span><span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="s">&quot;MacOs&quot;</span><span class="o">,</span> <span class="s">&quot;Linux&quot;</span><span class="o">,</span> <span class="s">&quot;Windows&quot;</span><span class="o">,</span> <span class="s">&quot;Unknown&quot;</span><span class="o">));</span>
</span><span class="line">        <span class="n">aa</span><span class="o">.</span><span class="na">setB</span><span class="o">(</span><span class="k">new</span> <span class="nf">TypeB</span><span class="o">(</span><span class="s">&quot;beijing&quot;</span><span class="o">,</span> <span class="mi">100000</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">        <span class="n">String</span> <span class="n">aaJsonStr</span> <span class="o">=</span> <span class="n">JsonUtils</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">aa</span><span class="o">);</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">aaJsonStr</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">        <span class="n">String</span> <span class="n">bb</span> <span class="o">=</span> <span class="n">JsonUtils</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="k">new</span> <span class="nf">TypeB</span><span class="o">(</span><span class="s">&quot;beijing&quot;</span><span class="o">,</span><span class="mi">100000</span><span class="o">));</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bb</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：测试相关类。目前都是通过注解的方式，可以把相关的注释取消，测试其他实现方式完成自定义序列化功能。</p>
  </blockquote>
</blockquote>

<h2 id="a-idenda"><a id="End">总结</a></h2>

<ul>
  <li>
    <p>官方序列化简要介绍：<a href="http://wiki.fasterxml.com/JacksonHowToCustomSerializers">http://wiki.fasterxml.com/JacksonHowToCustomSerializers</a></p>
  </li>
  <li>
    <p>测试代码svn地址:<a href="http://code.taobao.org/svn/dubbocli/trunk">http://code.taobao.org/svn/dubbocli/trunk</a></p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git工具回滚线上错误提交]]></title>
    <link href="http://kxcoder.github.io/blog/2015/01/27/Git-Reset-Operate/"/>
    <updated>2015-01-27T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2015/01/27/Git-Reset-Operate</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>应用场景：自动部署系统发布后发现问题，需要回滚到某一个commit，再重新发布</p>

<p>原理：先将本地分支退回到某个commit，删除远程分支，再重新push本地分支</p>

<p>操作步骤：</p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>git命令 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">1. git checkout the_branch
</span><span class="line">
</span><span class="line">2. git pull
</span><span class="line">
</span><span class="line">3. git branch the_branch_backup <span class="c"># 备份一下这个分支当前的情况</span>
</span><span class="line">
</span><span class="line">4. git reset --hard the_commit_id <span class="c"># 把the_branch本地回滚到the_commit_id</span>
</span><span class="line">
</span><span class="line">5. git push origin :the_branch <span class="c"># 删除远程 the_branch</span>
</span><span class="line">
</span><span class="line">6. git push origin the_branch <span class="c"># 用回滚后的本地分支重新建立远程分支</span>
</span><span class="line">
</span><span class="line">7. git push origin :the_branch_backup <span class="c"># 如果前面都成功了，删除这个备份分支</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Tips：获取<code>the_commit_id</code> 使用<code>git log</code>，然后找到需要回滚到的那个提交的id hash值。</p>
  </blockquote>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring 中实现动态数据源]]></title>
    <link href="http://kxcoder.github.io/blog/2015/01/12/Spring-Dynamic-Data-Source-Guide/"/>
    <updated>2015-01-12T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2015/01/12/Spring-Dynamic-Data-Source-Guide</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#AbstractRoutingDataSource">Spring动态数据源接口</a></li>
  <li><a href="#Implementation">基于Spring动态数据源实现</a></li>
  <li><a href="#End">后记</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>前段时间业务上有一个需求，这个需求需要查询数据库，由于单表数据比较大，导致出现超过5s的慢查询。随后，为了快速修复慢查询对整个系统带来的影响，将查询的数据源通过简单粗暴的修改配置切换到从库上。此后，增加了memcached来缓存一些case下的查询数据，但是对从库配置实现方式，并没有去调整。</p>

<p>最近，有其他业务的数据查询也需要切换到从库上，因此对上述简单的配置实现进行了思考。</p>

<p>动态数据源，其实就是根据我们的代码实现和配置来选择不同的数据源进行sql操作。一般地，我们会把读操作移到从库中，从而减轻主库的压力，也就是所谓的读写分离。</p>

<!--more-->

<p>当然，对于一些使用数据库中间件来完成读写分离，而不需要业务层来做。这种方式，在大互联网公司中大量使用，比如360基于mysql-proxy的Atlas，阿里的DRDS(基于淘宝之前开源的TDDL）以及网易的分布式数据库中间件DDB等等。</p>

<p>对于一些未使用部署数据库中间件的公司，简单的方法就是在代码里面使用AOP方式通过对每个DAO层sql请求进行配置，来完成自定义的动态数据源。</p>

<h2 id="a-idabstractroutingdatasourcespringa"><a id="AbstractRoutingDataSource">Spring动态数据源接口</a></h2>

<p>Spring提供了一个抽象类<code>AbstractRoutingDataSource</code>，该类可以让开发人员快速实现数据源路由完成根据不同请求使用不同数据源的需求。</p>

<p><code>AbstractRoutingDataSource</code>抽象类，继承关系如下图：</p>

<p><img src="http://kxcoder.github.io/images/2015/01/ards.png" /></p>

<blockquote>
  <blockquote>
    <p>Notes: 抽象类最终继承<code>javax.sql.DataSource</code>类，该数据源类提供的一些接口就是我们最终需要实现的。</p>

  </blockquote>
</blockquote>

<p>DataSource接口主要提供了两个方法给开发者实现，因此实现动态数据源，我们只需要把这两个方法的实现，在调用数据库查询的时候，告知执行上下文，运行环境拿到对应的数据库连接，就可以连接到对应的数据库进行查询更新等操作。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>DataSource接口 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DataSource</span>  <span class="kd">extends</span> <span class="n">CommonDataSource</span><span class="o">,</span><span class="n">Wrapper</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="n">Connection</span> <span class="nf">getConnection</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SQLException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="n">Connection</span> <span class="nf">getConnection</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span>
</span><span class="line">    <span class="kd">throws</span> <span class="n">SQLException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>解析来，需要分析Spring提供给我们的抽象数据源路由类。既然<code>AbstractRoutingDataSource</code>简化了大家实现动态数据源功能的开发工作，那么该类必然会实现DataSource的两个接口方法。其需要决定，在什么情况下，使用哪个数据源的Connection连接。</p>

<blockquote>
  <blockquote>
    <p><code>AbstractRoutingDataSource</code>怎样来获取数据源连接呢？</p>
  </blockquote>
</blockquote>

<p>使用Map数据结构存放所有配置中使用的数据源，value是数据源DataSource对象，key则是根据我们自己的爱好来取名的，比如：master，slave等。这样，我们可以根据具体Dao方法配置的数据源key来获取对应的DataSource对象，从而告知运行环境该sql查询使用哪一个connection连接。</p>

<p>下面给出<code>AbstractRoutingDataSource</code>的部分实现：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AbstractRoutingDataSource </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * 抽象的javax.sql.DataSource实现，可以完成基于一个查找key来路由 #getConnection()到某些特性目标DataSourcesd的一个。</span>
</span><span class="line"><span class="cm"> * 一般通过绑定线程事务上下文来决定。</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractRoutingDataSource</span> <span class="kd">extends</span> <span class="n">AbstractDataSource</span> <span class="kd">implements</span> <span class="n">InitializingBean</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line"><span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">targetDataSources</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">Object</span> <span class="n">defaultTargetDataSource</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">lenientFallback</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">DataSourceLookup</span> <span class="n">dataSourceLookup</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">JndiDataSourceLookup</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">DataSource</span><span class="o">&gt;</span> <span class="n">resolvedDataSources</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">resolvedDefaultDataSource</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 设置目标DataSources的map映射，其中查找key作为 map的key。</span>
</span><span class="line"><span class="cm">     * 这个映射的value可以是对象的DataSource实例，或者是一个数据源 name的字符串（可以被DataSourceLookup解析）。</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * key可以是任意的类型，只要实现了普通的查找处理。</span>
</span><span class="line"><span class="cm">     * 具体的key表示形式，将会被resolveSpecifiedLookupKey和determineCurrentLookupKey处理</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTargetDataSources</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">targetDataSources</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">targetDataSources</span> <span class="o">=</span> <span class="n">targetDataSources</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 设置默认目标数据源。如果我们在map中找不到对应的key时，则会使用这里设置的默认数据源</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDefaultTargetDataSource</span><span class="o">(</span><span class="n">Object</span> <span class="n">defaultTargetDataSource</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">defaultTargetDataSource</span> <span class="o">=</span> <span class="n">defaultTargetDataSource</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 指定默认的DataSource，当通过指定的查找key不能找到对应的DataSource。</span>
</span><span class="line"><span class="cm">     * 如果为false，则直接返回失败，如果为true，则使用默认的数据源。默认为true</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLenientFallback</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">lenientFallback</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">lenientFallback</span> <span class="o">=</span> <span class="n">lenientFallback</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 设置DataSourceLookup的实现类，该实现类可以把字符串配置的数据源，解析成我们需要的DataSource类.默认使用JndiDataSourceLookup。</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * JndiDataSourceLookup方法使用ref bean方式获取配置文件中配置的dataSource数据源，也就是我们一般使用xml中配置datasource的方式就是jndi。</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDataSourceLookup</span><span class="o">(</span><span class="n">DataSourceLookup</span> <span class="n">dataSourceLookup</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">dataSourceLookup</span> <span class="o">=</span> <span class="o">(</span><span class="n">dataSourceLookup</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">dataSourceLookup</span> <span class="o">:</span> <span class="k">new</span> <span class="nf">JndiDataSourceLookup</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">targetDataSources</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Property &#39;targetDataSources&#39; is required&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">resolvedDataSources</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">DataSource</span><span class="o">&gt;(</span><span class="k">this</span><span class="o">.</span><span class="na">targetDataSources</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span> <span class="n">entry</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="na">targetDataSources</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Object</span> <span class="n">lookupKey</span> <span class="o">=</span> <span class="n">resolveSpecifiedLookupKey</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
</span><span class="line">            <span class="n">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="n">resolveSpecifiedDataSource</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class="line">            <span class="k">this</span><span class="o">.</span><span class="na">resolvedDataSources</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">lookupKey</span><span class="o">,</span> <span class="n">dataSource</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">defaultTargetDataSource</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">this</span><span class="o">.</span><span class="na">resolvedDefaultDataSource</span> <span class="o">=</span> <span class="n">resolveSpecifiedDataSource</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">defaultTargetDataSource</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 根据lookupKey获取map中存放的key值，一般无特性情况，两者是一样的</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">resolveSpecifiedLookupKey</span><span class="o">(</span><span class="n">Object</span> <span class="n">lookupKey</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">lookupKey</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 转换从获取map中存放的dataSource</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">protected</span> <span class="n">DataSource</span> <span class="nf">resolveSpecifiedDataSource</span><span class="o">(</span><span class="n">Object</span> <span class="n">dataSource</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IllegalArgumentException</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">dataSource</span> <span class="k">instanceof</span> <span class="n">DataSource</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="o">(</span><span class="n">DataSource</span><span class="o">)</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">dataSource</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">dataSourceLookup</span><span class="o">.</span><span class="na">getDataSource</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">dataSource</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">else</span> <span class="o">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class="line">                    <span class="s">&quot;Illegal data source value - only [javax.sql.DataSource] and String supported: &quot;</span> <span class="o">+</span> <span class="n">dataSource</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 这里就是抽象类给我们实现的接口方法，根据我们的配置上下文，抽象类决定实现哪个连接</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Connection</span> <span class="nf">getConnection</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">determineTargetDataSource</span><span class="o">().</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">Connection</span> <span class="nf">getConnection</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">determineTargetDataSource</span><span class="o">().</span><span class="na">getConnection</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">protected</span> <span class="n">DataSource</span> <span class="nf">determineTargetDataSource</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">resolvedDataSources</span><span class="o">,</span> <span class="s">&quot;DataSource router not initialized&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="n">Object</span> <span class="n">lookupKey</span> <span class="o">=</span> <span class="n">determineCurrentLookupKey</span><span class="o">();</span>
</span><span class="line">        <span class="n">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">resolvedDataSources</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">lookupKey</span><span class="o">);</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">dataSource</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">lenientFallback</span> <span class="o">||</span> <span class="n">lookupKey</span> <span class="o">==</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">dataSource</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">resolvedDefaultDataSource</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">dataSource</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Cannot determine target DataSource for lookup key [&quot;</span> <span class="o">+</span> <span class="n">lookupKey</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//这里是我们使用这个抽象类需要实现的方法，主要就是告诉该抽象类，当前需要使用的数据源的key是什么，这样抽象类就可以知道使用哪个数据库连接</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="n">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idimplementationspringa"><a id="Implementation">基于Spring动态数据源实现</a></h2>

<h3 id="section-1">3.1 实现抽象路由数据源类</h3>

<p>上一节介绍了抽象类<code>AbstractRoutingDataSource</code>，继承这个抽象类，我们实现动态数据源，只需要告诉抽象类，当前使用哪个key去获取数据源（determineCurrentLookupKey）。</p>

<p>在项目中，我们一般会指定哪些数据库操作需要使用哪个数据源，这个设置会存放在上下文中。也就是，我们可以使用ThreadLocal来存放当前数据操作使用的key。</p>

<p>因此，可以实现两个类，一个类实现<code>AbstractRoutingDataSource</code>抽象接口；一个来获取当前上下文中对应的key值。代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AbstractRoutingDataSource实现类 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DynamicDataSource</span> <span class="kd">extends</span> <span class="n">AbstractRoutingDataSource</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="n">DynamicDataSourceHolder</span><span class="o">.</span><span class="na">getDataSource</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DynamicDataSourceHolder</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">dsHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getDataSource</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">dsHolder</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">putDataSource</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">dsHolder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">(){</span>
</span><span class="line">        <span class="n">dsHolder</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通过上面两个类，我们就可以从上下文中获取当前操作需要使用的key值，然后通过实现的抽象路由数据源类来找到配置的DataSource，这样spring上下文就知道具体使用哪个connection连接来操作数据库sql了。</p>

<blockquote>
  <blockquote>
    <p>Tips: 这里需要注意ThreadLocal类中实现了clear方法，主要是在一个线程中会存在多个sql操作，可能设计不同的数据源，如果不清除当前sql的数据源，可能接下来的sql操作也会使用前一个操作设置的数据源连接，导致错误。</p>
  </blockquote>
</blockquote>

<h3 id="aop">3.2 实现AOP简化配置</h3>

<p>上一小节完成了怎样从上下文中获取设置的key，从而使用哪个数据源连接。但是，如何告知哪些操作使用哪个数据源key。</p>

<p>我们可以在每个需要使用动态数据源的地方，在具体业务代码的开始，把key值put到线程上下文中；然后在业务代码结束的地方，把上下文的设置清除掉。这样可以完成我们的需求，但是，对业务代码的侵入程度有点大哦。</p>

<p>上述这种场景，非常适合使用AOP技术完成。关于AOP介绍，可以参考：<a href="http://oss.org.cn/ossdocs/framework/spring/zh-cn/aop.html">http://oss.org.cn/ossdocs/framework/spring/zh-cn/aop.html</a></p>

<p>采用AOP技术，我们需要在配置文件（或注解方式）中设置切点pointCut，然后我们需要实现切点前调用的方法（threadLocal中存入数据源key），和切点后调用的方法（清除threadLocal数据）。</p>

<p>为了使用方便，我们使用注解的方式配置数据源key。注解的实现代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AOP注解 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class="line"><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
</span><span class="line"><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">DBSource</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 指定数据源使用哪个配置</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">String</span> <span class="nf">value</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下来，看看怎样实现AOP的before和after通知方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AOP DataSourceAspect </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DataSourceAspect</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">DataSourceAspect</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="n">JoinPoint</span> <span class="n">point</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">Object</span> <span class="n">target</span> <span class="o">=</span> <span class="n">point</span><span class="o">.</span><span class="na">getTarget</span><span class="o">();</span>
</span><span class="line">        <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">point</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">classz</span> <span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getInterfaces</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">parameterTypes</span> <span class="o">=</span> <span class="o">((</span><span class="n">MethodSignature</span><span class="o">)</span> <span class="n">point</span><span class="o">.</span><span class="na">getSignature</span><span class="o">()).</span><span class="na">getMethod</span><span class="o">().</span><span class="na">getParameterTypes</span><span class="o">();</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Method</span> <span class="n">m</span> <span class="o">=</span> <span class="n">classz</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">getMethod</span><span class="o">(</span><span class="n">method</span><span class="o">,</span> <span class="n">parameterTypes</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">m</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">m</span><span class="o">.</span><span class="na">isAnnotationPresent</span><span class="o">(</span><span class="n">DBSource</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="n">DBSource</span> <span class="n">data</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">DBSource</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">                <span class="n">DynamicDataSourceHolder</span><span class="o">.</span><span class="na">putDataSource</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">value</span><span class="o">());</span>
</span><span class="line">                <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;-------数据源：{}------&quot;</span><span class="o">,</span><span class="n">data</span><span class="o">.</span><span class="na">value</span><span class="o">());</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;=======================AOP注册拦截失败了！&quot;</span><span class="o">,</span><span class="n">e</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">(</span><span class="n">JoinPoint</span> <span class="n">point</span><span class="o">){</span>
</span><span class="line">
</span><span class="line">        <span class="n">Object</span> <span class="n">target</span> <span class="o">=</span> <span class="n">point</span><span class="o">.</span><span class="na">getTarget</span><span class="o">();</span>
</span><span class="line">        <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">point</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">classz</span> <span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getInterfaces</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">parameterTypes</span> <span class="o">=</span> <span class="o">((</span><span class="n">MethodSignature</span><span class="o">)</span> <span class="n">point</span><span class="o">.</span><span class="na">getSignature</span><span class="o">()).</span><span class="na">getMethod</span><span class="o">().</span><span class="na">getParameterTypes</span><span class="o">();</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Method</span> <span class="n">m</span> <span class="o">=</span> <span class="n">classz</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">getMethod</span><span class="o">(</span><span class="n">method</span><span class="o">,</span> <span class="n">parameterTypes</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">m</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">m</span><span class="o">.</span><span class="na">isAnnotationPresent</span><span class="o">(</span><span class="n">DBSource</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="n">DynamicDataSourceHolder</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class="line">                <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;-------清除ThreadLocal------&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;=======================AOP注册拦截失败了！&quot;</span><span class="o">,</span><span class="n">e</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，我们接下来，只需要在xml文件中配置相关切点和通知方法，即完成了整个动态数据源功能。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AOP 注册 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> <span class="c">&lt;!-- 配置数据库注解aop --&gt;</span>
</span><span class="line">    <span class="nt">&lt;aop:aspectj-autoproxy/&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- 配置数据库注解aop --&gt;</span>
</span><span class="line">    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSourceAspect&quot;</span> <span class="na">class=</span><span class="s">&quot;io.github.ketao1989.simple.service.dataSource.DataSourceAspect&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;aop:config&gt;</span>
</span><span class="line">        <span class="nt">&lt;aop:aspect</span> <span class="na">id=</span><span class="s">&quot;dsa&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSourceAspect&quot;</span><span class="nt">&gt;</span>
</span><span class="line">            <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">&quot;pc&quot;</span> <span class="na">expression=</span><span class="s">&quot;execution(* io.github.ketao1989.dao.*.*(..))&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">            <span class="nt">&lt;aop:before</span> <span class="na">pointcut-ref=</span><span class="s">&quot;pc&quot;</span> <span class="na">method=</span><span class="s">&quot;before&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">            <span class="nt">&lt;aop:after</span> <span class="na">pointcut-ref=</span><span class="s">&quot;pc&quot;</span> <span class="na">method=</span><span class="s">&quot;after&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">        <span class="nt">&lt;/aop:aspect&gt;</span>
</span><span class="line">    <span class="nt">&lt;/aop:config&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idenda"><a id="End">后记</a></h2>

<p>本文的代码和spring源码注释可以在github上查看：</p>

<p>Spring源码注释：<a href="https://github.com/ketao1989/cnSpring">https://github.com/ketao1989/cnSpring</a></p>

<p>spring 动态数据源项目：<a href="https://github.com/ketao1989/simpleSpringProject">https://github.com/ketao1989/simpleSpringProject</a></p>

<p>最后，本文借鉴参考了博客园中的一篇博客：<a href="http://www.cnblogs.com/xiyangyang/p/3580625.html">spring实现数据库读写分离</a>。感谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis Cookbook 之 基于Redis 实现倒序索引全文搜索]]></title>
    <link href="http://kxcoder.github.io/blog/2014/12/28/Redis-Cookbook-Inverted-Index-Text-Search/"/>
    <updated>2014-12-28T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2014/12/28/Redis-Cookbook-Inverted-Index-Text-Search</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Problem">问题</a></li>
  <li><a href="#Solution">解决方法</a></li>
  <li><a href="#Discussion">讨论</a></li>
  <li><a href="#InvertedIndex">倒序索引介绍</a></li>
</ol>

<h2 id="a-idproblema">1. <a id="Problem">问题</a></h2>

<p>倒序索引是一种索引数据结构，该索引存储单词（或者其他内容）到它们位于文件，档案或者数据库等位置之间的映射关系。这个通常被用来实现全文搜素服务，但是这要求在搜索之前这些文档的相关倒序索引就必须建立好。</p>

<p>因此，我们想要事业Redis来作为背后的存储系统来实现全文搜索服务。</p>

<!--more-->

<h2 id="a-idsolutiona">2. <a id="Solution">解决方法</a></h2>

<p>我们的实现，将为每一个单词，准备一个set集合，这些集合包含对应的文档的ID。为了允许快速搜索，我们将在开始之前为所有的文档建立索引。</p>

<p>搜索服务本身先分割请求为各个单词，然后获取每个单词匹配的集合set的交集，最后就可以返回包含所有我们搜索的单词的文档ID集。</p>

<h2 id="a-iddiscussiona">3. <a id="Discussion">讨论</a></h2>

<h3 id="section-1">3.1 建立索引</h3>

<p>首先，让我们假设我们有一百个允许我们搜索的文档或者网页，因此需要对它们建立倒序索引。为了建立索引，我们必须分割文本为分开的单词（分词操作），在此过程中，可能需要排除<code>stop word</code>以及长度小于3的单词。使用Ruby脚本，如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>建立索引 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">id_for_document</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">    <span class="n">doc_id</span> <span class="o">=</span> <span class="vg">$redis</span><span class="o">.</span><span class="n">hget</span><span class="p">(</span><span class="s2">&quot;documents&quot;</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">doc_id</span><span class="o">.</span><span class="n">nil?</span>
</span><span class="line">        <span class="n">doc_id</span> <span class="o">=</span> <span class="vg">$redis</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s2">&quot;next_document_id&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="vg">$redis</span><span class="o">.</span><span class="n">hset</span><span class="p">(</span><span class="s2">&quot;documents&quot;</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">doc_id</span><span class="p">)</span>
</span><span class="line">        <span class="vg">$redis</span><span class="o">.</span><span class="n">hset</span><span class="p">(</span><span class="s2">&quot;filenames&quot;</span><span class="p">,</span> <span class="n">doc_id</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="n">doc_id</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">STOP_WORDS</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;the&quot;</span><span class="p">,</span> <span class="s2">&quot;of&quot;</span><span class="p">,</span> <span class="s2">&quot;to&quot;</span><span class="p">,</span> <span class="s2">&quot;and&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;in&quot;</span><span class="p">,</span> <span class="s2">&quot;is&quot;</span><span class="p">,</span> <span class="s2">&quot;it&quot;</span><span class="p">,</span> <span class="s2">&quot;you&quot;</span><span class="p">,</span> <span class="s2">&quot;that&quot;</span><span class="o">]</span> <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line"><span class="n">doc_id</span> <span class="o">=</span> <span class="n">id_for_document</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">l</span><span class="o">|</span>
</span><span class="line">    <span class="n">l</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/ |,|\)|\(|\;|\./</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class="line">        <span class="n">continue</span> <span class="k">if</span> <span class="n">word</span><span class="o">.</span><span class="n">size</span> <span class="o">&lt;=</span> <span class="mi">3</span> <span class="o">||</span> <span class="no">STOP_WORDS</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class="line">        <span class="n">add_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">doc_id</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以，我们将过滤掉这些已经被加入到索引的单词，然后为我们的文档生成唯一的ID。此外，我们仍然需要完成上面的索引方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>建立索引 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">add_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">doc_id</span><span class="p">)</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">sadd</span><span class="p">(</span><span class="s2">&quot;word:</span><span class="si">#{</span><span class="n">word</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">doc_id</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因此，对于每一个我们在文档中发现的单词，我们都已经创建了一个新的集合set，该set包含被发现单词的文档ID集。</p>

<h3 id="section-2">3.2 搜索</h3>

<p>倒序索引的优势是查找的时候真的非常的快，因为绝大部分的工作在文档建索引的时候就已经完成了。为了搜索，我们仅仅需要，找到我们搜索查询里面单词对应的集合set的交集。下面的代码使用<code>redis-rb</code>接口完成查询redis服务器命令。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>搜索 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="o">*</span><span class="n">terms</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># 对每一查询单词求对应的id集合，然后求集合的交集</span>
</span><span class="line">    <span class="n">document_ids</span> <span class="o">=</span> <span class="vg">$redis</span><span class="o">.</span><span class="n">sinter</span><span class="p">(</span><span class="o">*</span><span class="n">terms</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="s2">&quot;word:</span><span class="si">#{</span><span class="n">t</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">})</span>
</span><span class="line">    <span class="c1"># 根据id集合，查找对应文件名集合</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">hmget</span><span class="p">(</span><span class="s2">&quot;filenames&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">document_ids</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes: <code>sinter方法</code>：求指定多个集合的交集</p>
  </blockquote>
</blockquote>

<h3 id="section-3">3.3 排序计分</h3>

<p>虽然前面的方法某种程度上是有限制的，并且非常简单；但是也是很容易扩展的。其中一件我们可以做的事情就是，当返回搜索结果的时候排序我们的文档，我们可以考虑计算一种分数：高分表示和我们搜索的查询更相关（比如查询单词位于文档的主题或者标题中）或者只是单纯地以为出现更高的次数。因此，我们将该索引方法如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>排序计分 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">add_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">doc_id</span><span class="p">)</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">zincrby</span><span class="p">(</span><span class="s2">&quot;word:</span><span class="si">#{</span><span class="n">word</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">doc_id</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>搜索的结构会变得更加复杂一点点：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>排序计分 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="o">*</span><span class="n">terms</span><span class="p">)</span>
</span><span class="line">    <span class="n">document_ids</span> <span class="o">=</span> <span class="vg">$redis</span><span class="o">.</span><span class="n">multi</span> <span class="k">do</span>
</span><span class="line">        <span class="vg">$redis</span><span class="o">.</span><span class="n">zinterstore</span><span class="p">(</span><span class="s2">&quot;temp_set&quot;</span><span class="p">,</span> <span class="n">terms</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="s2">&quot;word:</span><span class="si">#{</span><span class="n">t</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">})</span>
</span><span class="line">        <span class="vg">$redis</span><span class="o">.</span><span class="n">zrevrange</span><span class="p">(</span><span class="s2">&quot;temp_set&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span><span class="o">.</span><span class="n">last</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">hmget</span><span class="p">(</span><span class="s2">&quot;filenames&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">document_ids</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes: 这里使用了前面代码中多个方法，这是因为我们在有序的<code>temp_set</code>集合中有一个潜在的竞争条件。当你必须在任务其他人也尝试访问他们改变的数据之前，都使用这两个或者更多命令（在<code>ZREVRANGE</code>命令之前完成<code>ZINTERSTORE</code>命令），就会有潜在的竞争条件存在。</p>
  </blockquote>
</blockquote>

<p>为了避免在运行的时候出现竞争条件，当我们执行并发的搜索查询的时候，我们必须要么使用Redis的<code>MULTI/EXEC</code>命令，要么可能为每一个查询搜索产生一个唯一键。（在上例中，我们必须在我们自己之后清除并且删除临时的排序set集合）。</p>

<p><code>MULTI 和 EXEC</code>命令运行Redis中得事务行为。在<code>MULTI/EXEC</code>块中得命令保证运行的时候序列化串行，这意味着在块长度期间，没有其他的Redis客户端获取服务。在先前的例子里，它排除了在<code>temp_set</code>中的竞争条件，因为其他客户端不可能在<code>ZINTERSTORE</code>和<code>ZREVRANGE</code>操作之间修改值。在事务内部使用<code>DISCARD</code>就会放弃事务，丢弃所有的命令，然后返回一个正常状态。</p>

<p>由于命令只会在<code>EXEC</code>之后才会被调用执行，因此只有在那个时刻你才会接收事务内部所有命令做出的回答响应。因此，不可能会使用同一个事务的事务内部一个命令运行的响应结果。为了达到这点，你将需要使用<code>WATCH</code>.</p>

<p><code>redis-rb</code>没有直接的<code>EXEC</code>调用。换句话说，在提交给你的<code>multi方法</code>的块的开始和结束，表明也是事务的开始和结束。在你块结束的时候，<code>redis-rb</code>内部会调用<code>EXEC</code>。</p>

<blockquote>
  <blockquote>
    <p><em>Redis 命令</em>:</p>

    <ul>
      <li>
        <p><code>ZINCRBY zset-name increment element</code></p>

        <p>添加或者增长在有序集合中元素的分数。而使用ZADD和SADD，则如果集合不存在则将会被创建。</p>
      </li>
      <li>
        <p><code>ZINTERSTORE destination-zset number-of-zsets-to-intersect zset1 [zset2 ...] [WEIGHTS weight1 [weight2 ...]] [AGGREGATE SUM | MIN | MAX]</code></p>

        <p>计算给定的一些ZSETS集合的交集，然后把结果存储在新的ZSET中。此外，也可以使用增长因子或者聚合方法来获取新的集合。默认情况下，它是所有集合中分数的和，但是它也可以是最大或者最小值。</p>
      </li>
      <li>
        <p><code>ZREVRANGE zset-name start-index stop-index [WITHSCORES]</code></p>

        <p>返回在有序集合中给定范围内的元素，以递减的顺序。这个命令也可以选择在返回结果中包含元素的分数。ZRANGE命令执行相同的操作，但是是以递增的顺序。</p>
      </li>
    </ul>
  </blockquote>
</blockquote>

<h3 id="section-4">3.4 其他优化</h3>

<p>对于搜索，还有许多地方可以被优化：</p>

<ul>
  <li>
    <p><em>大小写敏感</em></p>

    <p>我们可以在建立索引之前单词和查询之前的搜索项，使用单词的大小写敏感。</p>
  </li>
  <li>
    <p><em>模糊搜索</em></p>

    <p>可能你也感兴趣实现模糊搜索作为你的搜索应用的一部分。它考虑基于通常错误的拼写单词。例如，在我们的例子中，在建立索引的时候也一起考虑为拼写错误单词的项建立索引，要么从一个列表中查找，要么为这个目标使用专门的算法（例如语音学上的算法）</p>
  </li>
  <li>
    <p><em>部分单词匹配</em></p>

    <p>虽然这个非常有用，但是将会增加索引内存的使用，并且给出一些你不想要的搜索结果。为了达到这个目的，你不得不分解你的单词为子串，然后为它们建索引。例如，为单词<code>matching</code>建索引，你不得不增加下面这些：</p>

    <pre><code>  matching
  mat 
  matc 
  match 
  matchi 
  matchin
</code></pre>

    <p>假设设置的最小长度为3个字符，并且也假设我们只匹配单词的前缀。如果我们有兴趣建立所有可能的组合，你需要为这个单词其他的子串也建立索引。</p>

    <p>使用有序集合对于这个和前面的模糊查找增强技术都是很有用的。你可以根据部分单词匹配和错误拼写单词而让它们<em>获取更低的分数来提高你的搜索结果质量</em>。</p>
  </li>
</ul>

<h2 id="a-idinvertedindexa">4. <a id="InvertedIndex">倒序索引介绍</a></h2>

<p>如果不使用倒序索引技术，在每次进行检索时，搜索引擎必须遍历每一个网页，查找网页中是否包含你指定的关键词。这个工作量是十分巨大的，主要原因有二：</p>

<ul>
  <li>
    <p>互联网的网页基数非常大；</p>
  </li>
  <li>
    <p>在每一个网页中检索是否含有指定的关键词不是一件简单的事情，它需要遍历网页的每个字符。
为了更好的建立被搜索的关键字和含有这些关键字的页面之间的映射关系，倒序索引产生了。简单的说，倒序索引的倒序，指的是这个索引是从关键词中查找对应的源的，而不是从源中检索对应的关键词。</p>
  </li>
</ul>

<p><em>举例如下</em>：为了检索关键词 A，首先从倒序索引的索引表中，找到关键词 A，然后查找 A 所在的页。由于倒序索引表排序后，在其中查找一个关键词可以使用二分查找，特别是在采用分布式数据、服务器集群、多线程技术等条件下，效率极高，所以，查找含有某个关键词的页变得非常简单。</p>

<p>假设数据库中含有1000000条记录，其中有 10 条记录符合搜寻条件，如果使用倒序索引，可以很快找到这些关键词，并且定位到含有这些关键词的十条记录；否则，需要遍历1000000条记录，效率的差异可想而知。</p>

<p>所以，倒序索引相当于一本出处大字典，查阅其中的每个词汇，都可以告诉你它的所有出处。</p>

<p>倒序索引中的关键词，一般是 <em>蜘蛛（Spider）</em>在网页爬行时对网页进行分词的结果。中文分词也是一件比较麻烦的事情。关于 <em>分词技术</em>，请查阅其他相关文章。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis Cookbook 之 基于Redis 实现一个聊天系统]]></title>
    <link href="http://kxcoder.github.io/blog/2014/12/20/Redis-Cookbook-Chat-System/"/>
    <updated>2014-12-20T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2014/12/20/Redis-Cookbook-Chat-System</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Problem">问题</a></li>
  <li><a href="#Solution">解决方法</a></li>
  <li><a href="#Discussion">讨论</a></li>
</ol>

<h2 id="a-idproblema">1. <a id="Problem">问题</a></h2>

<p>想要借助 <code>Redis</code>的<code>PUB/SUB</code>功能，使用node.js和Socket.io实现一个轻量级的实时聊天系统。</p>

<!--more-->

<h2 id="a-idsolutiona">2. <a id="Solution">解决方法</a></h2>

<p>由于Redis 天生就支持发布订阅(pub/sub)模式，所以我们可以很容易就使用<code>Node.js</code> 和 <code>Socket.IO</code>来快速创建一个实时的聊天系统。</p>

<p>发布订阅模式，其实就是接收者订阅某种特定模式的消息(比如，发送到某个指定channel的消息)，而发送者发送一个消息到消息云上。当一个消息到达云上的时候，订阅了这一种类的客户端就会获得消息。这中发布订阅模式，然后就可以允许发送者和接收客户端在不知道彼此的情况下，亲密结对交流。而他们仅仅需要以一种既定的模式发送消息和接收匹配类型的消息即可。</p>

<p><code>Redis</code>直接支持<code>pub/sub</code>模式，意味着其可以让接收客户端订阅指定的匹配消息频道channel，以及发布消息到一个给定的频道channel。这意味着，我们可以很简单地创建像<code>chat:cars</code>的聊车频道；或者像<code>chat:sausage</code>这种关于食物的谈话。此外，频道channel的命名跟Redis 的keySpace无关，所以不用担心会存在某些冲突情况。下面给出，Redis支持的一些命令：</p>

<pre><code>    * PUBLISH：发布消息到指定的频道；

    * SUBSCRIBE：订阅一个指定频道的消息；

    * UNSUBSCRIBE：取消订阅一个指定频道；

    * PSUBSCRIBE：订阅一个满足给定模式的频道集；

    * PUNSUBSCRIBE：取消订阅满足指定模式的频道集。
</code></pre>

<p>拥有上面这些知识，为在应用程序逻辑部分之间的终端用户或者流消息实现一个聊天和统计系统，其实还是很琐碎的。
<code>pub/sub</code>甚至可以被用来作为一个内建的强壮阻塞队列系统。接下来看看，如何去实现这么一个消息聊天系统吧。</p>

<p>在服务端，<code>Node.js</code> 和 <code>Socket.IO</code>将来实现网络层，然后Redis将作为一个在客户端之间递交消息的<code>pub/sub</code>功能的实现。在客户端，我们使用jQuery来处理消息，然后发送数据到服务器上。</p>

<h2 id="a-iddiscussiona">3. <a id="Discussion">讨论</a></h2>

<p>由于本文使用Node.js来实现一个聊天系统，所以我们假设你已经安装了node.js，并且我们也希望你可以按顺序安装支持我们聊天系统所需要的<code>node库(Socket.IO and Redis)</code>。</p>

<h3 id="section-1">3.1 初始设置</h3>
<p>安装所需要的第三方库：</p>

<pre><code>    npm install socket.io

    npm install redis
</code></pre>

<h3 id="section-2">3.2 服务端代码实现</h3>

<p>在服务端，我们正在运行<code>Redis</code>并且创建了一个运行node.js的javaScript文件。该代码主要负责建立到Redis服务之间的链接conn，然后一直监听来自clients端连接请求的端口。因此，我们创建一个javascript代码文件<code>chat.js</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>服务端代码实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line">
</span><span class="line">    <span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="nx">rc</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的代码，可以建立redis连接，和引入http,socket.io,redis库。接下来，我们需要设置一个简单地server，让客户端可以连接，请求数据：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>服务端代码实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line">
</span><span class="line">    <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class="line">        <span class="c1">// we may want to redirect a client that hits this page </span>
</span><span class="line">        <span class="c1">// to the chat URL instead</span>
</span><span class="line">        <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/html&#39;</span><span class="p">});</span>
</span><span class="line">        <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;&lt;h1&gt;Hello world&lt;/h1&gt;&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Set up our server to listen on 8000 and serve socket.io server.listen(8000);</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">socketio</span> <span class="o">=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下来，建立连接了就可以开始使用node.js来完成开发连接redis，客户端订阅某个channel，接收到消息处理动作等功能。所以，接下来使用redis来完成订阅消息：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>服务端代码实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="js"><span class="line">
</span><span class="line">    <span class="c1">// if the Redis server emits a connect event, it means we&#39;re ready to work, </span>
</span><span class="line">    <span class="c1">// which in turn means we should subscribe to our channels. Which we will. rc.on(&quot;connect&quot;, function() {</span>
</span><span class="line">        <span class="nx">rc</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s2">&quot;chat&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="c1">// we could subscribe to more channels here </span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">        <span class="c1">// When we get a message in one of the channels we&#39;re subscribed to, // we send it over to all connected clients.</span>
</span><span class="line">    <span class="nx">rc</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">channel</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Sending: &quot;</span> <span class="o">+</span> <span class="nx">message</span><span class="p">);</span>
</span><span class="line">        <span class="nx">socketio</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span><span class="line">    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ok，如你所见，这段代码非常简单。其实现，就是我们在特定的channel监听消息，当有消息接收到的时候，服务端就广播给所有订阅该消息的客户端。</p>

<h3 id="section-3">3.2 客户端代码实现</h3>

<p>完成了server端部分的开发，接下来完成一个小页面来连接Node.js，建立客户端的Socket.IO，然后处理进来和出去的消息。所以我们创建了一个很简单的<code>HTML5</code>页面：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>客户端代码实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">
</span><span class="line">    <span class="cp">&lt;!doctype html&gt;</span> <span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;head&gt;</span>
</span><span class="line">    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;title&gt;</span>Chat with Redis<span class="nt">&lt;/title&gt;</span> <span class="nt">&lt;/head&gt;</span>
</span><span class="line">    <span class="nt">&lt;body&gt;</span>
</span><span class="line">    <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;messages&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- chat messages go here --&gt;</span> <span class="nt">&lt;/ul&gt;</span>
</span><span class="line">    <span class="nt">&lt;/body&gt;</span> <span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在我们需要引入两个非常重要的库来获得想要的功能：jQuery 和 Socket.IO：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>客户端代码实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://localhost:8000/socket.io/socket.io.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在我们准备好了从页面连接Node.js，然后开始监听处理消息。在页面的头部增加下面的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>客户端代码实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">
</span><span class="line">    <span class="nt">&lt;script&gt;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">port</span><span class="o">:</span> <span class="mi">8000</span> <span class="p">});</span>
</span><span class="line">    <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class="line">        <span class="kd">var</span> <span class="nx">li</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Element</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">insert</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line">        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;messages&#39;</span><span class="p">).</span><span class="nx">insert</span><span class="p">({</span><span class="nx">top</span><span class="o">:</span> <span class="nx">li</span><span class="p">});</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">    <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个javascript代码片段表示，客户端使用<code>Socket.IO</code>连接我们的node.js实例8000端口，然后开始监听消息事件。当一个消息到达时，它创建一个新的list元素，并且把它添加到我们事先已经建好的未排序list中。</p>

<p>到这里，还剩下的，就是客户端发送消息了。和server端一样，我们使用<code>Socket.IO emit</code>方法，如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>客户端代码实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">
</span><span class="line">    <span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">&quot;chatform&quot;</span> <span class="na">action=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;chattext&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line">        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Send&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;/form&gt;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;script&gt;</span>
</span><span class="line">    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#chatform&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;chattext&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span><span class="line">        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;chattext&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span> <span class="c1">// cleanup the field </span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">    <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当一个用户写东西到<code>form</code>中，然后点击<code>Send</code>，jQuery将会使用我们的socket变量emit发送一个消息事件到服务器端，服务器然后会广播这条消息给其他所有人。最后返回false表示消息事件真的被发送提交出去了。提交的这个动作是由<code>Socket.IO</code>完成的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava LocalCache 缓存介绍及实现源码深入剖析]]></title>
    <link href="http://kxcoder.github.io/blog/2014/12/19/Guava-Cache-Guide-And-Implement-Analyse/"/>
    <updated>2014-12-19T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2014/12/19/Guava-Cache-Guide-And-Implement-Analyse</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#CacheGuide">Guava Cache 介绍</a></li>
  <li><a href="#PrepareKnowledge">Guava Cache 分析前置知识</a></li>
  <li><a href="#CacheBuilder">CacheBuilder实现</a></li>
  <li><a href="#LocalCache">LocalCache实现</a></li>
  <li><a href="#CacheOverWrite">Guava Cache扩展</a></li>
  <li><a href="#End">Guava Cache 总结</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p><code>Guava</code>是Google开源出来的Java常用工具集库，包括集合，缓存，并发，字符串，I/O操作等在Java开发过程中经常需要去实现的工具类。</p>

<p>在平常开发过程中，很多情况需要使用缓存来避免频繁SQL查询或者其他耗时操作，会采取缓存这些操作结果给下一次请求使用。如果我们的操作结果是一直不改变的，其实我们可以使用<code>ConcurrentHashMap</code>来存储这些数据；但是如果这些结果在随后时间内会改变或者我们希望存放的数据所占用的内存空间可控，这样就需要自己来实现这种数据结构了。</p>

<p>显然，对于这种十分常见的需求，<code>Guava</code>提供了自己的工具类实现。<code>Guava Cache</code>提供了一般我们使用缓存所需要的几乎所有的功能，主要有：</p>

<!--more-->

<pre><code>* 自动将entry节点加载进缓存结构中；
    
* 当缓存的数据已经超过预先设置的最大值时，使用LRU算法移除一些数据；
    
* 具备根据entry节点上次被访问或者写入的时间来计算过期机制；
    
* 缓存的key被封装在`WeakReference`引用内；
    
* 缓存的value被封装在`WeakReference`或者`SoftReference`引用内；
    
* 移除entry节点，可以触发监听器通知事件；
    
* 统计缓存使用过程中命中率/异常率/未命中率等数据。
</code></pre>

<p>此外，<code>Guava Cache</code>其核心数据结构大体上和<code>ConcurrentHashMap</code>一致，具体细节上会有些区别。功能上，ConcurrentMap会一直保存所有添加的元素，直到显式地移除。相对地，<code>Guava Cache</code>为了限制内存占用，通常都设定为自动回收元素。在某些场景下，尽管它不回收元素，也是很有用的，因为它会自动加载缓存。</p>

<h2 id="a-idcacheguideguava-cache-a"><a id="CacheGuide">Guava Cache 介绍</a></h2>

<p>在介绍<code>Guava Cache</code>使用之前，先需要引入下官方推荐的使用场景：</p>

<pre><code>* 愿意消耗一些内存空间来提升速度；
    
* 能够预计某些key会被查询一次以上；
    
* 缓存中存放的数据总量不会超出内存容量(`Guava Cache`是单个应用运行时的本地缓存)。
</code></pre>

<p>不管性能，还是可用性来说，<code>Guava Cache</code>绝对是本地缓存类库中首要推荐的工具类。其提供的<code>Builder模式</code>的CacheBuilder生成器来创建缓存的方式，十分方便，并且各个缓存参数的配置设置，类似于函数式编程的写法，也特别棒。</p>

<p><code>Guava Cache</code>的官方文档地址：<a href="http://code.google.com/p/guava-libraries/wiki/CachesExplained">http://code.google.com/p/guava-libraries/wiki/CachesExplained</a>. 该文档对<code>Cache</code>有详细的介绍。
<br /></p>

<blockquote>
  <blockquote>
    <p>Tips：在官方文档中，提到三种方式加载<code>&lt;key,value&gt;</code>到缓存中。分别是:</p>

    <ol>
      <li>
        <p><code>LoadingCache</code>在构建缓存的时候，使用build方法内部调用<code>CacheLoader</code>方法加载数据；</p>
      </li>
      <li>
        <p>在使用get方法的时候，如果缓存不存在该key或者key过期等，则调用<code>get(K, Callable&lt;V&gt;)</code>方式加载数据；</p>
      </li>
      <li>
        <p>使用粗暴直接的方式，直接想缓存中put数据。</p>
      </li>
    </ol>

    <p>需要说明的是，如果不能通过key快速计算出value时，则还是不要在初始化的时候直接调用<code>CacheLoader</code>加载数据到缓存中。</p>
  </blockquote>
</blockquote>

<h3 id="guava-cache">2.1 Guava Cache使用示例</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Cache使用示例 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.concurrent.Callable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">com.google.common.cache.Cache</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">com.google.common.cache.CacheBuilder</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">com.google.common.cache.CacheLoader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">com.google.common.cache.LoadingCache</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">com.google.common.cache.RemovalListener</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">com.google.common.cache.RemovalNotification</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @author tao.ke Date: 14-12-20 Time: 下午1:55</span>
</span><span class="line"><span class="cm"> * @version \$Id$</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CacheSample</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">CacheSample</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Callable形式的Cache</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Cache</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">CALLABLE_CACHE</span> <span class="o">=</span> <span class="n">CacheBuilder</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class="line">            <span class="o">.</span><span class="na">expireAfterWrite</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">).</span><span class="na">maximumSize</span><span class="o">(</span><span class="mi">1000</span><span class="o">).</span><span class="na">recordStats</span><span class="o">()</span>
</span><span class="line">            <span class="o">.</span><span class="na">removalListener</span><span class="o">(</span><span class="k">new</span> <span class="n">RemovalListener</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRemoval</span><span class="o">(</span><span class="n">RemovalNotification</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">notification</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Remove a map entry which key is {},value is {},cause is {}.&quot;</span><span class="o">,</span> <span class="n">notification</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span>
</span><span class="line">                            <span class="n">notification</span><span class="o">.</span><span class="na">getValue</span><span class="o">(),</span> <span class="n">notification</span><span class="o">.</span><span class="na">getCause</span><span class="o">().</span><span class="na">name</span><span class="o">());</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}).</span><span class="na">build</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// CacheLoader形式的Cache</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">LoadingCache</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">LOADER_CACHE</span> <span class="o">=</span> <span class="n">CacheBuilder</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class="line">            <span class="o">.</span><span class="na">expireAfterAccess</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">).</span><span class="na">maximumSize</span><span class="o">(</span><span class="mi">1000</span><span class="o">).</span><span class="na">recordStats</span><span class="o">().</span><span class="na">build</span><span class="o">(</span><span class="k">new</span> <span class="n">CacheLoader</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">public</span> <span class="n">String</span> <span class="nf">load</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="n">key</span> <span class="o">+</span> <span class="k">new</span> <span class="nf">Date</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">});</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">times</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">times</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">900</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">            <span class="n">String</span> <span class="n">valueCallable</span> <span class="o">=</span> <span class="n">CALLABLE_CACHE</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="s">&quot;key&quot;</span> <span class="o">+</span> <span class="k">new</span> <span class="nf">Date</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">});</span>
</span><span class="line">
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Callable Cache -----&gt;&gt;&gt;&gt;&gt; key is {},value is {}&quot;</span><span class="o">,</span> <span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="n">valueCallable</span><span class="o">);</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Callable Cache -----&gt;&gt;&gt;&gt;&gt; stat miss:{},stat hit:{}&quot;</span><span class="o">,</span><span class="n">CALLABLE_CACHE</span><span class="o">.</span><span class="na">stats</span><span class="o">().</span><span class="na">missRate</span><span class="o">(),</span><span class="n">CALLABLE_CACHE</span><span class="o">.</span><span class="na">stats</span><span class="o">().</span><span class="na">hitRate</span><span class="o">());</span>
</span><span class="line">
</span><span class="line">            <span class="n">String</span> <span class="n">valueLoader</span> <span class="o">=</span> <span class="n">LOADER_CACHE</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Loader Cache -----&gt;&gt;&gt;&gt;&gt; key is {},value is {}&quot;</span><span class="o">,</span> <span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="n">valueLoader</span><span class="o">);</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Loader Cache -----&gt;&gt;&gt;&gt;&gt; stat miss:{},stat hit:{}&quot;</span><span class="o">,</span><span class="n">LOADER_CACHE</span><span class="o">.</span><span class="na">stats</span><span class="o">().</span><span class="na">missRate</span><span class="o">(),</span><span class="n">LOADER_CACHE</span><span class="o">.</span><span class="na">stats</span><span class="o">().</span><span class="na">hitRate</span><span class="o">());</span>
</span><span class="line">
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>上述代码，简单的介绍了<code>Guava Cache </code>的使用，给了两种加载构建Cache的方式。在<code>Guava Cache</code>对外提供的方法中， <code>recordStats</code>和<code>removalListener</code>是两个很有趣的接口，可以很好的帮我们完成统计功能和Entry移除引起的监听触发功能。</p>

    <p>此外，虽然在<code>Guava Cache</code>对外方法接口中提供了丰富的特性，但是如果我们在实际的代码中不是很有需要的话，建议不要设置这些属性，因为会额外占用内存并且会多一些处理计算工作，不值得。</p>

  </blockquote>
</blockquote>

<h2 id="a-idprepareknowledgeguava-cache-a"><a id="PrepareKnowledge">Guava Cache 分析前置知识</a></h2>

<p><code>Guava Cache</code>就是借鉴Java的<code>ConcurrentHashMap</code>的思想来实现一个本地缓存，但是它内部代码实现的时候，还是有很多非常精彩的设计实现，并且如果对<code>ConcurrentHashMap</code>内部具体实现不是很清楚的话，通过阅读<code>Cache</code>的实现，对<code>ConcurrentHashMap</code>的实现基本上会有个全面的了解。</p>

<h3 id="builder">3.1 Builder模式</h3>

<p>设计模式之 Builder模式 在Guava中很多地方得到的使用。<code>Builder模式</code>是将一个复杂对象的构造与其对应配置属性表示的分离，也就是可以使用基本相同的构造过程去创建不同的具体对象。</p>

<p>Builder模式典型的结构图如：</p>

<p><img src="http://kxcoder.github.io/images/2014/12/builder.png" /></p>

<pre><code>Builder：为创建一个Product对象的各个部件制定抽象接口；

ConcreteBuilder：具体的建造者，它负责真正的生产；

Director：导演, 建造的执行者，它负责发布命令；

Product：最终消费的产品
</code></pre>

<p>各类之间的交互关系如下图：</p>

<p><img src="http://kxcoder.github.io/images/2014/12/builder-relation.png" /></p>

<p><code>Builder模式</code>的关键是其中的Director对象并不直接返回对象，而是通过（BuildPartA，BuildPartB，BuildPartC）来一步步进行对象的创建。当然这里Director可以提供一个默认的返回对象的接口（即返回通用的复杂对象的创建，即不指定或者特定唯一指定BuildPart中的参数）。</p>

<blockquote>
  <blockquote>
    <p>Tips：在<code>Effective Java</code>第二版中，<code>Josh Bloch</code>在第二章中就提到使用Builder模式处理需要很多参数的构造函数。他不仅展示了Builder的使用，也描述了相这种方法相对使用带很多参数的构造函数带来的好处。</p>

  </blockquote>
</blockquote>

<p>下面给出一个使用Builder模式来构造对象，这种方式优点和不足（代码量增加）非常明显。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Builder模式使用示例 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">org.apache.commons.lang3.builder.ToStringBuilder</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.commons.lang3.builder.ToStringStyle</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @author tao.ke Date: 14-12-22 Time: 下午8:57</span>
</span><span class="line"><span class="cm"> * @version \$Id$</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BuilderPattern</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 姓名</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 年龄</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 性别</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">Gender</span> <span class="n">gender</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">BuilderPattern</span> <span class="nf">newBuilder</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">BuilderPattern</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">BuilderPattern</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">BuilderPattern</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class="line">        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">BuilderPattern</span> <span class="nf">setGender</span><span class="o">(</span><span class="n">Gender</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span><span class="line">        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">ToStringBuilder</span><span class="o">.</span><span class="na">reflectionToString</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">ToStringStyle</span><span class="o">.</span><span class="na">SHORT_PREFIX_STYLE</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">enum</span> <span class="n">Gender</span> <span class="o">{</span>
</span><span class="line">        <span class="n">MALE</span><span class="o">,</span> <span class="n">FEMALE</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">BuilderPattern</span> <span class="n">bp</span> <span class="o">=</span> <span class="n">BuilderPattern</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">setAge</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;zhangsan&quot;</span><span class="o">).</span><span class="na">setGender</span><span class="o">(</span><span class="n">Gender</span><span class="o">.</span><span class="na">FEMALE</span><span class="o">);</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bp</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="java">3.2 Java对象引用</h3>

<p>对象引用之前需要先看看对象的访问定位。</p>

<p>当虚拟机执行时，遇到一条new指令时，首先会去检查这个指令在常量池中是否已经存在该类对应的符号引用，并且检查这个符号引用对应的类是否已经被加载，解析和初始化。如果没有，则执行相应的类加载过程。</p>

<p>然后虚拟机为新的对象分配内存。虚拟机根据我们配置的垃圾收集器规则采取不同的分配方式，包括：指针碰撞分配方式和空闲列表分配方式。</p>

<p>内存分配完成之后，开始执行init方法。init方法会按照代码的指定过程来初始化，对一些类属性进行赋值。</p>

<p>然后，我们需要访问这个对象，怎么办？在Java运行时内存区域模型中，线程拥有一个虚拟机栈，这个栈会有一个本地方法表，这个表内部就会存放一个引用地址，如下图所示（HotSpot虚拟机采用这种方式，还有另外一种形式这里不做介绍）：</p>

<p><img src="http://kxcoder.github.io/images/2014/12/reference.png" /></p>

<p>在JDK 1.2之前，Java中关于引用的定义是：如果reference类型的数据中存储的数值表示的是另外一块内存的起始地址，就说明这块内存称为引用。这种定义表明对象只有两种：被引用的对象和没有被引用的对象。这种方式对于垃圾收集GC来说，效果并不是很好，因为很多对象划为为被引用和非被引用都不是很重要，这种现象就无法划分。垃圾收集的时候，就无法更好更精准的划为可GC的对象。</p>

<p>因此，在JDK 1.2之后，Java对引用的概念进行扩展，有如下四种类型的引用（按强度排序）：</p>

<pre><code>* 强引用(Strong Reference)

* 软引用(SoftReference)

* 弱引用(WeakReference)

* 虚引用(PhantomReference)
</code></pre>

<ol>
  <li>
    <p><em>强引用</em>：强引用在程序代码中随处可见，十分普遍。比如： <code>Object object = new Object()</code> ，这类引用只要还存在，垃圾收集器就永远不会回收掉这类引用的对象。</p>
  </li>
  <li>
    <p><em>软引用</em>：软引用用来描述一些虽然有用但是并不是必须的对象。对于软引用关联的对象，在系统将可能发生内存溢出异常之前，垃圾收集器将会把这些引用的对象进行第二次回收。只有这次垃圾回收还没有足够的内存的时候，才会抛出内存溢出异常。</p>
  </li>
  <li>
    <p><em>弱引用</em>：弱引用是一种比软引用强度还要弱的引用，因此这些引用的对象也是非必须的。但是，对于弱引用的对象只能生存到下一次垃圾回收发生之前。当垃圾收集工作开始后，无论当前的内存是否够用，都会把这些弱引用的对象回收掉。</p>
  </li>
  <li>
    <p><em>虚引用</em>：虚引用是最弱的一种引用。一个对象是否被虚引用关联，完全不会对其生存时间构成影响，也无法通过虚引用获得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</p>
  </li>
</ol>

<blockquote>
  <blockquote>
    <p>Notes：关于引用，最典型的使用就是对HashMap的自定义开发，包括JDK内部也存在。</p>

    <ol>
      <li>
        <p><code>Strong Reference</code>—&gt; <code>HashMap</code>：默认情况下，HashMap使用的引用就是强引用，也就是说垃圾收集的时候，Map中引用的对象不会被GC掉。</p>
      </li>
      <li>
        <p><code>Weak Reference</code>—&gt; <code>WeakHashMap</code>：JDK中还有一种基于引用类型实现的HashMap，WeakHashMap。当节点的key不在被使用的时候，该entry就会被自动回收掉。因此，对于一个mapping映射，不能保证接下来的GC不会把这个entry回收掉。</p>
      </li>
      <li>
        <p><code>Soft Reference</code>—&gt; <code>SoftHashMap</code>：在JDK中没有提供基于软引用实现的HashMap，原因可能是一般大家都不能期待出现内存溢出，而当出现内存溢出，一点点的软引用GC余下的内存空间，肯定不会起到关键作用。但是，虽然不广泛，在<code>aspectj</code>提供的<code>ClassLoaderRepository</code>类中实现了SoftHashMap，作为一个基于ClassLoader字节码实现的方法，在OOM的时候，显然需要考虑通过GC释放内存空间，并且SoftHashMap在内部是作为缓存使用。</p>
      </li>
    </ol>
  </blockquote>
</blockquote>

<h3 id="jmm">3.3 JMM可见性</h3>

<p>在<a href="http://ketao1989.github.io/posts/java-some-tips.html">Java一些小Tips</a>博文中，简单地介绍了JMM模型，但是Java内存模型涉及了大量的规则内容指令。</p>

<p><em>什么叫可见性？</em></p>

<p>可见性就是，当程序中一个线程修改了某个全局共享变量的值之后，其他使用该值的线程都可以获知，在随后他们读该共享变量的时候，查询的都是最新的改改修改的值。</p>

<p>在上一篇博文中，我们给出了内存模型访问的图。根据图可以了解，一个线程上修改共享变量，这个变量的最新的值不会立刻写入到共享内存中，还是暂时存放在线程本地缓存，然后某一时刻触发写入到共享内存中。可见性就是，当我们对共享变量修改的时候，立刻把新值同步到主内存中，然后该变量被读的时候从主内存获取最新的值确保所有对该变量的读取操作，总是获取最新最近修改的值。</p>

<p><em>为什么会有可见性问题？</em></p>

<p>学过计算机组成原理的同学都知道，在现代CPU结构中，存在多级缓存架构，如下图所示：</p>

<p><img src="http://kxcoder.github.io/images/2014/12/cpu_cache.jpg" /></p>

<p>同样，在Java虚拟机中分为两种内存：</p>

<pre><code>&gt;&gt; 主内存(Main Memory)：所有线程共享的内存区域，虚拟机内存的一部分。

&gt;&gt; 工作内存(Working Memory)：线程自己操作的内存区域，线程直接无法访问对方的工作内存区域。
</code></pre>

<p>之所以分为两部分内存区域，原因和CPU很类似。为了线程可以快速访问操作变量，当线程全部直接操作共享内存，则会导致大量线程之间竞争等问题出现，影响效率。</p>

<p>关于Java中线程，工作内存，主内存之间的交互关系如下图（深入理解Java虚拟机配图）：</p>

<p><img src="http://kxcoder.github.io/images/2014/12/java_mmm.png" /></p>

<p>为了保证共享变量可见性，除了上篇博文中介绍的<code>volatile</code>之外，还有<code>synchronized</code>和<code>final</code>关键字。</p>

<p><em>synchronized</em>：执行synchronized代码块时，在对变量执行unlock操作之前，一定会把此变量写入到主内存中。<em>final</em>：该关键字修饰的变量在构造函数中初始化完成之后（不考虑指针逃逸，变量初始化一半的问题），其他线程就可以看到这个final变量的值，并且由于变量不能修改，所以能确保可见性。</p>

<blockquote>
  <blockquote>
    <p>Notes：<em>保证JMM可见性，并不代表确保变量的线程安全性！！！</em></p>

  </blockquote>
</blockquote>

<h3 id="section-1">3.4 指令重排序</h3>

<p>重排序通常是编译器或者运行时环境为了优化程序性能而采取的对指令进行重新排序执行的一种手段。重排序分为两类：编译期重排序和运行期重排序，分别对应编译时和运行时环境。</p>

<p>编译期重排序主要的原因是CPU导致的。在编译期的微指令翻译阶段，许多操作同时执行，并且执行的顺序是乱序的，所以有可能出现一条指令读一个寄存器的同时，另外一条指令正在对这个寄存器进行写操作。此外，翻译之后，就是重排序缓存阶段。不同的微指令在不同的执行单元中同时执行，而且每个执行单元都全速运行。只要当前微指令所需要的数据就绪，而且有空闲的执行单元，微指令就可以立即执行，有时甚至可以跳过前面还未就绪的微指令。通过这种方式，需要长时间运行的操作不会阻塞后面的操作，流水线阻塞带来的损失被极大的减小了。</p>

<p>运行期JVM会对指令进行重排序以提高程序性能，当然其会通过<code>happens-before</code>原则保证顺序执行语义，也就是不会随便对代码指令进行重排序。</p>

<p>借用一个例子说明（来源<a href="http://www.infoq.com/cn/articles/java-memory-model-2">http://www.infoq.com/cn/articles/java-memory-model-2</a>）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>指令重排序 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">ReorderExample</span> <span class="o">{</span>
</span><span class="line"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line"><span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writer</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>                   <span class="c1">//1</span>
</span><span class="line">    <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>             <span class="c1">//2</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">Public</span> <span class="kt">void</span> <span class="nf">reader</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>                <span class="c1">//3</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span>  <span class="n">a</span> <span class="o">*</span> <span class="n">a</span><span class="o">;</span>        <span class="c1">//4</span>
</span><span class="line">        <span class="err">……</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上述的代码会造成很多的不同结果，由于数据的可见性问题，或者就是重排序。比如重排序后执行顺序如下，则会存在问题。</p>

<p><img src="http://kxcoder.github.io/images/2014/12/reorder.png" /></p>

<h3 id="section-2">3.5 锁细化</h3>

<p><em>锁粒度细化，是所有保证线程安全的程序方法优化的必经之路</em>。</p>

<p>这两年十分火的用于线程间通信的高性能消息组件，其虽然有很多创新的设计，但是很多优化的基本就是，锁细化，包括核心数据结构 <code>Ringbuffer</code>。<a href="http://ifeve.com/dissecting-disruptor-whats-so-special/">剖析Disruptor:为什么会这么快？（一）Ringbuffer的特别之处</a></p>

<p>此外，在Linux内核2.6之后采用的RCU锁机制，本质上也是锁粒度细化。<a href="https://www.ibm.com/developerworks/cn/linux/l-rcu/">Linux 2.6内核中新的锁机制–RCU</a></p>

<p>在Java语言中，最经典的锁细化提高多线程并发性能的案例，就是<code>ConcurrentHashMap</code>，其采用多个<code>segment</code>，每个segment对应一个锁，来分散全局锁带来的性能损失。从而，当我们put某一个entry的时候，在实现的时候，一般只需要拥有某一个segment锁就可以完成。</p>

<p>关于普通的<code>HashTable</code>结构和<code>ConcurrentHashMap</code>结构，借用一张图来说明：</p>

<p><img src="http://kxcoder.github.io/images/2014/12/currentHashMap.jpg" /></p>

<p>从结构上，可以很显而易见的看出两者的区别。所以，就锁这个层面上，concurrentHashMap就会比HashTable性能好。</p>

<h3 id="guava-listenablefuture">3.6 Guava ListenableFuture接口</h3>

<p>我们强烈地建议你在代码中多使用<code>ListenableFuture</code>来代替JDK的 Future, 因为：</p>

<ul>
  <li>
    <p>大多数Futures 方法中需要它。</p>
  </li>
  <li>
    <p>转到<code>ListenableFuture</code> 编程比较容易。</p>
  </li>
  <li>
    <p>Guava提供的通用公共类封装了公共的操作方方法，不需要提供Future和<code>ListenableFuture</code>的扩展方法。</p>
  </li>
</ul>

<p><em>创建ListenableFuture实例</em></p>

<p>首先需要创建<code>ListeningExecutorService</code>实例，Guava 提供了专门的方法把JDK中提供<code>ExecutorService</code>对象转换为<code>ListeningExecutorService</code>。然后通过submit方法就可以创建一个ListenableFuture实例了。</p>

<p>代码片段如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ListenableFuture接口 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">ListeningExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">MoreExecutors</span><span class="o">.</span><span class="na">listeningDecorator</span><span class="o">(</span><span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
</span><span class="line"><span class="n">ListenableFuture</span> <span class="n">explosion</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="nf">Callable</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">Explosion</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">pushBigRedButton</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">});</span>
</span><span class="line"><span class="n">Futures</span><span class="o">.</span><span class="na">addCallback</span><span class="o">(</span><span class="n">explosion</span><span class="o">,</span> <span class="k">new</span> <span class="nf">FutureCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="c1">// we want this handler to run immediately after we push the big red button!</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSuccess</span><span class="o">(</span><span class="n">Explosion</span> <span class="n">explosion</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">walkAwayFrom</span><span class="o">(</span><span class="n">explosion</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFailure</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">thrown</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">battleArchNemesis</span><span class="o">();</span> <span class="c1">// escaped the explosion!</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>也就是说，对于异步的方法，我可以通过监听器来根据执行结果来判断接下来的处理行为。</p>

<p><em>ListenableFuture 链式操作</em></p>

<p>使用ListenableFuture 最重要的理由是它可以进行一系列的复杂链式的异步操作。</p>

<p>一般，使用AsyncFunction来完成链式异步操作。不同的操作可以在不同的Executors中执行，单独的ListenableFuture 可以有多个操作等待。</p>

<blockquote>
  <blockquote>

    <p>Tips:  AsyncFunction接口常被用于当我们想要异步的执行转换而不造成线程阻塞时，尽管Future.get()方法会在任务没有完成时造成阻塞，但是AsyncFunction接口并不被建议用来异步的执行转换，它常被用于返回Future实例。</p>

    <p>下面给出这个链式操作完成一个简单的异步字符串转换操作：</p>
  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ListenableFuture接口 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.util.concurrent.Callable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">com.google.common.util.concurrent.AsyncFunction</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">com.google.common.util.concurrent.FutureCallback</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">com.google.common.util.concurrent.Futures</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">com.google.common.util.concurrent.ListenableFuture</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">com.google.common.util.concurrent.ListeningExecutorService</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">com.google.common.util.concurrent.MoreExecutors</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @author tao.ke Date: 14-12-26 Time: 下午5:28</span>
</span><span class="line"><span class="cm"> * @version \$Id$</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListenerFutureChain</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ListeningExecutorService</span> <span class="n">executorService</span> <span class="o">=</span> <span class="n">MoreExecutors</span><span class="o">.</span><span class="na">listeningDecorator</span><span class="o">(</span><span class="n">executor</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">executeChain</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">AsyncFunction</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">asyncFunction</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AsyncFunction</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">public</span> <span class="n">ListenableFuture</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">apply</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">                <span class="n">ListenableFuture</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">executorService</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">                    <span class="nd">@Override</span>
</span><span class="line">                    <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;STEP1 &gt;&gt;&gt;&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">                        <span class="k">return</span> <span class="n">input</span> <span class="o">+</span> <span class="s">&quot;|||step 1 ===--===||| &quot;</span><span class="o">;</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">});</span>
</span><span class="line">
</span><span class="line">                <span class="k">return</span> <span class="n">future</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">};</span>
</span><span class="line">
</span><span class="line">        <span class="n">AsyncFunction</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">asyncFunction2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AsyncFunction</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">public</span> <span class="n">ListenableFuture</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">apply</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">                <span class="n">ListenableFuture</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">executorService</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">                    <span class="nd">@Override</span>
</span><span class="line">                    <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;STEP2 &gt;&gt;&gt;&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">                        <span class="k">return</span> <span class="n">input</span> <span class="o">+</span> <span class="s">&quot;|||step 2 ===--===---||| &quot;</span><span class="o">;</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">});</span>
</span><span class="line">
</span><span class="line">                <span class="k">return</span> <span class="n">future</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">};</span>
</span><span class="line">
</span><span class="line">        <span class="n">ListenableFuture</span> <span class="n">startFuture</span> <span class="o">=</span> <span class="n">executorService</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="nf">Callable</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">public</span> <span class="n">Object</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;BEGIN &gt;&gt;&gt;&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">                <span class="k">return</span> <span class="s">&quot;BEGIN---&gt;&quot;</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">});</span>
</span><span class="line">
</span><span class="line">        <span class="n">ListenableFuture</span> <span class="n">future</span> <span class="o">=</span> <span class="n">Futures</span><span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">startFuture</span><span class="o">,</span> <span class="n">asyncFunction</span><span class="o">,</span> <span class="n">executor</span><span class="o">);</span>
</span><span class="line">        <span class="n">ListenableFuture</span> <span class="n">endFuture</span> <span class="o">=</span> <span class="n">Futures</span><span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">future</span><span class="o">,</span> <span class="n">asyncFunction2</span><span class="o">,</span> <span class="n">executor</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">Futures</span><span class="o">.</span><span class="na">addCallback</span><span class="o">(</span><span class="n">endFuture</span><span class="o">,</span> <span class="k">new</span> <span class="nf">FutureCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSuccess</span><span class="o">(</span><span class="n">Object</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class="line">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;=======OK=======&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFailure</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">});</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;========START=======&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;MAIN &gt;&gt;&gt;&quot;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">        <span class="n">ListenerFutureChain</span> <span class="n">chain</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListenerFutureChain</span><span class="o">();</span>
</span><span class="line">        <span class="n">chain</span><span class="o">.</span><span class="na">executeChain</span><span class="o">();</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;========END=======&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class="line">        <span class="c1">// System.exit(0);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出：</p>

<pre><code>========START=======
MAIN &gt;&gt;&gt;main
BEGIN &gt;&gt;&gt;pool-2-thread-1
========END=======
STEP1 &gt;&gt;&gt;pool-2-thread-2
STEP2 &gt;&gt;&gt;pool-2-thread-1
BEGIN---&gt;|||step 1 ===--===||| |||step 2 ===--===---||| 
=======OK=======
</code></pre>

<p>从输出可以看出，代码是异步完成字符串操作的。</p>

<h2 id="a-idcachebuildercachebuildera"><a id="CacheBuilder">CacheBuilder实现</a></h2>

<p>写过Cache的，或者其他一些工具类的同学知道，为了让工具类更灵活，我们需要对外提供大量的参数配置给使用者设置，虽然这带有一些好处，但是由于参数太多，使用者开发构造对象的时候过于繁杂。</p>

<p>上面提到过参数配置过多，可以使用Builder模式。Guava Cache也一样，它为我们提供了CacheBuilder工具类来构造不同配置的Cache实例。但是，和本文上面提到的构造器实现有点不一样，它构造器返回的是另外一个对象，因此，这意味着在实现的时候，对象构造函数需要有Builder参数提供配置属性。</p>

<h3 id="cachebuilderlocalcache">4.1 CacheBuilder构造LocalCache实现</h3>

<p>首先，我们先看看Cache的构造函数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>CacheBuilder构造LocalCache实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * 从builder中获取相应的配置参数。 </span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="n">LocalCache</span><span class="o">(</span><span class="n">CacheBuilder</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">K</span><span class="o">,</span> <span class="o">?</span> <span class="kd">super</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">builder</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">CacheLoader</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">loader</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">concurrencyLevel</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">builder</span><span class="o">.</span><span class="na">getConcurrencyLevel</span><span class="o">(),</span> <span class="n">MAX_SEGMENTS</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">keyStrength</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getKeyStrength</span><span class="o">();</span>
</span><span class="line">    <span class="n">valueStrength</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getValueStrength</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="n">keyEquivalence</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getKeyEquivalence</span><span class="o">();</span>
</span><span class="line">    <span class="n">valueEquivalence</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getValueEquivalence</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="n">maxWeight</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getMaximumWeight</span><span class="o">();</span>
</span><span class="line">    <span class="n">weigher</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getWeigher</span><span class="o">();</span>
</span><span class="line">    <span class="n">expireAfterAccessNanos</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getExpireAfterAccessNanos</span><span class="o">();</span>
</span><span class="line">    <span class="n">expireAfterWriteNanos</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getExpireAfterWriteNanos</span><span class="o">();</span>
</span><span class="line">    <span class="n">refreshNanos</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getRefreshNanos</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="n">removalListener</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getRemovalListener</span><span class="o">();</span>
</span><span class="line">    <span class="n">removalNotificationQueue</span> <span class="o">=</span> <span class="o">(</span><span class="n">removalListener</span> <span class="o">==</span> <span class="n">NullListener</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">)</span> <span class="o">?</span> <span class="n">LocalCache</span>
</span><span class="line">                <span class="o">.&lt;</span><span class="n">RemovalNotification</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">discardingQueue</span><span class="o">()</span> <span class="o">:</span> <span class="k">new</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;</span><span class="n">RemovalNotification</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;();</span>
</span><span class="line">
</span><span class="line">    <span class="n">ticker</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getTicker</span><span class="o">(</span><span class="n">recordsTime</span><span class="o">());</span>
</span><span class="line">    <span class="n">entryFactory</span> <span class="o">=</span> <span class="n">EntryFactory</span><span class="o">.</span><span class="na">getFactory</span><span class="o">(</span><span class="n">keyStrength</span><span class="o">,</span> <span class="n">usesAccessEntries</span><span class="o">(),</span> <span class="n">usesWriteEntries</span><span class="o">());</span>
</span><span class="line">    <span class="n">globalStatsCounter</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getStatsCounterSupplier</span><span class="o">().</span><span class="na">get</span><span class="o">();</span>
</span><span class="line">    <span class="n">defaultLoader</span> <span class="o">=</span> <span class="n">loader</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">initialCapacity</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">builder</span><span class="o">.</span><span class="na">getInitialCapacity</span><span class="o">(),</span> <span class="n">MAXIMUM_CAPACITY</span><span class="o">);</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">evictsBySize</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">customWeigher</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">        <span class="n">initialCapacity</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">initialCapacity</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">maxWeight</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//.......</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从构造函数可以看到，Cache的所有参数配置都是从Builder对象中获取的，Builder完成了作为该模式最典型的应用，多配置参数构建对象。</p>

<p>在Cache中只提供一个构造函数，但是在上面代码示例中，我们演示了两种构建缓存的方式：自动加载；手动加载。那么，一般会存在一个完成两者之间的过渡<code>adapter</code>组件，接下来看看Builder在内部是如何完成创建缓存对象过程的。</p>

<p>OK，你猜到了。在<code>LocalCache</code>中确实提供了两种过渡类，一个是支持自动加载value的<code>LocalLoadingCache</code> 和只能在键值找不到的时候手动调用获取值方法的<code>LocalManualCache</code>。</p>

<p><em>LocalManualCache实现</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>LocalManualCache实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">LocalManualCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Cache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;,</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">final</span> <span class="n">LocalCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">localCache</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">LocalManualCache</span><span class="o">(</span><span class="n">CacheBuilder</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">K</span><span class="o">,</span> <span class="o">?</span> <span class="kd">super</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">this</span><span class="o">(</span><span class="k">new</span> <span class="n">LocalCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;(</span><span class="n">builder</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">private</span> <span class="nf">LocalManualCache</span><span class="o">(</span><span class="n">LocalCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">localCache</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">this</span><span class="o">.</span><span class="na">localCache</span> <span class="o">=</span> <span class="n">localCache</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// Cache methods</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="nd">@Nullable</span>
</span><span class="line">        <span class="kd">public</span> <span class="n">V</span> <span class="nf">getIfPresent</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">localCache</span><span class="o">.</span><span class="na">getIfPresent</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Callable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">valueLoader</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class="line">            <span class="n">checkNotNull</span><span class="o">(</span><span class="n">valueLoader</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span> <span class="n">localCache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">CacheLoader</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">public</span> <span class="n">V</span> <span class="nf">load</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="n">valueLoader</span><span class="o">.</span><span class="na">call</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">});</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//......</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="n">CacheStats</span> <span class="nf">stats</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="n">SimpleStatsCounter</span> <span class="n">aggregator</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleStatsCounter</span><span class="o">();</span>
</span><span class="line">            <span class="n">aggregator</span><span class="o">.</span><span class="na">incrementBy</span><span class="o">(</span><span class="n">localCache</span><span class="o">.</span><span class="na">globalStatsCounter</span><span class="o">);</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="n">Segment</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">segment</span> <span class="o">:</span> <span class="n">localCache</span><span class="o">.</span><span class="na">segments</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">aggregator</span><span class="o">.</span><span class="na">incrementBy</span><span class="o">(</span><span class="n">segment</span><span class="o">.</span><span class="na">statsCounter</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">return</span> <span class="n">aggregator</span><span class="o">.</span><span class="na">snapshot</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// Serialization Support</span>
</span><span class="line">
</span><span class="line">        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">Object</span> <span class="nf">writeReplace</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="k">new</span> <span class="n">ManualSerializationProxy</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;(</span><span class="n">localCache</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从代码实现看出实际上是一个adapter组件，并且绝大部分实现都是直接调用LocalCache的方法，或者加一些参数判断和聚合。在它核心的构造函数中，就是直接调用LocalCache构造函数，对于loader对象直接设null值。</p>

<p><em>LocalLoadingCache实现</em></p>

<p><code>LocalLoadingCache</code>实现继承了``类，其主要对get相关方法做了重写。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>LocalLoadingCache实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kd">class</span> <span class="nc">LocalLoadingCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">LocalManualCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">LoadingCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">LocalLoadingCache</span><span class="o">(</span><span class="n">CacheBuilder</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">K</span><span class="o">,</span> <span class="o">?</span> <span class="kd">super</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">builder</span><span class="o">,</span> <span class="n">CacheLoader</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">loader</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="kd">super</span><span class="o">(</span><span class="k">new</span> <span class="n">LocalCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;(</span><span class="n">builder</span><span class="o">,</span> <span class="n">checkNotNull</span><span class="o">(</span><span class="n">loader</span><span class="o">)));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// LoadingCache methods</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">localCache</span><span class="o">.</span><span class="na">getOrLoad</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="n">V</span> <span class="nf">getUnchecked</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="nf">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">throw</span> <span class="k">new</span> <span class="nf">UncheckedExecutionException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getCause</span><span class="o">());</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="n">ImmutableMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="n">Iterable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">K</span><span class="o">&gt;</span> <span class="n">keys</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">localCache</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="n">keys</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">refresh</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">localCache</span><span class="o">.</span><span class="na">refresh</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="kd">final</span> <span class="n">V</span> <span class="nf">apply</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nf">getUnchecked</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// Serialization Support</span>
</span><span class="line">
</span><span class="line">        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="n">Object</span> <span class="nf">writeReplace</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="k">new</span> <span class="n">LoadingSerializationProxy</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;(</span><span class="n">localCache</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>提供了这些adapter类之后，builder类就可以创建<code>LocalCache</code>，如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>LocalLoadingCache实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">
</span><span class="line">    <span class="c1">// 获取value可以通过key计算出</span>
</span><span class="line">   <span class="kd">public</span> <span class="o">&lt;</span><span class="n">K1</span> <span class="kd">extends</span> <span class="n">K</span><span class="o">,</span> <span class="n">V1</span> <span class="kd">extends</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">LoadingCache</span><span class="o">&lt;</span><span class="n">K1</span><span class="o">,</span> <span class="n">V1</span><span class="o">&gt;</span> <span class="nf">build</span><span class="o">(</span><span class="n">CacheLoader</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">K1</span><span class="o">,</span> <span class="n">V1</span><span class="o">&gt;</span> <span class="n">loader</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">checkWeightWithWeigher</span><span class="o">();</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="n">LocalCache</span><span class="o">.</span><span class="na">LocalLoadingCache</span><span class="o">&lt;</span><span class="n">K1</span><span class="o">,</span> <span class="n">V1</span><span class="o">&gt;(</span><span class="k">this</span><span class="o">,</span> <span class="n">loader</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 手动加载</span>
</span><span class="line">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">K1</span> <span class="kd">extends</span> <span class="n">K</span><span class="o">,</span> <span class="n">V1</span> <span class="kd">extends</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">Cache</span><span class="o">&lt;</span><span class="n">K1</span><span class="o">,</span> <span class="n">V1</span><span class="o">&gt;</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">checkWeightWithWeigher</span><span class="o">();</span>
</span><span class="line">        <span class="n">checkNonLoadingCache</span><span class="o">();</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="n">LocalCache</span><span class="o">.</span><span class="na">LocalManualCache</span><span class="o">&lt;</span><span class="n">K1</span><span class="o">,</span> <span class="n">V1</span><span class="o">&gt;(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="cachebuilder">4.2 CacheBuilder参数设置</h3>

<p><code>CacheBuilder</code>在为我们提供了构造一个Cache对象时，会构造各个成员对象的初始值（默认值）。了解这些默认值，对于我们分析Cache源码实现时，一些判断条件的设置原因，还是很有用的。</p>

<p><em>初始参数值设置</em></p>

<p>在<code>ConcurrentHashMap</code>中，我们知道有个并发水平（CONCURRENCY_LEVEL），这个参数决定了其允许多少个线程并发操作修改该数据结构。这是因为这个参数是最后map使用的segment个数，而每个segment对应一个锁，因此，对于一个map来说，并发环境下，理论上最大可以有segment个数的线程同时安全地操作修改数据结构。那么是不是segment的值可以设置很大呢？显然不是，要记住维护一个锁的成本还是挺高的，此外如果涉及全表操作，那么性能就会非常不好了。</p>

<p>其他一些初始参数值的设置如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>CacheBuilder参数设置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_INITIAL_CAPACITY</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span> <span class="c1">// 默认的初始化Map大小</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_CONCURRENCY_LEVEL</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span> <span class="c1">// 默认并发水平</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_EXPIRATION_NANOS</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 默认超时</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_REFRESH_NANOS</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 默认刷新时间</span>
</span><span class="line">    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">UNSET_INT</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class="line">    <span class="kt">boolean</span> <span class="n">strictParsing</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">initialCapacity</span> <span class="o">=</span> <span class="n">UNSET_INT</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">concurrencyLevel</span> <span class="o">=</span> <span class="n">UNSET_INT</span><span class="o">;</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">maximumSize</span> <span class="o">=</span> <span class="n">UNSET_INT</span><span class="o">;</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">maximumWeight</span> <span class="o">=</span> <span class="n">UNSET_INT</span><span class="o">;</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">expireAfterWriteNanos</span> <span class="o">=</span> <span class="n">UNSET_INT</span><span class="o">;</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">expireAfterAccessNanos</span> <span class="o">=</span> <span class="n">UNSET_INT</span><span class="o">;</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">refreshNanos</span> <span class="o">=</span> <span class="n">UNSET_INT</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>初始对象引用设置</em></p>

<p>在Cache中，我们除了超时时间，键值引用属性等设置外，还关注命中统计情况，这就需要统计对象来工作。CacheBuilder提供了初始的null 统计对象和空统计对象。</p>

<p>此外，还会设置到默认的引用类型等设置，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>CacheBuilder参数设置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 默认空的缓存命中统计类</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">static</span> <span class="kd">final</span> <span class="n">Supplier</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">StatsCounter</span><span class="o">&gt;</span> <span class="n">NULL_STATS_COUNTER</span> <span class="o">=</span> <span class="n">Suppliers</span><span class="o">.</span><span class="na">ofInstance</span><span class="o">(</span><span class="k">new</span> <span class="nf">StatsCounter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//......省略空override</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="n">CacheStats</span> <span class="nf">snapshot</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">EMPTY_STATS</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">});</span>
</span><span class="line">    <span class="kd">static</span> <span class="kd">final</span> <span class="n">CacheStats</span> <span class="n">EMPTY_STATS</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CacheStats</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span><span class="c1">// 初始状态的统计对象</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 系统实现的简单的缓存状态统计类</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">static</span> <span class="kd">final</span> <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">StatsCounter</span><span class="o">&gt;</span> <span class="n">CACHE_STATS_COUNTER</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">StatsCounter</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="n">StatsCounter</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="k">new</span> <span class="nf">SimpleStatsCounter</span><span class="o">();</span><span class="c1">//这里构造简单地统计类实现</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">};</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 自定义的空RemovalListener，监听到移除通知，默认空处理。</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">enum</span> <span class="n">NullListener</span> <span class="kd">implements</span> <span class="n">RemovalListener</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">        <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRemoval</span><span class="o">(</span><span class="n">RemovalNotification</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">notification</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 默认权重类，任何对象的权重均为1</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">enum</span> <span class="n">OneWeigher</span> <span class="kd">implements</span> <span class="n">Weigher</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">        <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">weigh</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kd">final</span> <span class="n">Ticker</span> <span class="n">NULL_TICKER</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Ticker</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">read</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">};</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 默认的key等同判断</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">Equivalence</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getKeyEquivalence</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">firstNonNull</span><span class="o">(</span><span class="n">keyEquivalence</span><span class="o">,</span> <span class="n">getKeyStrength</span><span class="o">().</span><span class="na">defaultEquivalence</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 默认value的等同判断</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">Equivalence</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getValueEquivalence</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">firstNonNull</span><span class="o">(</span><span class="n">valueEquivalence</span><span class="o">,</span> <span class="n">getValueStrength</span><span class="o">().</span><span class="na">defaultEquivalence</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 默认的key引用</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">Strength</span> <span class="nf">getKeyStrength</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">firstNonNull</span><span class="o">(</span><span class="n">keyStrength</span><span class="o">,</span> <span class="n">Strength</span><span class="o">.</span><span class="na">STRONG</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 默认为Strong 属性的引用</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">Strength</span> <span class="nf">getValueStrength</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">firstNonNull</span><span class="o">(</span><span class="n">valueStrength</span><span class="o">,</span> <span class="n">Strength</span><span class="o">.</span><span class="na">STRONG</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">&lt;</span><span class="n">K1</span> <span class="kd">extends</span> <span class="n">K</span><span class="o">,</span> <span class="n">V1</span> <span class="kd">extends</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">Weigher</span><span class="o">&lt;</span><span class="n">K1</span><span class="o">,</span> <span class="n">V1</span><span class="o">&gt;</span> <span class="nf">getWeigher</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="o">(</span><span class="n">Weigher</span><span class="o">&lt;</span><span class="n">K1</span><span class="o">,</span> <span class="n">V1</span><span class="o">&gt;)</span> <span class="n">Objects</span><span class="o">.</span><span class="na">firstNonNull</span><span class="o">(</span><span class="n">weigher</span><span class="o">,</span> <span class="n">OneWeigher</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中，在我们不设置缓存中键值引用的情况下，默认都是采用强引用及相对应的属性策略来初始化的。此外，在上面代码中还可以看到，统计类<code>SimpleStatsCounter</code>是一个简单的实现。里面主要是简单地缓存累加，此外由于多线程下Long类型的线程非安全性，所以也进行了一下封装，下面给出命中率的实现：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>CacheBuilder参数设置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">SimpleStatsCounter</span> <span class="kd">implements</span> <span class="n">StatsCounter</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LongAddable</span> <span class="n">hitCount</span> <span class="o">=</span> <span class="n">LongAddables</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LongAddable</span> <span class="n">missCount</span> <span class="o">=</span> <span class="n">LongAddables</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LongAddable</span> <span class="n">loadSuccessCount</span> <span class="o">=</span> <span class="n">LongAddables</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LongAddable</span> <span class="n">loadExceptionCount</span> <span class="o">=</span> <span class="n">LongAddables</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LongAddable</span> <span class="n">totalLoadTime</span> <span class="o">=</span> <span class="n">LongAddables</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LongAddable</span> <span class="n">evictionCount</span> <span class="o">=</span> <span class="n">LongAddables</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">SimpleStatsCounter</span><span class="o">()</span> <span class="o">{}</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">recordHits</span><span class="o">(</span><span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="n">hitCount</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">CacheStats</span> <span class="nf">snapshot</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="k">new</span> <span class="nf">CacheStats</span><span class="o">(</span>
</span><span class="line">          <span class="n">hitCount</span><span class="o">.</span><span class="na">sum</span><span class="o">(),</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Increments all counters by the values in {@code other}.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">incrementBy</span><span class="o">(</span><span class="n">StatsCounter</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="n">CacheStats</span> <span class="n">otherStats</span> <span class="o">=</span> <span class="n">other</span><span class="o">.</span><span class="na">snapshot</span><span class="o">();</span>
</span><span class="line">      <span class="n">hitCount</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">otherStats</span><span class="o">.</span><span class="na">hitCount</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因此，CacheBuilder的一些参数对象等得初始化就完成了。可以看到这些默认的初始化，有两套引用：Null对象和Empty对象，显然Null会更省空间，但我们在创建的时候将决定不使用某特性的时候，就会使用Null来创建，否则使用Empty来完成初始化工作。在分析Cache的时候，写后超时队列和读后超时队列也存在两个版本。</p>

<h2 id="a-idlocalcachelocalcachea"><a id="LocalCache">LocalCache实现</a></h2>

<p>在设计实现上，<code>LocalCache</code>的并发策略和<code>concurrentHashMap</code>的并发策略是一致的，也是根据分段锁来提高并发能力,分段锁可以很好的保证 并发读写的效率。因此，该map支持非阻塞读和不同段之间并发写。</p>

<p>如果最大的大小指定了，那么基于段来执行操作是最好的。使用页面替换算法来决定当map大小超过指定值时，哪些entries需要被驱赶出去。页面替换算法的数据结构保证Map临时一致性：对一个segment写排序是一致的；但是对map进行更新和读不能直接立刻 反应在数据结构上。 虽然这些数据结构被lock锁保护，但是其结构决定了批量操作可以避免锁竞争出现。在线程之间传播的批量操作导致分摊成本比不强制大小限制的操作要稍微高一点。</p>

<p>此外，<code>LoacalCache</code>使用LRU页面替换算法，是因为该算法简单，并且有很高的命中率，以及O(1)的时间复杂度。需要说明的是， LRU算法是基于页面而不是全局实现的，所以可能在命中率上不如全局LRU算法，但是应该基本相似。</p>

<p>最后，要说明一点，在代码实现上，页面其实就是一个段segment。之所以说page页，是因为在计算机专业课程上，CPU，操作系统，算法上，基本上都介绍过分页导致优化效果的提升。</p>

<h3 id="section-3">5.1 总体数据结构</h3>

<p><code>LocalCache</code>的数据结构和<code>ConcurrentHashMap</code>一样，都是采用分segment来细化管理HashMap中的节点Entry。借用<code>ConcurrentHashMap</code>的数据结构图来说明Cache的实现：</p>

<p><img src="http://kxcoder.github.io/images/2014/12/segement.jpg" height="300" width="600" /></p>

<p>从图中可以直观看到cache是以segment粒度来控制并发get和put等操作的，接下来首先看我们的<code>LocalCache</code>是如何构造这些segment段的，继续上面初始化localCache构造函数的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>localCache segment段 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">    <span class="c1">// 找到大于并发水平的最小2的次方的值，作为segment数量</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">segmentShift</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">segmentCount</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">segmentCount</span> <span class="o">&lt;</span> <span class="n">concurrencyLevel</span> <span class="o">&amp;&amp;</span> <span class="o">(!</span><span class="n">evictsBySize</span><span class="o">()</span> <span class="o">||</span> <span class="n">segmentCount</span> <span class="o">*</span> <span class="mi">20</span> <span class="o">&lt;=</span> <span class="n">maxWeight</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="o">++</span><span class="n">segmentShift</span><span class="o">;</span>
</span><span class="line">            <span class="n">segmentCount</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">segmentShift</span> <span class="o">=</span> <span class="mi">32</span> <span class="o">-</span> <span class="n">segmentShift</span><span class="o">;</span><span class="c1">//位 偏移数</span>
</span><span class="line">        <span class="n">segmentMask</span> <span class="o">=</span> <span class="n">segmentCount</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span><span class="c1">//mask码</span>
</span><span class="line">
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">segments</span> <span class="o">=</span> <span class="n">newSegmentArray</span><span class="o">(</span><span class="n">segmentCount</span><span class="o">);</span><span class="c1">// 构造数据数组，如上图所示</span>
</span><span class="line">        <span class="c1">//获取每个segment初始化容量，并且保证大于等于map初始容量</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">segmentCapacity</span> <span class="o">=</span> <span class="n">initialCapacity</span> <span class="o">/</span> <span class="n">segmentCount</span><span class="o">;</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">segmentCapacity</span> <span class="o">*</span> <span class="n">segmentCount</span> <span class="o">&lt;</span> <span class="n">initialCapacity</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="o">++</span><span class="n">segmentCapacity</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//段Size 必须为2的次数，并且刚刚大于段初始容量</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">segmentSize</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">segmentSize</span> <span class="o">&lt;</span> <span class="n">segmentCapacity</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">segmentSize</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 权重设置，确保权重和==map权重</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">evictsBySize</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// Ensure sum of segment max weights = overall max weights</span>
</span><span class="line">            <span class="kt">long</span> <span class="n">maxSegmentWeight</span> <span class="o">=</span> <span class="n">maxWeight</span> <span class="o">/</span> <span class="n">segmentCount</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">            <span class="kt">long</span> <span class="n">remainder</span> <span class="o">=</span> <span class="n">maxWeight</span> <span class="o">%</span> <span class="n">segmentCount</span><span class="o">;</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="o">.</span><span class="na">segments</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">remainder</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">maxSegmentWeight</span><span class="o">--;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="c1">//构造每个段结构</span>
</span><span class="line">                <span class="k">this</span><span class="o">.</span><span class="na">segments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">createSegment</span><span class="o">(</span><span class="n">segmentSize</span><span class="o">,</span> <span class="n">maxSegmentWeight</span><span class="o">,</span> <span class="n">builder</span><span class="o">.</span><span class="na">getStatsCounterSupplier</span><span class="o">().</span><span class="na">get</span><span class="o">());</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="o">.</span><span class="na">segments</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="c1">//构造每个段结构</span>
</span><span class="line">                <span class="k">this</span><span class="o">.</span><span class="na">segments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">createSegment</span><span class="o">(</span><span class="n">segmentSize</span><span class="o">,</span> <span class="n">UNSET_INT</span><span class="o">,</span> <span class="n">builder</span><span class="o">.</span><span class="na">getStatsCounterSupplier</span><span class="o">().</span><span class="na">get</span><span class="o">());</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：基本上都是基于2的次数来设置大小的，显然基于移位操作比普通计算操作速度要快。此外，对于最大权重分配到段权重的设计上，很特殊。为什么呢？为了保证两者能够相等（maxWeight==sumAll(maxSegmentWeight)）,对于remainder前面的segment maxSegmentWeight的值比remainder后面的权重值大1，这样保证最后值相等。</p>

  </blockquote>
</blockquote>

<p><em>map get 方法</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>get 方法 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="nd">@Nullable</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">segmentFor</span><span class="o">(</span><span class="n">hash</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：代码很简单，首先check key是否为null，然后计算hash值，定位到对应的segment，执行segment实例拥有的get方法获取对应的value值</p>

  </blockquote>
</blockquote>

<p><em>map put 方法</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>put 方法 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">V</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">checkNotNull</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">        <span class="n">checkNotNull</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">segmentFor</span><span class="o">(</span><span class="n">hash</span><span class="o">).</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：和get方法一样，也是先check值，然后计算key的hash值，然后定位到对应的segment段，执行段实例的put方法，将键值存入map中。</p>

  </blockquote>
</blockquote>

<p><em>map isEmpty 方法</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>isEmpty 方法 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0L</span><span class="o">;</span>
</span><span class="line">        <span class="n">Segment</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;[]</span> <span class="n">segments</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">segments</span><span class="o">;</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">segments</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">segments</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">sum</span> <span class="o">+=</span> <span class="n">segments</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">modCount</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">sum</span> <span class="o">!=</span> <span class="mi">0L</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// recheck unless no modifications</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">segments</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">segments</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="n">sum</span> <span class="o">-=</span> <span class="n">segments</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">modCount</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">sum</span> <span class="o">!=</span> <span class="mi">0L</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：判断Cache是否为空，就是分别判断每个段segment是否都为空，但是由于整体是在并发环境下进行的，也就是说存在对一个segment并发的增加和移除元素的时候，而我们此时正在check其他segment段。</p>

    <p>上面这种情况，决定了我们不能够获得任何一个时间点真实段状态的情况。因此，上面的代码引入了sum变量来计算段modCount变更情况。modCount表示改变segment大小size的更新次数，这个在批量读取方法期间保证它们可以看到一致性的快照。<code>需要注意，这里先获取count，该值是volatile，因此modCount通常都可以在不需要一致性控制下，获得当前segment最新的值.</code></p>

    <p>在判断如果在第一次check的时候，发现segment发生了数据结构级别变更，则会进行recheck，就是在每个modCount下，段仍然是空的，则判断该map为空。如果发现这期间数据结构发生变化，则返回非空判断。</p>

  </blockquote>
</blockquote>

<p><em>map 其他方法</em></p>

<p>在Cache数据结构中，还有很多方法，和上面列出来的方法一样，其底层核心实现都是依赖segment类实例中实现的对应方法。</p>

<p>此外，在总的数据结构中，还提供了一些根据builder配制制定相应地缓存策略方法。比如：</p>

<ul>
  <li>expiresAfterAccess：是否执行访问后超时过期策略；</li>
  <li>expiresAfterWrite：是否执行写后超时过期策略；</li>
  <li>usesAccessQueue：根据上面的配置决定是否需要new一个访问队列；</li>
  <li>usesWriteQueue：根据上面的配置决定是否需要new一个写队列；</li>
  <li>usesKeyReferences/usesValueReferences：是否需要使用特别的引用策略(非Strong引用).</li>
  <li>等等……</li>
</ul>

<h3 id="section-4">5.2 引用数据结构</h3>

<p>在介绍Segment数据结构之前，先讲讲Cache中引用的设计。</p>

<p>关于Reference引用的一些说明，在博文的上面已经介绍了，这里就不赘述。在Guava Cache 中，主要使用三种引用类型，分别是：<code>STRONG引用</code>，<code>SOFT引用</code> ，<code>WEAK引用</code>。和Map不同，在Cache中，使用<code>ReferenceEntry</code>来封装键值对，并且对于值来说，还额外实现了<code>ValueReference</code>引用对象来封装对应Value对象。</p>

<p><em>ReferenceEntry节点结构</em></p>

<p>为了支持各种不同类型的引用，以及不同过期策略，这里构造了一个ReferenceEntry节点结构。通过下面的节点数据结构，可以清晰的看到缓存大致操作流程。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ReferenceEntry节点结构 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 引用map中一个entry节点。</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * 在map中得entries节点有下面几种状态：</span>
</span><span class="line"><span class="cm">     * valid：-live：设置了有效的key/value;-loading：加载正在处理中....</span>
</span><span class="line"><span class="cm">     * invalid：-expired：时间过期(但是key/value可能仍然设置了)；Collected：key/value部分被垃圾收集了，但是还没有被清除；</span>
</span><span class="line"><span class="cm">     * -unset：标记为unset，表示等待清除或者重新使用。</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">interface</span> <span class="nc">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 从entry中返回value引用</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">getValueReference</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 为entry设置value引用</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">void</span> <span class="nf">setValueReference</span><span class="o">(</span><span class="n">ValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">valueReference</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 返回链中下一个entry（解决hash碰撞存在链表）</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="nd">@Nullable</span>
</span><span class="line">        <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">getNext</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 返回entry的hash</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="nf">getHash</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 返回entry的key</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="nd">@Nullable</span>
</span><span class="line">        <span class="n">K</span> <span class="nf">getKey</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">         * Used by entries that use access order. Access entries are maintained in a doubly-linked list. New entries are</span>
</span><span class="line"><span class="cm">         * added at the tail of the list at write time; stale entries are expired from the head of the list.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 返回该entry最近一次被访问的时间ns</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">long</span> <span class="nf">getAccessTime</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 设置entry访问时间ns.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">void</span> <span class="nf">setAccessTime</span><span class="o">(</span><span class="kt">long</span> <span class="n">time</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 返回访问队列中下一个entry</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">getNextInAccessQueue</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * Sets the next entry in the access queue.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">void</span> <span class="nf">setNextInAccessQueue</span><span class="o">(</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * Returns the previous entry in the access queue.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">getPreviousInAccessQueue</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * Sets the previous entry in the access queue.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">void</span> <span class="nf">setPreviousInAccessQueue</span><span class="o">(</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">previous</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// ...... 省略write队列相关方法，和access一样</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：从上面代码可以看到除了和Map一样，有key、value、hash和next四个属性之外，还有访问和写更新两个双向链表队列，以及entry的最近访问时间和最近更新时间。显然，多出来的属性就是为了支持缓存必须要有的过期机制。</p>

    <p>此外，从上面的代码可以看出<em>cache支持的LRU机制实际上是建立在segment上的，也就是基于页的替换机制。</em></p>

    <p>关于访问队列数据结构，其实质就是一个双向的链表。当节点被访问的时候，这个节点将会移除，然后把这个节点添加到链表的结尾。关于具体实现，将在segment中介绍。</p>

    <p>创建不同类型的ReferenceEntry由其枚举工厂类EntryFactory来实现，它根据key的Strength类型、是否使用accessQueue、是否使用writeQueue来决定不同的EntryFactry实例，并通过它创建相应的ReferenceEntry实例</p>
  </blockquote>
</blockquote>

<p><em>ValueReference结构</em></p>

<p>同样为了支持Cache中各个不同类型的引用，其对Value类型进行再封装，支持引用。看看其内部数据属性：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ValueReference结构 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * A reference to a value.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">interface</span> <span class="nc">ValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * Returns the value. Does not block or throw exceptions.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="nd">@Nullable</span>
</span><span class="line">        <span class="n">V</span> <span class="nf">get</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * Waits for a value that may still be loading. Unlike get(), this method can block (in the case of</span>
</span><span class="line"><span class="cm">         * FutureValueReference).</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * @throws ExecutionException if the loading thread throws an exception</span>
</span><span class="line"><span class="cm">         * @throws ExecutionError if the loading thread throws an error</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">V</span> <span class="nf">waitForValue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ExecutionException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * Returns the weight of this entry. This is assumed to be static between calls to setValue.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="nf">getWeight</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * Returns the entry associated with this value reference, or {@code null} if this value reference is</span>
</span><span class="line"><span class="cm">         * independent of any entry.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="nd">@Nullable</span>
</span><span class="line">        <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">getEntry</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 为一个指定的entry创建一个该引用的副本</span>
</span><span class="line"><span class="cm">         * &lt;p&gt;</span>
</span><span class="line"><span class="cm">         * {@code value} may be null only for a loading reference.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">copyFor</span><span class="o">(</span><span class="n">ReferenceQueue</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">queue</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">entry</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 告知一个新的值正在加载中。这个只会关联到加载值引用。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">void</span> <span class="nf">notifyNewValue</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">V</span> <span class="n">newValue</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 当一个新的value正在被加载的时候，返回true。不管是否已经有存在的值。这里加锁方法返回的值对于给定的ValueReference实例来说是常量。</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">boolean</span> <span class="nf">isLoading</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 返回true，如果该reference包含一个活跃的值,意味着在cache里仍然有一个值存在。活跃的值包含：cache查找返回的，等待被移除的要被驱赶的值； 非激活的包含：正在加载的值，</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">boolean</span> <span class="nf">isActive</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：value引用接口对象中包含了不同状态的标记，以及一些加载方法和获取具体value值对象。</p>

    <p>为了减少不必须的load加载，在value引用中增加了loading标识和wait方法等待加载获取值。这样，就可以等待上一个调用loader方法获取值，而不是重复去调用loader方法加重系统负担，而且可以更快的获取对应的值。</p>

    <p>此外，介绍下<code>ReferenceQueue</code>引用队列，这个队列是JDK提供的，在检测到适当的可到达性更改后，垃圾回收器将已注册的引用对象添加到该队列中。因为Cache使用了各种引用，而通过ReferenceQueue这个“监听器”就可以优雅的实现自动删除那些引用不可达的key了，是不是很吊，哈哈。</p>

    <p>在Cache分别实现了基于Strong,Soft，Weak三种形式的ValueReference实现。</p>

    <p>这里ValueReference之所以要有对ReferenceEntry的引用是因为在Value因为WeakReference、SoftReference被回收时，需要使用其key将对应的项从Segment段中移除；
copyFor()函数的存在是因为在expand(rehash)重新创建节点时，对WeakReference、SoftReference需要重新创建实例（C++中的深度复制思想，就是为了保持对象状态不会相互影响），而对强引用来说，直接使用原来的值即可，这里很好的展示了对彼变化的封装思想；
notifiyNewValue只用于LoadingValueReference，它的存在是为了对LoadingValueReference来说能更加及时的得到CacheLoader加载的值。</p>
  </blockquote>
</blockquote>

<h3 id="segment-">5.3 Segment 数据结构</h3>

<p><code>Segment</code>数据结构，是ConcurrentHashMap的核心实现，也是该结构保证了其算法的高效性。在<code>Guava Cache</code> 中也一样，<code>segment</code>数据结构保证了缓存在线程安全的前提下可以高效地更新，插入，获取对应value。</p>

<p>实际上，segment就是一个特殊版本的hash table实现。其内部也是对应一个锁，不同的是，对于get和put操作做了一些优化处理。因此，在代码实现的时候，为了快速开发和利用已有锁特性，直接<code>extends ReentrantLock</code>。</p>

<p>在segment中，其主要的类属性就是一个<code>LoacalCache</code>类型的map变量。关于segment实现说明，如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Segment 数据结构 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * segments 维护一个entry列表的table，确保一致性状态。所以可以不加锁去读。节点的next field是不可修改的final，因为所有list的增加操作</span>
</span><span class="line"><span class="cm">         * 是执行在每个容器的头部。因此，这样子很容易去检查变化，也可以快速遍历。此外，当节点被改变的时候，新的节点将被创建然后替换它们。 由于容器的list一般都比较短（平均长度小于2），所以对于hash</span>
</span><span class="line"><span class="cm">         * tables来说，可以工作的很好。虽然说读操作因此可以不需要锁进行，但是是依赖</span>
</span><span class="line"><span class="cm">         * 使用volatile确保其他线程完成写操作。对于绝大多数目的而言，count变量，跟踪元素的数量，其作为一个volatile变量确保可见性（其内部原理可以参考其他相关博文）。</span>
</span><span class="line"><span class="cm">         * 这样一下子变得方便的很多，因为这个变量在很多读操作的时候都会被获取：所有非同步的（unsynchronized）读操作必须首先读取这个count值，并且如果count为0则不会 查找table</span>
</span><span class="line"><span class="cm">         * 的entries元素；所有的同步（synchronized）操作必须在结构性的改变任务bin容器之后，才会写操作这个count值。</span>
</span><span class="line"><span class="cm">         * 这些操作必须在并发读操作看到不一致的数据的时候，不采取任务动作。在map中读操作性质可以更容易实现这个限制。例如：没有操作可以显示出 当table</span>
</span><span class="line"><span class="cm">         * 增长了，但是threshold值没有更新，所以考虑读的时候不要求原子性。作为一个原则，所有危险的volatile读和写count变量都必须在代码中标记。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">        <span class="kd">final</span> <span class="n">LocalCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该segment区域内所有存活的元素个数</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kd">volatile</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 改变table大小size的更新次数。这个在批量读取方法期间保证它们可以看到一致性的快照：</span>
</span><span class="line"><span class="cm">         * 如果modCount在我们遍历段加载大小或者核对containsValue期间被改变了，然后我们会看到一个不一致的状态视图，以至于必须去重试。</span>
</span><span class="line"><span class="cm">         * count+modCount 保证内存一致性</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * 感觉这里有点像是版本控制，比如数据库里的version字段来控制数据一致性</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">modCount</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 每个段表，使用乐观锁的Array来保存entry The per-segment table.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kd">volatile</span> <span class="n">AtomicReferenceArray</span><span class="o">&lt;</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">table</span><span class="o">;</span> <span class="c1">// 这里和concurrentHashMap不一致，原因是这边元素是引用，直接使用不会线程安全</span>
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * A queue of elements currently in the map, ordered by write time. Elements are added to the tail of the queue</span>
</span><span class="line"><span class="cm">         * on write.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="nd">@GuardedBy</span><span class="o">(</span><span class="s">&quot;Segment.this&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="kd">final</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">writeQueue</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * A queue of elements currently in the map, ordered by access time. Elements are added to the tail of the queue</span>
</span><span class="line"><span class="cm">         * on access (note that writes count as accesses).</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="nd">@GuardedBy</span><span class="o">(</span><span class="s">&quot;Segment.this&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="kd">final</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">accessQueue</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：</p>

    <p>在segment实现中，很多地方使用count变量和modCount变量来保持线程安全，从而省掉lock开销。</p>

    <p>在本文上面的图中说明了每个segment就是一个节点table，和jdk实现不一致，这里为了GC，内部维护的是一个<code>AtomicReferenceArray&lt;ReferenceEntry&lt;K, V&gt;&gt;</code>类型的列表，可以保证安全性。</p>

    <p>最后，<code>LocalCache</code>作为一个缓存，其必须具有访问和写超时特性，因为其内部维护了访问队列和写队列，队列中的元素按照访问或者写时间排序，新的元素会被添加到队列尾部。如果，在队列中已经存在了该元素，则会先delete掉，然后再尾部add该节点，新的时间。这也就是为什么，对于<code>LocalCache</code>而言，其LRU是针对segment的，而不是全Cache范围的。</p>

  </blockquote>
</blockquote>

<p>在本文的 5.2节中知道，cache会根据初始化实例时配置来创建多个segment（<code>createSegment</code>），然后该方法最终调用segment类的构造函数创建一个段。对于参数set，就不展示，看看构造方法中其主要操作：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Segment 数据结构 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">// 构造函数</span>
</span><span class="line">    <span class="n">Segment</span><span class="o">(</span><span class="n">LocalCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">,</span> <span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">,</span> <span class="kt">long</span> <span class="n">maxSegmentWeight</span><span class="o">,</span> <span class="n">StatsCounter</span> <span class="n">statsCounter</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">initTable</span><span class="o">(</span><span class="n">newEntryArray</span><span class="o">(</span><span class="n">initialCapacity</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">AtomicReferenceArray</span><span class="o">&lt;</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">newEntryArray</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="n">AtomicReferenceArray</span><span class="o">&lt;</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;(</span><span class="n">size</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="nf">initTable</span><span class="o">(</span><span class="n">AtomicReferenceArray</span><span class="o">&lt;</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">newTable</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">threshold</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">/</span> <span class="mi">4</span><span class="o">;</span> <span class="c1">// 0.75</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(!</span><span class="n">map</span><span class="o">.</span><span class="na">customWeigher</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">threshold</span> <span class="o">==</span> <span class="n">maxSegmentWeight</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// prevent spurious expansion before eviction</span>
</span><span class="line">            <span class="k">this</span><span class="o">.</span><span class="na">threshold</span><span class="o">++;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">table</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OK，这里我们已经构造好了整个localCache对象了，包括其内部每个segment中对应的节点表。这些节点table，决定了最后所有核心操作的具体实现和操作结果。</p>

<p>接下来，需要看看最核心的几个方法。</p>

<blockquote>
  <blockquote>
    <p>Tips：本文把这几个方法单独作为几节来说明，这也表示这几个方法的重要性。</p>
  </blockquote>
</blockquote>

<h3 id="get">5.4 GET方法实现</h3>

<p>首先，如果我们从一个列表中查找对象，怎么做？</p>

<pre><code>1. 列表元素个数是否为0；

2. 如果非0，则依次查询列表中元素是否是我们的对象。
</code></pre>

<p>然后，如果是考虑超时策略的缓存呢？</p>

<pre><code>1. 缓存列表元素个数是否为0；

2. 如果非0，则依次查询列表中元素是否是我们的对象；

3. 查看队列中该对象是否已过期，如果过期则考虑其他方式获取。

4. 此外，为了线程安全，必须在获取的时候，锁住表不让更新缓存操作。
</code></pre>

<p>接下来是，<code>LocalCache</code>的缓存应该怎么做？</p>

<pre><code>1. 缓存中元素个数volatile count是否为0；

2. 如果非0，则获取我们需要的对象引用【getEntry(key, hash)】；

3. 如果对象引用不为null,则获取对应的value值；

4. 如果value已经过期或者无效，则判断是否在Loading【scheduleRefresh(e, key, hash, value, now, loader)】,否则，判断是否到了refresh时间;

5. 如果设置refresh，则异步刷新查询value，然后等待返回最新value【scheduleRefresh(e, key, hash, value, now, loader)】;

6. ok，这里如果value还没有拿到，则查询loader方法获取对应的值(存在加锁)【lockedGetOrLoad(key, hash, loader)】。
</code></pre>

<p>上面就是get方法的主要流程，对于其中一些核心的方法进行分析解析：</p>

<p><em>getEntry方法</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>getEntry方法 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">        <span class="nd">@Nullable</span>
</span><span class="line">        <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">getEntry</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// hash链表</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">getFirst</span><span class="o">(</span><span class="n">hash</span><span class="o">);</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getHash</span><span class="o">()</span> <span class="o">!=</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">continue</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">
</span><span class="line">                <span class="c1">// hash值相同的，接下来找key值也相同的ReferenceEntry</span>
</span><span class="line">                <span class="n">K</span> <span class="n">entryKey</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">entryKey</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">tryDrainReferenceQueues</span><span class="o">();</span><span class="c1">//线程安全的清除搜集到的entries，使用lock机制。</span>
</span><span class="line">                    <span class="k">continue</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">keyEquivalence</span><span class="o">.</span><span class="na">equivalent</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">entryKey</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="n">e</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * AtomicReferenceArray 可以确保原子的更新引用的元素。</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * 为给定的hash值返回第一个entry节点.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">getFirst</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 复制到线程安全的数组中，形成一个快照，确保读的时候，数据一致性。只会读取这个域一次。</span>
</span><span class="line">            <span class="c1">// 此外，这样子可以提供读对于整个table的影响，因为全局的table并不会锁住。（猜测）</span>
</span><span class="line">            <span class="n">AtomicReferenceArray</span><span class="o">&lt;</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">table</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">table</span><span class="o">;</span>
</span><span class="line">            <span class="k">return</span> <span class="n">table</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">hash</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span>
</span><span class="line">        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：上面从缓存中直接获取key对应value，是完全没有加锁来完成的。</p>
  </blockquote>
</blockquote>

<p><em>scheduleRefresh方法</em></p>

<p>如果配置refresh特性，到了配置的刷新间隔时间，而且节点也没有正在加载，则应该进行refresh操作。refresh操作比较复杂。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>scheduleRefresh方法 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 刷新和key关联的value值，除非另一个线程正在做这个。如果在内部刷新了，则返回和key关联的value，否则如果另一个线程正在</span>
</span><span class="line"><span class="cm">         * 刷新或者出现error则返回null</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="nd">@Nullable</span>
</span><span class="line">        <span class="n">V</span> <span class="nf">refresh</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">CacheLoader</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">loader</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">checkTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// loadingValueReference表明当前线程开始加载，获取key对于的value引用。</span>
</span><span class="line">            <span class="kd">final</span> <span class="n">LoadingValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">loadingValueReference</span> <span class="o">=</span> <span class="n">insertLoadingValueReference</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">checkTime</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">loadingValueReference</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 如果说本线程启动加载，则开始异步调用，等待future返回get获取一个监听listenableFuture（见本文准备知识部分介绍），然后等待返回value值。loader相关方法随后介绍</span>
</span><span class="line">            <span class="n">ListenableFuture</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">loadAsync</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">loadingValueReference</span><span class="o">,</span> <span class="n">loader</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">isDone</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="n">Uninterruptibles</span><span class="o">.</span><span class="na">getUninterruptibly</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="c1">// don&#39;t let refresh exceptions propagate; error was already logged</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 返回一个本线程新插入的LoadingValueReference对象，或者如果一个活跃的value引用已经被加载了，则返回null</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="nd">@Nullable</span>
</span><span class="line">        <span class="n">LoadingValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">insertLoadingValueReference</span><span class="o">(</span><span class="kd">final</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">checkTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">            <span class="c1">// 加锁，保证只有一个线程对segment refresh操作</span>
</span><span class="line">            <span class="n">lock</span><span class="o">();</span>
</span><span class="line">            <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                <span class="kt">long</span> <span class="n">now</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">ticker</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>
</span><span class="line">                <span class="n">preWriteCleanup</span><span class="o">(</span><span class="n">now</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">                <span class="c1">// 快照保证</span>
</span><span class="line">                <span class="n">AtomicReferenceArray</span><span class="o">&lt;</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">table</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">table</span><span class="o">;</span>
</span><span class="line">                <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">hash</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">                <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">first</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">                <span class="c1">// 查找一个存在的entry节点，和上面的getEntry方法基本一致。</span>
</span><span class="line">                <span class="k">for</span> <span class="o">(</span><span class="n">e</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">K</span> <span class="n">entryKey</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getHash</span><span class="o">()</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="n">entryKey</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="o">.</span><span class="na">keyEquivalence</span><span class="o">.</span><span class="na">equivalent</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">entryKey</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                        <span class="c1">// 如果存在我们想要的节点</span>
</span><span class="line">                        <span class="n">ValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">valueReference</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getValueReference</span><span class="o">();</span>
</span><span class="line">                        <span class="k">if</span> <span class="o">(</span><span class="n">valueReference</span><span class="o">.</span><span class="na">isLoading</span><span class="o">()</span> <span class="o">||</span> <span class="o">(</span><span class="n">checkTime</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">e</span><span class="o">.</span><span class="na">getWriteTime</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">map</span><span class="o">.</span><span class="na">refreshNanos</span><span class="o">)))</span> <span class="o">{</span>
</span><span class="line">                            <span class="c1">// 如果loading正在处理，并且发现该节点引用的写时间未超期刷新周期，则返回null</span>
</span><span class="line">                            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">                        <span class="o">}</span>
</span><span class="line">
</span><span class="line">                        <span class="c1">// continue returning old value while loading</span>
</span><span class="line">                        <span class="o">++</span><span class="n">modCount</span><span class="o">;</span>
</span><span class="line">                        <span class="n">LoadingValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">loadingValueReference</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LoadingValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;(</span>
</span><span class="line">                                <span class="n">valueReference</span><span class="o">);</span><span class="c1">//使用老的值引用</span>
</span><span class="line">                        <span class="n">e</span><span class="o">.</span><span class="na">setValueReference</span><span class="o">(</span><span class="n">loadingValueReference</span><span class="o">);</span>
</span><span class="line">                        <span class="k">return</span> <span class="n">loadingValueReference</span><span class="o">;</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">
</span><span class="line">                <span class="o">++</span><span class="n">modCount</span><span class="o">;</span>
</span><span class="line">                <span class="n">LoadingValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">loadingValueReference</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LoadingValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;();</span>
</span><span class="line">                <span class="n">e</span> <span class="o">=</span> <span class="n">newEntry</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">first</span><span class="o">);</span><span class="c1">//一个新的节点，存放的hash链头部</span>
</span><span class="line">                <span class="n">e</span><span class="o">.</span><span class="na">setValueReference</span><span class="o">(</span><span class="n">loadingValueReference</span><span class="o">);</span>
</span><span class="line">                <span class="n">table</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span><span class="c1">// 插入到列表中</span>
</span><span class="line">                <span class="k">return</span> <span class="n">loadingValueReference</span><span class="o">;</span><span class="c1">//返回新的值引用</span>
</span><span class="line">            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">                <span class="n">unlock</span><span class="o">();</span>
</span><span class="line">                <span class="n">postWriteCleanup</span><span class="o">();</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>lockedGetOrLoad方法</em></p>

<p>如方法名所见，该方法是加锁加载key对应的值引用。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lockedGetOrLoad方法 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"> <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 这里开始从我们实现cacheLoader继承类中的load方法获取 key对应的值。</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * 加锁get或者load</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">V</span> <span class="nf">lockedGetOrLoad</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">CacheLoader</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">loader</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class="line">            <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span><span class="o">;</span>
</span><span class="line">            <span class="n">ValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">valueReference</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">            <span class="n">LoadingValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">loadingValueReference</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">            <span class="kt">boolean</span> <span class="n">createNewEntry</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 确保线程安全，使用加锁来确保加载。当然这个也是针对segment粒度来加的</span>
</span><span class="line">            <span class="n">lock</span><span class="o">();</span>
</span><span class="line">            <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                <span class="c1">// re-read ticker once inside the lock</span>
</span><span class="line">                <span class="kt">long</span> <span class="n">now</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">ticker</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>
</span><span class="line">                <span class="n">preWriteCleanup</span><span class="o">(</span><span class="n">now</span><span class="o">);</span><span class="c1">// 加锁清GC遗留引用数据和超时数据</span>
</span><span class="line">
</span><span class="line">                <span class="kt">int</span> <span class="n">newCount</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">                <span class="n">AtomicReferenceArray</span><span class="o">&lt;</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">table</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">table</span><span class="o">;</span>
</span><span class="line">                <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">hash</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span><span class="c1">// 根据hash和table长度来确定index索引</span>
</span><span class="line">                <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">first</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">                <span class="k">for</span> <span class="o">(</span><span class="n">e</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">K</span> <span class="n">entryKey</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getHash</span><span class="o">()</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="n">entryKey</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="o">.</span><span class="na">keyEquivalence</span><span class="o">.</span><span class="na">equivalent</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">entryKey</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">valueReference</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getValueReference</span><span class="o">();</span>
</span><span class="line">                        <span class="k">if</span> <span class="o">(</span><span class="n">valueReference</span><span class="o">.</span><span class="na">isLoading</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                            <span class="n">createNewEntry</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span><span class="c1">// 如果正在加载，则返回false，表示不需要新建entry</span>
</span><span class="line">                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                            <span class="c1">// 对value进行判断处理，</span>
</span><span class="line">                            <span class="n">V</span> <span class="n">value</span> <span class="o">=</span> <span class="n">valueReference</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class="line">                            <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                                <span class="c1">// 相关通知操作，GC原因回收了</span>
</span><span class="line">                                <span class="n">enqueueNotification</span><span class="o">(</span><span class="n">entryKey</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">valueReference</span><span class="o">,</span> <span class="n">RemovalCause</span><span class="o">.</span><span class="na">COLLECTED</span><span class="o">);</span>
</span><span class="line">                            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">isExpired</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">now</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                                <span class="c1">// This is a duplicate check, as preWriteCleanup already purged expired</span>
</span><span class="line">                                <span class="c1">// entries, but let&#39;s accomodate an incorrect expiration queue.</span>
</span><span class="line">                                <span class="n">enqueueNotification</span><span class="o">(</span><span class="n">entryKey</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">valueReference</span><span class="o">,</span> <span class="n">RemovalCause</span><span class="o">.</span><span class="na">EXPIRED</span><span class="o">);</span>
</span><span class="line">                            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                                <span class="c1">// cache存在value，命中缓存</span>
</span><span class="line">                                <span class="n">recordLockedRead</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">now</span><span class="o">);</span>
</span><span class="line">                                <span class="n">statsCounter</span><span class="o">.</span><span class="na">recordHits</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">                                <span class="c1">// we were concurrent with loading; don&#39;t consider refresh</span>
</span><span class="line">                                <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">                            <span class="o">}</span>
</span><span class="line">
</span><span class="line">                            <span class="c1">// 最后写count，保证前面的变量操作，对内存立刻可见</span>
</span><span class="line">                            <span class="n">writeQueue</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class="line">                            <span class="n">accessQueue</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class="line">                            <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">newCount</span><span class="o">;</span> <span class="c1">// write-volatile</span>
</span><span class="line">                        <span class="o">}</span>
</span><span class="line">                        <span class="k">break</span><span class="o">;</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">
</span><span class="line">                <span class="c1">// 处理需要新增entry，从load方法获取的逻辑</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">createNewEntry</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">loadingValueReference</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LoadingValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;();</span>
</span><span class="line">
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">e</span> <span class="o">=</span> <span class="n">newEntry</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">first</span><span class="o">);</span><span class="c1">// segment神马都没有的时候，新建一个</span>
</span><span class="line">                        <span class="n">e</span><span class="o">.</span><span class="na">setValueReference</span><span class="o">(</span><span class="n">loadingValueReference</span><span class="o">);</span>
</span><span class="line">                        <span class="n">table</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class="line">                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">e</span><span class="o">.</span><span class="na">setValueReference</span><span class="o">(</span><span class="n">loadingValueReference</span><span class="o">);</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">                <span class="n">unlock</span><span class="o">();</span>
</span><span class="line">                <span class="n">postWriteCleanup</span><span class="o">();</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// ok,上面加锁部分建完了新的entry，设置完valueReference</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">createNewEntry</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">try</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">                    <span class="c1">// 在entry同步，但检测到递归load则会快速失败。当entry被copy时候可能绕行，但是绝大部分时间会快速失败</span>
</span><span class="line">                    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                        <span class="k">return</span> <span class="nf">loadSync</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">loadingValueReference</span><span class="o">,</span> <span class="n">loader</span><span class="o">);</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">statsCounter</span><span class="o">.</span><span class="na">recordMisses</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span><span class="c1">// 处理命中率</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                <span class="c1">// 如果正在加载，则等待加载完成</span>
</span><span class="line">                <span class="c1">// The entry already exists. Wait for loading.</span>
</span><span class="line">                <span class="k">return</span> <span class="nf">waitForLoadingValue</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">valueReference</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Tips：不管是lockget还是refresh，最后都会调用不同的load方法，只不过refresh使用<code>loadingFuture.addListener</code>方式来异步加载值而已。其最后都会调用<code>getAndRecordStats</code>方法。</p>

  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>getAndRecordStats </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"> <span class="n">V</span> <span class="nf">getAndRecordStats</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">LoadingValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">loadingValueReference</span><span class="o">,</span>
</span><span class="line">                <span class="n">ListenableFuture</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">newValue</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class="line">            <span class="n">V</span> <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">            <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                <span class="n">value</span> <span class="o">=</span> <span class="n">getUninterruptibly</span><span class="o">(</span><span class="n">newValue</span><span class="o">);</span><span class="c1">// 非中断方式调用future.get方法获取值</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidCacheLoadException</span><span class="o">(</span><span class="s">&quot;CacheLoader returned null for key &quot;</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="n">statsCounter</span><span class="o">.</span><span class="na">recordLoadSuccess</span><span class="o">(</span><span class="n">loadingValueReference</span><span class="o">.</span><span class="na">elapsedNanos</span><span class="o">());</span>
</span><span class="line">                <span class="c1">//线程安全地把key和value存放到cache中。</span>
</span><span class="line">                <span class="n">storeLoadedValue</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">loadingValueReference</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class="line">                <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">statsCounter</span><span class="o">.</span><span class="na">recordLoadException</span><span class="o">(</span><span class="n">loadingValueReference</span><span class="o">.</span><span class="na">elapsedNanos</span><span class="o">());</span>
</span><span class="line">                    <span class="n">removeLoadingValue</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">loadingValueReference</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：上面代码会调用storeLoadedValue方法,这个方法和后面的put方法实现很相似.如下:</p>

  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>storeLoadedValue </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 首先，这里是线程安全的。把key和value存放到cache中。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kt">boolean</span> <span class="nf">storeLoadedValue</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">LoadingValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">oldValueReference</span><span class="o">,</span> <span class="n">V</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">lock</span><span class="o">();</span>
</span><span class="line">            <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                <span class="kt">long</span> <span class="n">now</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">ticker</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>
</span><span class="line">                <span class="n">preWriteCleanup</span><span class="o">(</span><span class="n">now</span><span class="o">);</span><span class="c1">// clean工作</span>
</span><span class="line">
</span><span class="line">                <span class="kt">int</span> <span class="n">newCount</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">newCount</span> <span class="o">&gt;</span> <span class="k">this</span><span class="o">.</span><span class="na">threshold</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 保证大小够用ensure capacity</span>
</span><span class="line">                    <span class="n">expand</span><span class="o">();</span>
</span><span class="line">                    <span class="n">newCount</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span><span class="c1">// 扩容之后，count可能会变化</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">
</span><span class="line">                <span class="n">AtomicReferenceArray</span><span class="o">&lt;</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">table</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">table</span><span class="o">;</span>
</span><span class="line">                <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">hash</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">                <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">first</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">                <span class="c1">// 如果当前segment中已经存在了该key元素</span>
</span><span class="line">                <span class="k">for</span> <span class="o">(</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">K</span> <span class="n">entryKey</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class="line">                    <span class="c1">// 找到hash链中对应的相等节点,则add操作;但是如果value是活跃的,则先移除</span>
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getHash</span><span class="o">()</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="n">entryKey</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="o">.</span><span class="na">keyEquivalence</span><span class="o">.</span><span class="na">equivalent</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">entryKey</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">ValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">valueReference</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getValueReference</span><span class="o">();</span>
</span><span class="line">                        <span class="n">V</span> <span class="n">entryValue</span> <span class="o">=</span> <span class="n">valueReference</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">                        <span class="c1">// 实现就有value引用的情况下</span>
</span><span class="line">                        <span class="k">if</span> <span class="o">(</span><span class="n">oldValueReference</span> <span class="o">==</span> <span class="n">valueReference</span> <span class="o">||</span> <span class="o">(</span><span class="n">entryValue</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">valueReference</span> <span class="o">!=</span> <span class="n">UNSET</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                            <span class="o">++</span><span class="n">modCount</span><span class="o">;</span>
</span><span class="line">                            <span class="c1">// 首先如果value引用活跃,则让放入等待GC回收队列中,等待被回收.</span>
</span><span class="line">                            <span class="k">if</span> <span class="o">(</span><span class="n">oldValueReference</span><span class="o">.</span><span class="na">isActive</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                                <span class="n">RemovalCause</span> <span class="n">cause</span> <span class="o">=</span> <span class="o">(</span><span class="n">entryValue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">RemovalCause</span><span class="o">.</span><span class="na">COLLECTED</span>
</span><span class="line">                                        <span class="o">:</span> <span class="n">RemovalCause</span><span class="o">.</span><span class="na">REPLACED</span><span class="o">;</span>
</span><span class="line">                                <span class="c1">// 如果监听类配置了,则这里会触发监听方法响应</span>
</span><span class="line">                                <span class="n">enqueueNotification</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">oldValueReference</span><span class="o">,</span> <span class="n">cause</span><span class="o">);</span>
</span><span class="line">                                <span class="n">newCount</span><span class="o">--;</span>
</span><span class="line">                            <span class="o">}</span>
</span><span class="line">                            <span class="c1">// 更新新的值引用,如上所述,如果有老值,不直接删除,让GC回收.</span>
</span><span class="line">                            <span class="c1">// 这里会操作访问队列和写队列,还有其他对外的抽象监听方法调用等</span>
</span><span class="line">                            <span class="n">setValue</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">newValue</span><span class="o">,</span> <span class="n">now</span><span class="o">);</span>
</span><span class="line">                            <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">newCount</span><span class="o">;</span> <span class="c1">// write-volatile,确保modCount能及时写入共享内存中</span>
</span><span class="line">                            <span class="n">evictEntries</span><span class="o">();</span><span class="c1">// 移除操作,put方法也调用.</span>
</span><span class="line">                            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">                        <span class="o">}</span>
</span><span class="line">
</span><span class="line">                        <span class="c1">//那如果value引用已经没有了呢?!也就是value引用已经被回收了,而不只是value值为null</span>
</span><span class="line">                        <span class="c1">// 新建一个value引用就好了呀?为什么返回false呢???</span>
</span><span class="line">                        <span class="n">valueReference</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeightedStrongValueReference</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;(</span><span class="n">newValue</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line">                        <span class="n">enqueueNotification</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">valueReference</span><span class="o">,</span> <span class="n">RemovalCause</span><span class="o">.</span><span class="na">REPLACED</span><span class="o">);</span>
</span><span class="line">                        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">
</span><span class="line">                <span class="c1">// 如果事先segment数组中没有该key,则新建一个节点entry</span>
</span><span class="line">                <span class="o">++</span><span class="n">modCount</span><span class="o">;</span>
</span><span class="line">                <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">newEntry</span> <span class="o">=</span> <span class="n">newEntry</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">first</span><span class="o">);</span>
</span><span class="line">                <span class="n">setValue</span><span class="o">(</span><span class="n">newEntry</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">newValue</span><span class="o">,</span> <span class="n">now</span><span class="o">);</span>
</span><span class="line">                <span class="n">table</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">newEntry</span><span class="o">);</span>
</span><span class="line">                <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">newCount</span><span class="o">;</span> <span class="c1">// write-volatile</span>
</span><span class="line">                <span class="n">evictEntries</span><span class="o">();</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">                <span class="n">unlock</span><span class="o">();</span>
</span><span class="line">                <span class="n">postWriteCleanup</span><span class="o">();</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="put">5.5 PUT方法实现</h3>

<p>和 get方法相比，put方法则相对而言，简单了很多，直接上<code>Guava LocalCache</code>的实现。</p>

<pre><code>1. 加锁，对于更新操作，是需要加锁来确保线程安全的。

2. put操作，所以需要确保当前的空间，足够存放；否则需要扩容【expand】

3. 查看当前cache中是否已经存在该对象对应的key；
3.1. 如果存在，则更新相关的value，并且更新相关的时间参数；
3.2. 如果不存在，则创建一个新entry，然后放入table数组中。

4. 在上面的一些步骤中，还涉及到移除一些参数。【evictEntries】.当我们put操作的时候, 对于map的segment容量就可能会有变更,这样子就需要调用evict方法,决定是否需要采取移除多余的元素.
</code></pre>

<p><em>expand方法</em></p>

<p>扩展table的大小空间。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>expand方法 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 如果需要并且没到限制大小，则扩展表table。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="nd">@GuardedBy</span><span class="o">(</span><span class="s">&quot;Segment.this&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="kt">void</span> <span class="nf">expand</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="n">AtomicReferenceArray</span><span class="o">&lt;</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">oldTable</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span><span class="c1">// 原子引用</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">oldCapacity</span> <span class="o">=</span> <span class="n">oldTable</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">oldCapacity</span> <span class="o">&gt;=</span> <span class="n">MAXIMUM_CAPACITY</span><span class="o">)</span> <span class="o">{</span><span class="c1">// 无法扩容</span>
</span><span class="line">                <span class="k">return</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="cm">/**</span>
</span><span class="line"><span class="cm">             * 把每个list的nodes分类到新的map中。 因为我们这里使用的是2的指数次扩容，所以在每个bin的元素，要么还是同样的index中待着，</span>
</span><span class="line"><span class="cm">             * 要么移到2的指数个偏移。我们排除了不必要的节点创建（可以优化场景：因为老的节点们下一个fields不会被改变，所以老的节点可以被重复使用）。</span>
</span><span class="line"><span class="cm">             *</span>
</span><span class="line"><span class="cm">             * 以默认域设置来统计，当我们双倍扩展table时，仅仅只有六分之一的节点需要clone。这些节点将会被GC掉， 在他们不在被任务reader线程（这些线程可能正遍历在table的中间部分）引用的时候。</span>
</span><span class="line"><span class="cm">             *</span>
</span><span class="line"><span class="cm">             */</span>
</span><span class="line">
</span><span class="line">            <span class="kt">int</span> <span class="n">newCount</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
</span><span class="line">            <span class="n">AtomicReferenceArray</span><span class="o">&lt;</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">newTable</span> <span class="o">=</span> <span class="n">newEntryArray</span><span class="o">(</span><span class="n">oldCapacity</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">            <span class="n">threshold</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">/</span> <span class="mi">4</span><span class="o">;</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">newMask</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">oldIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">oldIndex</span> <span class="o">&lt;</span> <span class="n">oldCapacity</span><span class="o">;</span> <span class="o">++</span><span class="n">oldIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="c1">// 我们必须保证任务对老Map的正在进行的读操作可以处理，所以我们不能每个bin设置null</span>
</span><span class="line">                <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">head</span> <span class="o">=</span> <span class="n">oldTable</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">oldIndex</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span>
</span><span class="line">                    <span class="kt">int</span> <span class="n">headIndex</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">getHash</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">newMask</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">                    <span class="c1">// hash链只有一个节点的情况</span>
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">newTable</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">headIndex</span><span class="o">,</span> <span class="n">head</span><span class="o">);</span>
</span><span class="line">                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">                        <span class="c1">// 这里可以重复使用链表，如注释所述，2的倍数扩展，很多引用hash值还是一样，所以把链表头直接set过去就可以了</span>
</span><span class="line">                        <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span><span class="line">                        <span class="kt">int</span> <span class="n">tailIndex</span> <span class="o">=</span> <span class="n">headIndex</span><span class="o">;</span>
</span><span class="line">                        <span class="k">for</span> <span class="o">(</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                            <span class="kt">int</span> <span class="n">newIndex</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getHash</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">newMask</span><span class="o">;</span>
</span><span class="line">                            <span class="k">if</span> <span class="o">(</span><span class="n">newIndex</span> <span class="o">!=</span> <span class="n">tailIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                                <span class="c1">// 如果hash更变了，则引用改变。将需要复制前面的节点</span>
</span><span class="line">                                <span class="n">tailIndex</span> <span class="o">=</span> <span class="n">newIndex</span><span class="o">;</span>
</span><span class="line">                                <span class="n">tail</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span><span class="line">                            <span class="o">}</span>
</span><span class="line">                        <span class="o">}</span>
</span><span class="line">                        <span class="n">newTable</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">tailIndex</span><span class="o">,</span> <span class="n">tail</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">                        <span class="c1">// Clone nodes leading up to the tail.</span>
</span><span class="line">                        <span class="k">for</span> <span class="o">(</span><span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span> <span class="n">e</span> <span class="o">!=</span> <span class="n">tail</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                            <span class="kt">int</span> <span class="n">newIndex</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getHash</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">newMask</span><span class="o">;</span>
</span><span class="line">                            <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">newNext</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">newIndex</span><span class="o">);</span>
</span><span class="line">                            <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">newFirst</span> <span class="o">=</span> <span class="n">copyEntry</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">newNext</span><span class="o">);</span>
</span><span class="line">                            <span class="k">if</span> <span class="o">(</span><span class="n">newFirst</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                                <span class="c1">// 设置新位置的节点链表</span>
</span><span class="line">                                <span class="n">newTable</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">newIndex</span><span class="o">,</span> <span class="n">newFirst</span><span class="o">);</span>
</span><span class="line">                            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                                <span class="c1">// 移除节点相关操作</span>
</span><span class="line">                                <span class="n">removeCollectedEntry</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class="line">                                <span class="n">newCount</span><span class="o">--;</span>
</span><span class="line">                            <span class="o">}</span>
</span><span class="line">                        <span class="o">}</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">table</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">;</span>
</span><span class="line">            <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">newCount</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>evictEntries方法</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>evictEntries方法 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 如果segment满了，则执行evict操作。这个调用仅仅发生在增加一个新的entry并且增加了count的时候。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="nd">@GuardedBy</span><span class="o">(</span><span class="s">&quot;Segment.this&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="kt">void</span> <span class="nf">evictEntries</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(!</span><span class="n">map</span><span class="o">.</span><span class="na">evictsBySize</span><span class="o">())</span> <span class="o">{</span> <span class="c1">// 如果没有设置cache的权重，则不执行evict操作</span>
</span><span class="line">                <span class="k">return</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="c1">//清除recencyQueue队列，按照指定的相关顺序来读取entries并且更新驱赶的元数据。</span>
</span><span class="line">            <span class="c1">// 把他们加到相关的evict列表 （这表明他们可以被移除出map中，由于被加到了recencyQueue队列中。）</span>
</span><span class="line">            <span class="n">drainRecencyQueue</span><span class="o">();</span>
</span><span class="line">            <span class="k">while</span> <span class="o">(</span><span class="n">totalWeight</span> <span class="o">&gt;</span> <span class="n">maxSegmentWeight</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 当总的权重大于设置的最大段权重，才会执行remove操作</span>
</span><span class="line">                <span class="n">ReferenceEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">getNextEvictable</span><span class="o">();</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(!</span><span class="n">removeEntry</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getHash</span><span class="o">(),</span> <span class="n">RemovalCause</span><span class="o">.</span><span class="na">SIZE</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">AssertionError</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idcacheoverwriteguava-cachea"><a id="CacheOverWrite">Guava Cache扩展</a></h2>

<p>Guava的CacheBuilder是一个final对象，不允许继承。但是，其提供看专门用来扩展的接口供重写部分方法。分别为<code>ForwardingCache</code>和<code>ForwardingLoadingCache</code>，对应着Cache类和LoadingCache类。</p>

<p>两个扩展类，采用委托模式和/或装饰模式，提供抽象实现。</p>

<p>委派模式（Delegate）是面向对象设计模式中常用的一种模式。这种模式的原理为类B和类A是两个互相没有任何关系的类，B具有和A一模一样的方法和属性；并且调用B中的方法，属性就是调用A中同名的方法和属性。B好像就是一个受A授权委托的中介。第三方的代码不需要知道A的存在，也不需要和A发生直接的联系，通过B就可以直接使用A的功能，这样既能够使用到A的各种公能，又能够很好的将A保护起来了。</p>

<p>Decorator装饰模式是一种结构型模式，它主要是解决：“过度地使用了继承来扩展对象的功能”，由于继承为类型引入的静态特质，使得这种扩展方式缺乏灵活性；并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀（多继承）。继承为类型引入的静态特质的意思是说以继承的方式使某一类型要获得功能是在编译时。所谓静态，是指在编译时；动态，是指在运行时。</p>

<p>GoF《设计模式》中说道：动态的给一个对象添加一些额外的职责。就增加功能而言，Decorator模式比生成子类更为灵活。</p>

<p>两种模式其实很相近。委派模式的最终结果就是达到装饰模式的目的。</p>

<p>简单地来看看ForwardingCache抽象类的实现：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ForwardingCache抽象类 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * 一个缓存将所有他的方法调用转到其他cache上。子类需要重写一个或者多个方法来改变背后cache的行为。</span>
</span><span class="line"><span class="cm"> * 因此，在该类里面会有一个delegate的成员，负责调用具体的cache类对象方法。</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="nd">@Beta</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ForwardingCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">ForwardingObject</span> <span class="kd">implements</span> <span class="n">Cache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/** Constructor for use by subclasses. */</span>
</span><span class="line">  <span class="kd">protected</span> <span class="nf">ForwardingCache</span><span class="o">()</span> <span class="o">{}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">protected</span> <span class="kd">abstract</span> <span class="n">Cache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">delegate</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * @since 11.0</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="nd">@Nullable</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">V</span> <span class="nf">getIfPresent</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">delegate</span><span class="o">().</span><span class="na">getIfPresent</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * @since 11.0</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">Callable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">valueLoader</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">delegate</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">valueLoader</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * @since 11.0</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">ImmutableMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">getAllPresent</span><span class="o">(</span><span class="n">Iterable</span><span class="o">&lt;?&gt;</span> <span class="n">keys</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">delegate</span><span class="o">().</span><span class="na">getAllPresent</span><span class="o">(</span><span class="n">keys</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * @since 11.0</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">delegate</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * @since 12.0</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">putAll</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">K</span><span class="o">,?</span> <span class="kd">extends</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">delegate</span><span class="o">().</span><span class="na">putAll</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">invalidate</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">delegate</span><span class="o">().</span><span class="na">invalidate</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * @since 11.0</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">invalidateAll</span><span class="o">(</span><span class="n">Iterable</span><span class="o">&lt;?&gt;</span> <span class="n">keys</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">delegate</span><span class="o">().</span><span class="na">invalidateAll</span><span class="o">(</span><span class="n">keys</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">invalidateAll</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">delegate</span><span class="o">().</span><span class="na">invalidateAll</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">delegate</span><span class="o">().</span><span class="na">size</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">CacheStats</span> <span class="nf">stats</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">delegate</span><span class="o">().</span><span class="na">stats</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">ConcurrentMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">asMap</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">delegate</span><span class="o">().</span><span class="na">asMap</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cleanUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">delegate</span><span class="o">().</span><span class="na">cleanUp</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * A simplified version of {@link ForwardingCache} where subclasses can pass in an already</span>
</span><span class="line"><span class="cm">   * constructed {@link Cache} as the delegete.</span>
</span><span class="line"><span class="cm">   *</span>
</span><span class="line"><span class="cm">   * @since 10.0</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="nd">@Beta</span>
</span><span class="line">  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SimpleForwardingCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">ForwardingCache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Cache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">protected</span> <span class="nf">SimpleForwardingCache</span><span class="o">(</span><span class="n">Cache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">this</span><span class="o">.</span><span class="na">delegate</span> <span class="o">=</span> <span class="n">Preconditions</span><span class="o">.</span><span class="na">checkNotNull</span><span class="o">(</span><span class="n">delegate</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kd">final</span> <span class="n">Cache</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">delegate</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idendguava-cache-a"><a id="End">Guava Cache 总结</a></h2>

<p>Guava Cache的实现,核心数据结构和算法都是和JDK 1.6版本的<code>ConcurrentHashMap</code>一致.因此,如果你熟悉ConcurrentHashMap实现原理,对Cache是很容易明白的.</p>

<p>此外,Guava 还提供了相当多的优秀的工具类给开发者快速开发业务. 在后续的博客中, 会进一步介绍.</p>

<p>关于Guava 的源码学习, 博主都将一些注解和思考, 放在了源码解读中. 关于源码的地址, 请参考github: <a href="https://github.com/ketao1989/cnGuava.git">https://github.com/ketao1989/cnGuava.git</a></p>

<blockquote>
  <blockquote>
    <p>源码被裁剪过, 删掉了一些不太关注的GWT相关源码等, 所以是无法编译的.</p>
  </blockquote>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis Cookbook 之 使用Redis存储基于时间序列的数据和进行分析]]></title>
    <link href="http://kxcoder.github.io/blog/2014/11/29/Redis-Cookbook-Analytics-Time-Based-Data/"/>
    <updated>2014-11-29T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2014/11/29/Redis-Cookbook-Analytics-Time-Based-Data</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Problem">问题</a></li>
  <li><a href="#Solution">解决方法</a></li>
  <li><a href="#Discussion">讨论</a></li>
</ol>

<h2 id="a-idproblema">1. <a id="Problem">问题</a></h2>

<p>存储分析或者其他基于时间序列的数据，对于传统的存储系统（比如RDBMS）来说，是有一点挑战的。可能你想要对输入流量的速率进行限制（要求快速和高并发更新）或者简单地追踪网站访问者（或者其他更复杂的度量指标），然后以图表的形式画出来。</p>

<p>虽然当前在其他系统中，有很多的方式存储这类数据；但是，Redis是一个非常优秀的候选者，由于它强大的数据结构。</p>

<!--more-->

<h2 id="a-idsolutiona">2. <a id="Solution">解决方法</a></h2>

<p>Redis 理念上非常适合存储这类数据，以及跟踪某种特定的事件。具有原子性的，并且非常快的（O(1)时间复杂度）<code>HINCR</code>和<code>HINCRBY</code>命令，结合快速数据查找，使得它非常适合这类场景。</p>

<p>在Redis中一种好的高效内存存储这类数据的方式是使用hash来存储统计值，使用<code>HINCRBY</code>增加它们，然后使用<code>HGET</code>和<code>HMGET</code>来获取这些数据。查找位于top位置的元素通过<code>SORT</code>命令也是很容易做到的。</p>

<h2 id="a-iddiscussiona">3. <a id="Discussion">讨论</a></h2>

<p>为了简单起见，在这个实例中，我们将只追踪网页点击率数据。这也可以很简单地扩展到其他任务类型的事件。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>网页点击率数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;active_support/time&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 增加访问者的点击数，id表，date键，field数值</span>
</span><span class="line"><span class="k">def</span> <span class="nf">add_hit</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">sadd</span><span class="p">(</span><span class="s2">&quot;clients&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">hincrby</span><span class="p">(</span><span class="s2">&quot;stats/client:</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;total&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">hincrby</span><span class="p">(</span><span class="s2">&quot;stats/client:</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:number</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们在这里把用户（如果我们追踪网站的访问者，那么可以只简单地根据IP地址来区分用户）的ID添加到访问者列表中，然后记录在两个不同时间空挡中的点击数：”total”总数和日常的数。因此，这就允许我们追踪每天的网页点击数和一段时间内的全局总数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>网页点击率数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># 获取某id的key对应的值</span>
</span><span class="line"><span class="k">def</span> <span class="nf">hits</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">day</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">hget</span><span class="p">(</span><span class="s2">&quot;stats/client:</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">day</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:number</span><span class="p">))</span><span class="o">.</span><span class="n">to_i</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 判断是否超过阈值</span>
</span><span class="line"><span class="k">def</span> <span class="nf">over_limit?</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">limit</span><span class="p">)</span>
</span><span class="line">    <span class="n">hits</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">limit</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这允许我们通过简单地检查访问者访问，是否超过了我们设置的在一段时间区间内的阈值，来执行速率限制功能。</p>

<p>获取一个给定时间区间内的数据，也是一项琐碎但是高效的操作，我们可以用来画图表或者以其他方式展示这些数据：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>展示数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># 计算给定开始时间和结束时间对应的key值</span>
</span><span class="line"><span class="k">def</span> <span class="nf">keys</span><span class="p">(</span><span class="n">beg_p</span><span class="p">,</span> <span class="n">end_p</span><span class="p">)</span>
</span><span class="line">    <span class="n">keys</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="k">while</span> <span class="n">beg_p</span> <span class="o">&lt;=</span> <span class="n">end_p</span>
</span><span class="line">        <span class="n">keys</span> <span class="o">&lt;&lt;</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class="line">            <span class="k">yield</span><span class="p">(</span><span class="n">beg_p</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:number</span><span class="p">))</span>
</span><span class="line">        <span class="k">else</span>
</span><span class="line">            <span class="n">beg_p</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:number</span><span class="p">)</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">        <span class="n">beg_p</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="n">keys</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">stats_for_period</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">beginning_of_period</span><span class="p">,</span> <span class="n">end_of_period</span><span class="p">)</span>
</span><span class="line">    <span class="n">beg_p</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">beginning_of_period</span><span class="p">)</span>
</span><span class="line">    <span class="n">end_p</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">end_of_period</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># 获取id表中key对应的数据集</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">hmget</span> <span class="s2">&quot;stats/client:</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">keys</span><span class="p">(</span><span class="n">beg_p</span><span class="p">,</span> <span class="n">end_p</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们也可以获取我们存储数据中在任何时间空挡的位于top的用户，可以使用<code>SORT</code>命令完成。SORT允许我们排序一个集合set，有序的集合sorted set,，或者本例中得列表list，访问者可以选择使用外键-我们时间片，然后指定order，offset，limit等参数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>展示数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># 按照key为period进行排序，默认DESC，前0-limit个元素</span>
</span><span class="line"><span class="k">def</span> <span class="nf">top_clients</span><span class="p">(</span><span class="n">period</span> <span class="o">=</span> <span class="s2">&quot;total&quot;</span><span class="p">,</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line"><span class="vg">$redis</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="s2">&quot;clients&quot;</span><span class="p">,</span> <span class="ss">:by</span> <span class="o">=&gt;</span> <span class="s2">&quot;stats/client:*-&gt;</span><span class="si">#{</span><span class="n">period</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s2">&quot;DESC&quot;</span><span class="p">,</span><span class="ss">:get</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;#&quot;</span><span class="p">,</span> <span class="s2">&quot;stats/client:*-&gt;</span><span class="si">#{</span><span class="n">period</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">limit</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用hash的实现方式，对于存储，检索和更新都是高度优化的（所有都是O(1)操作），但是对于计算top用户而言则不是（尤其是一个时间区间内）。你需要要求这些操作-比如当你显示一个高分值表格，你可以重新使用有序集合sorted set来完成排序，这样可以保证你拿到的数据是有序的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>展示数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">add_hit</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">zincrby</span><span class="p">(</span><span class="s2">&quot;stats/total&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">zincrby</span><span class="p">(</span><span class="s2">&quot;stats/</span><span class="si">#{</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:number</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">hits</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">day</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">zrank</span><span class="p">(</span><span class="s2">&quot;stats/</span><span class="si">#{</span><span class="n">day</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:number</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">over_limit?</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">limit</span><span class="p">)</span>
</span><span class="line">    <span class="n">hits</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">limit</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">stats_for_period</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">beginning_of_period</span><span class="p">,</span> <span class="n">end_of_period</span><span class="p">)</span>
</span><span class="line">    <span class="n">beg_p</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">beginning_of_period</span><span class="p">)</span>
</span><span class="line">    <span class="n">end_p</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">end_of_period</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">keys</span><span class="p">(</span><span class="n">beg_p</span><span class="p">,</span> <span class="n">end_p</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="vg">$redis</span><span class="o">.</span><span class="n">zrank</span><span class="p">(</span><span class="s2">&quot;stats/</span><span class="si">#{</span><span class="n">k</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">top_clients</span><span class="p">(</span><span class="n">period</span> <span class="o">=</span> <span class="s2">&quot;total&quot;</span><span class="p">,</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">zrevrange</span><span class="p">(</span><span class="s2">&quot;stats/</span><span class="si">#{</span><span class="n">period</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="ss">:withscores</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">top_for_period</span><span class="p">(</span><span class="n">beginning_of_period</span><span class="p">,</span> <span class="n">end_of_period</span><span class="p">,</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">    <span class="n">beg_p</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">beginning_of_period</span><span class="p">)</span>
</span><span class="line">    <span class="n">end_p</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">end_of_period</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">result_key</span> <span class="o">=</span> <span class="s2">&quot;top/</span><span class="si">#{</span><span class="n">beg_p</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:number</span><span class="p">)</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">end_p</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:number</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">return</span> <span class="vg">$redis</span><span class="o">.</span><span class="n">zrevrange</span><span class="p">(</span><span class="n">result_key</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="ss">:withscores</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span> <span class="k">if</span> <span class="vg">$redis</span><span class="o">.</span><span class="n">exists</span> <span class="n">result_key</span>
</span><span class="line">
</span><span class="line">    <span class="vg">$redis</span><span class="o">.</span><span class="n">multi</span> <span class="k">do</span>
</span><span class="line">        <span class="vg">$redis</span><span class="o">.</span><span class="n">zunionstore</span> <span class="n">result_key</span><span class="p">,</span> <span class="n">keys</span><span class="p">(</span><span class="n">beg_p</span><span class="p">,</span> <span class="n">end_p</span><span class="p">){</span><span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="s2">&quot;stats/</span><span class="si">#{</span><span class="n">k</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span> <span class="vg">$redis</span><span class="o">.</span><span class="n">expire</span> <span class="n">result_key</span><span class="p">,</span> <span class="mi">10</span><span class="o">.</span><span class="n">minutes</span>
</span><span class="line">        <span class="vg">$redis</span><span class="o">.</span><span class="n">zrevrange</span> <span class="n">result_key</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="ss">:withscores</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class="line">    <span class="k">end</span><span class="o">.</span><span class="n">last</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Notes：我们保持了<code>ZUNIONSTORE</code>的结果，然后在它上面设置一个超时时间戳。这是一个通用的Redis模式：缓存一个计算昂贵的操作结果，然后每次有请求过来，都会在重新操作之前先检查缓存情况。
在上面的例子中，我们使用hash的地方，我们也可以存储SORT操作的结果，然后使用和EXISTS相似的方式检查它的缓存对象的存在性。</p>

  </blockquote>
</blockquote>

<p>当我们使用有序集合sorted sets时，这些top操作会更高效率的多（因为数据已经是排好序了），但是我们的内存使用率也会更高。</p>

<blockquote>
  <blockquote>
    <p>Warns：这个特定的例子有一个竞争条件：如果缓存不存在，我们可能在结束之前会进行多次<code>ZUNIONSTORE</code>操作。因为我们最后期待的输出显然是相同或者更新的数值结果，因此存在竞争条件比使用<code>WATCH</code>，然后在我们在做客户端的计算时锁定其他访问者，效果可能会更好。</p>
  </blockquote>
</blockquote>

<p>-</p>

<blockquote>
  <blockquote>
    <p><em>Redis 命令</em>:</p>

    <ul>
      <li>
        <p><code>HINCRBY hash-name field increment-value</code></p>

        <p>按照给定的increment-value值增加hash表中存储的对应整数。这个命令和INCRBY很相似，但是和增加字符串不一样，这个使用在hash表中。而且increment-value的值也允许为负数。</p>
      </li>
      <li>
        <p><code>HMGET hash-name field1 [field2 ...]</code></p>

        <p>从给定的hash表中获取一些field值。这个命令和HGET很相似，但是这个允许你在一个单操作中获取一些field值。</p>
      </li>
      <li>
        <p><code>SORT key [BY pattern] [LIMIT offset count] [GET pattern1 [GET pattern2 ...]] [ASC| DESC] [ALPHA] [STORE destination]</code></p>

        <p>允许你排序一个list,set,或者sorted set，比较他们的值。排序也可以是使用外键完成，使用来自字符串或者hashes的模式匹配查询，就像我们在上面的例子中那样：<code>SORT clients BY stats/client:*-&gt;20110407</code>。其中，通配符*可以被set中成员所替换，所以在这些hash表中排序是基于匹配field 为20110407的值来完成的。如果我们把分析数据存储在strings中而不是hash表，则我们可以提交命令：<code>SORT clients BY stats/client:*/20110407</code>。
   使用相同的模式，你除了排好序的list也可以获取更多地数据（比如你用来排序的值）.可选择地，在list里SORT的输出也可以被排序。</p>
      </li>
      <li>
        <p><code>ZRANK set-name member</code></p>

        <p>返回在给定的有序集合中给定成员的排名。</p>
      </li>
      <li>
        <p><code>ZUNIONSTORE destination number-of-keys sorted-set1 [sorted-set2 ...] [WEIGHTS weight1 [weight2 ...]] [AGGREGATE SUM|MIN|MAX]</code></p>

        <p>聚合sorted sets集合，然后作为一个新的sorted set存储。可选择地，你可以为每一个set指定 weight，并且只需聚合函数：sum（默认）,maximum scores, 或者 minimum scores。</p>
      </li>
      <li>
        <p><code>EXISTS key</code></p>

        <p>检查key是否存在。如果key存在则返回1；否则返回0.</p>
      </li>
    </ul>

  </blockquote>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一天一算法之java实现]]></title>
    <link href="http://kxcoder.github.io/blog/2014/11/26/Java-Implement-One-Algorithm-by-Day/"/>
    <updated>2014-11-26T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2014/11/26/Java-Implement-One-Algorithm-by-Day</id>
    <content type="html"><![CDATA[<p>说明：算法背景和解法来自<a href="https://github.com/ketao1989/The-Art-Of-Programming-By-July.git">https://github.com/ketao1989/The-Art-Of-Programming-By-July.git</a>,如有版权问题，请留言告知！</p>

<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#RotateString">旋转字符串</a></li>
  <li><a href="#StringContain">字符包含</a></li>
  <li><a href="#PalindromeString">回文判断</a></li>
  <li><a href="#LongestPalindromeSubString">最长回文子串</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>最近看博客，发现一些有趣的算法，很久没接触，都不清楚了。这里，把上述的github中一些算法用java实现。</p>

<!--more-->

<h2 id="a-idrotatestringa"><a id="RotateString">旋转字符串</a></h2>

<h3 id="section-1">背景</h3>

<p>给定一个字符串，要求把字符串前面的若干个字符移动到字符串的尾部，如把字符串“abcddg”前面的2个字符’a’和’b’移动到字符串的尾部，使得原字符串变成字符串“cdcgab”。请写一个函数完成此功能，要求对长度为n的字符串操作的时间复杂度为 O(n)，空间复杂度为 O(1)。</p>

<h3 id="java-">Java 代码</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>旋转字符串 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/*************************************************************************</span>
</span><span class="line"><span class="cm">	&gt; File Name: RotateString.java</span>
</span><span class="line"><span class="cm">	&gt; Author: ketao</span>
</span><span class="line"><span class="cm">	&gt; Mail: ketao1989@gmail.com</span>
</span><span class="line"><span class="cm">	&gt; Created Time: 2014年11月26日 星期三 16时33分28秒</span>
</span><span class="line"><span class="cm"> ************************************************************************/</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RotateString</span><span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 把一个字符数组，按照指定位置移动</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">rotateString</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">str</span><span class="o">,</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span><span class="kt">int</span> <span class="n">len</span><span class="o">){</span>
</span><span class="line">        <span class="n">reverseString</span><span class="o">(</span><span class="n">str</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">        <span class="n">reverseString</span><span class="o">(</span><span class="n">str</span><span class="o">,</span><span class="n">n</span><span class="o">,</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">        <span class="n">reverseString</span><span class="o">(</span><span class="n">str</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     *反转指定区间的字符数组</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">reverseString</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">str</span><span class="o">,</span><span class="kt">int</span> <span class="n">from</span><span class="o">,</span><span class="kt">int</span> <span class="n">to</span><span class="o">){</span>
</span><span class="line">
</span><span class="line">        <span class="k">while</span><span class="o">(</span><span class="n">from</span> <span class="o">&lt;</span> <span class="n">to</span><span class="o">){</span>
</span><span class="line">            <span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">str</span><span class="o">[</span><span class="n">from</span><span class="o">];</span>
</span><span class="line">            <span class="n">str</span><span class="o">[</span><span class="n">from</span><span class="o">++]</span> <span class="o">=</span> <span class="n">str</span><span class="o">[</span><span class="n">to</span><span class="o">];</span>
</span><span class="line">            <span class="n">str</span><span class="o">[</span><span class="n">to</span><span class="o">--]</span> <span class="o">=</span> <span class="n">ch</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     *测试代码</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class="line">        <span class="kt">char</span><span class="o">[]</span> <span class="n">str</span> <span class="o">=</span> <span class="o">{</span><span class="sc">&#39;a&#39;</span><span class="o">,</span><span class="sc">&#39;b&#39;</span><span class="o">,</span><span class="sc">&#39;c&#39;</span><span class="o">,</span><span class="sc">&#39;d&#39;</span><span class="o">,</span><span class="sc">&#39;c&#39;</span><span class="o">,</span><span class="sc">&#39;g&#39;</span><span class="o">};</span>
</span><span class="line">        <span class="n">rotateString</span><span class="o">(</span><span class="n">str</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">6</span><span class="o">);</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idstringcontaina"><a id="StringContain">字符包含</a></h2>

<h3 id="section-2">背景</h3>

<p>给定两个分别由字母组成的字符串A和字符串B，字符串B的长度比字符串A短。请问，如何最快地判断字符串B中所有字母是否都在字符串A里？简单起见，暂不考虑非字符符号。</p>

<h3 id="java--1">Java 代码</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>字符包含 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/*************************************************************************</span>
</span><span class="line"><span class="cm">	&gt; File Name: StringContain.java</span>
</span><span class="line"><span class="cm">	&gt; Author: ketao</span>
</span><span class="line"><span class="cm">	&gt; Mail: ketao1989@gmail.com</span>
</span><span class="line"><span class="cm">	&gt; Created Time: 2014年11月26日 星期三 21时16分42秒</span>
</span><span class="line"><span class="cm"> ************************************************************************/</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringContain</span><span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isContainString</span><span class="o">(</span><span class="n">String</span> <span class="n">longger</span><span class="o">,</span><span class="n">String</span> <span class="n">shortter</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//26*2个字符，使用long就可以了</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">hash</span> <span class="o">=</span> <span class="mi">0L</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">longger</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
</span><span class="line">            <span class="n">hash</span> <span class="o">|=</span> <span class="o">(</span><span class="mi">1L</span> <span class="o">&lt;&lt;</span> <span class="n">computeLetterBit</span><span class="o">(</span><span class="n">longger</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">shortter</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
</span><span class="line">
</span><span class="line">            <span class="c1">//如果&amp;操作为0，表示该位对应的字符，longger没有包含</span>
</span><span class="line">            <span class="k">if</span><span class="o">((</span><span class="n">hash</span> <span class="o">&amp;</span> <span class="o">(</span><span class="mi">1L</span> <span class="o">&lt;&lt;</span> <span class="n">computeLetterBit</span><span class="o">(</span><span class="n">shortter</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">))))</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">false</span> <span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">computeLetterBit</span><span class="o">(</span><span class="kt">char</span> <span class="n">ch</span><span class="o">){</span>
</span><span class="line">        <span class="k">if</span><span class="o">(</span><span class="n">ch</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">ch</span> <span class="o">&lt;=</span> <span class="sc">&#39;Z&#39;</span><span class="o">){</span>
</span><span class="line">            <span class="k">return</span> <span class="o">(</span><span class="n">ch</span><span class="o">-</span><span class="sc">&#39;A&#39;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span><span class="o">(</span><span class="n">ch</span> <span class="o">&gt;=</span><span class="sc">&#39;a&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">ch</span> <span class="o">&lt;=</span> <span class="sc">&#39;z&#39;</span><span class="o">){</span>
</span><span class="line">            <span class="k">return</span> <span class="o">(</span><span class="n">ch</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">+</span><span class="mi">26</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;参数错误！非法字符！&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class="line">        <span class="n">String</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&quot;AcBbDg&quot;</span><span class="o">;</span>
</span><span class="line">        <span class="n">String</span> <span class="n">b</span> <span class="o">=</span> <span class="s">&quot;AcD&quot;</span><span class="o">;</span>
</span><span class="line">        <span class="n">String</span> <span class="n">c</span> <span class="o">=</span> <span class="s">&quot;DdD&quot;</span><span class="o">;</span>
</span><span class="line">        <span class="n">String</span> <span class="n">d</span> <span class="o">=</span><span class="s">&quot;*AcN&quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span><span class="o">(</span><span class="n">isContainString</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">)){</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;a 包含b所有的字符！！&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;a 不包含b所有的字符！！！&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span><span class="o">(</span><span class="n">isContainString</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">c</span><span class="o">)){</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;a 包含c所有的字符！！&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;a 不包含c所有的字符！！&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span><span class="o">(</span><span class="n">isContainString</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">d</span><span class="o">)){</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;a 包含d所有的字符！&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idpalindromestringa"><a id="PalindromeString">回文判断</a></h2>

<h3 id="section-3">背景</h3>

<p>回文，英文palindrome，指一个顺着读和反过来读都一样的字符串，比如madam、我爱我，这样的短句在智力性、趣味性和艺术性上都颇有特色，中国历史上还有很多有趣的回文诗。</p>

<p>那么，我们的第一个问题就是：判断一个字串是否是回文？</p>

<h3 id="java">Java代码</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>回文判断 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/*************************************************************************</span>
</span><span class="line"><span class="cm">    &gt; File Name: PalindromeString.java</span>
</span><span class="line"><span class="cm">    &gt; Author: ketao</span>
</span><span class="line"><span class="cm">    &gt; Mail: ketao1989@gmail.com</span>
</span><span class="line"><span class="cm">    &gt; Created Time: 2014年11月27日 星期四 17时03分52秒</span>
</span><span class="line"><span class="cm"> ************************************************************************/</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PalindromeString</span><span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="kd">final</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">palindromeString</span><span class="o">,</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">len</span><span class="o">){</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span><span class="o">(</span> <span class="kc">null</span>  <span class="o">==</span> <span class="n">palindromeString</span> <span class="o">||</span> <span class="n">len</span> <span class="o">&lt;</span><span class="mi">1</span><span class="o">){</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">middlePos</span><span class="o">(</span><span class="n">len</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">before</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">behind</span> <span class="o">=</span> <span class="o">(</span><span class="n">len</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">?</span> <span class="n">middle</span> <span class="o">:</span> <span class="o">(</span><span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">while</span><span class="o">(</span><span class="n">before</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">){</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">palindromeString</span><span class="o">[</span><span class="n">before</span><span class="o">]+</span><span class="s">&quot;----&quot;</span><span class="o">+</span><span class="n">palindromeString</span><span class="o">[</span><span class="n">behind</span><span class="o">]);</span>
</span><span class="line">            <span class="k">if</span><span class="o">(</span><span class="n">palindromeString</span><span class="o">[</span><span class="n">before</span><span class="o">--]</span> <span class="o">!=</span> <span class="n">palindromeString</span><span class="o">[</span><span class="n">behind</span><span class="o">++]){</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">middlePos</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">num</span> <span class="o">){</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="o">(</span><span class="n">num</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="n">middle</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">middle</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span><span class="n">P</span>
</span><span class="line">        <span class="kt">char</span><span class="o">[]</span> <span class="n">palindromeString1</span> <span class="o">=</span> <span class="o">{</span><span class="sc">&#39;a&#39;</span><span class="o">,</span><span class="sc">&#39;b&#39;</span><span class="o">,</span><span class="sc">&#39;c&#39;</span><span class="o">,</span><span class="sc">&#39;c&#39;</span><span class="o">,</span><span class="sc">&#39;b&#39;</span><span class="o">,</span><span class="sc">&#39;a&#39;</span><span class="o">};</span>
</span><span class="line">        <span class="kt">char</span><span class="o">[]</span> <span class="n">palindromeString2</span> <span class="o">=</span> <span class="o">{</span><span class="sc">&#39;a&#39;</span><span class="o">,</span><span class="sc">&#39;b&#39;</span><span class="o">,</span><span class="sc">&#39;c&#39;</span><span class="o">,</span><span class="sc">&#39;b&#39;</span><span class="o">,</span><span class="sc">&#39;d&#39;</span><span class="o">};</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span><span class="o">(</span><span class="n">isPalindrome</span><span class="o">(</span><span class="n">palindromeString1</span><span class="o">,</span><span class="mi">6</span><span class="o">)){</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;palindromeString1 is PalindromeString&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;palindromeString1 is not PalindromeString&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span><span class="o">(</span><span class="n">isPalindrome</span><span class="o">(</span><span class="n">palindromeString2</span><span class="o">,</span><span class="mi">5</span><span class="o">)){</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;palindromeString2 is PalindromeString&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;palindromeString2 is not PalindromeString&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idlongestpalindromesubstringa"><a id="LongestPalindromeSubString">最长回文子串</a></h2>

<h3 id="section-4">背景</h3>

<p>上一小节已经介绍了回文字符串，不再做介绍。最长回文子串，就是：给定一个字符串，求它的最长回文串的长度，并且把这个回文子串打印出来。</p>

<h3 id="section-5">算法分析</h3>

<p>由于查找最长回文子串问题的解决方法有很多种，而最快捷高效的算法，理解起来比较复杂，这里介绍一下，所谓的时间空间复杂度都是O(N)的<code>Manacher</code>算法.</p>

<ul>
  <li><code>Manacher</code>算法，首先会初始化处理字符串。在上一节的时候我们会需要针对奇数偶数不同情况来不同处理，但是如果按照<code>Manacher</code>算法的初始化规则，就可以统一为奇数一种情况来处理，方便快捷。</li>
</ul>

<p>初始化规则就是：在字符串中每个字符前后都是用<code>#</code>来分隔，包括开头和结尾；然后再新字符串的前后分别添加<code>$</code>和<code>^</code>符号标识字符串开始和结束。例如给定一个字符串<code>abcdcda</code>，初始化处理之后为<code>$#a#b#c#d#c#d#a#^</code></p>

<ul>
  <li>接下来，就需要对每一个字符分别计算它对应的最大回文子串长度(包括字符本身)，例如，</li>
</ul>
<table>
    <tr>
        <td>S[i]</td>
        <td>`$#a#b#c#d#c#d#a#^`</td>
    </tr>
    <tr>
        <td>P[i]</td>
        <td>`01212121414121210`</td>
    </tr>
</table>

<p>这样子计算的P[i]对应的值和初始化前字符的回文长度关系是：<code>old[i] = P[i]-1</code>.</p>

<p>*重点来了，如果分别计算每一个长度，那么其实效率并不高，那么有没有什么特征能快速计算每个字符对应的最长回文长度呢？<code>Manacher</code>算法告诉我们是有的。</p>

<p>假设：id是当前求得的最长回文子串中心的位置，mx为当前最长回文子串的右边界（回文子串不包括该右边界），即mx = id + P[id]。记j = id - (i-id) = 2*id – i ，即 j 是 i 关于 id 的对称点。</p>

<ol>
  <li>当i <code>&lt;</code> mx 时；存在一个非常神奇的结论P[i] &gt;= min(P[2*id - i], mx - i)，证明略。</li>
  <li>当i &gt;= mx, 无法对P[i]做更多的假设，只能P[i] = 1,然后按照原始方法再去匹配计算长度。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java一些小Tips]]></title>
    <link href="http://kxcoder.github.io/blog/2014/11/24/java-some-tips/"/>
    <updated>2014-11-24T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2014/11/24/java-some-tips</id>
    <content type="html"><![CDATA[<p>插播广告：ubuntu系统的sublime text 3 中文无法输入，需要修复一些so库。参考：<a href="http://jingyan.baidu.com/article/f3ad7d0ff8731609c3345b3b.html">http://jingyan.baidu.com/article/f3ad7d0ff8731609c3345b3b.html</a></p>

<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#Integer">java Integer并发问题</a></li>
  <li><a href="#StringChange">String 可变性方法</a></li>
  <li><a href="#VolatileUnsafe">volatile 非线程安全性</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>虽然java开发已经快两年了，但是对于java内部一些小的技巧和坑还是会有些不了解。这里记录下。</p>

<!--more-->

<h2 id="a-idintegerjava-integera"><a id="Integer">java Integer并发问题</a></h2>

<p>前段时间看书，顺带提到说<code>Integer.valueOf( )会导致死锁问题</code>很是惊讶。于是，查看了JDK源码，果然如此。</p>

<p>JDK代码对把-128 到127 之间的整数转换成<code>Integer</code>的时候，并不会new一个新的Integer对象，而是从 内部的<code>IntegerCache</code>中直接获取已经创建好的对象（第一次调用时会创建这个<code>IntegerCache</code>）。</p>

<blockquote>
  <blockquote>
    <p>由于内部<code>IntegerCache</code>共用，所以在不同的地方对同一个数值调用<code>valueOf</code>获取cache中同一个对象，这样很可能会导致死锁。此外，关于整数范围可以使用VM初始设置（-XX:AutoBoxCacheMax=<size>，但是不能比127小）</size></p>
  </blockquote>
</blockquote>

<h3 id="valueof">valueOf方法实现代码</h3>

<p><code>valueOf</code>方法实际上就是调用<code>IntegerCache</code>获取对应下标的对象，而<code>IntegerCache</code>实际上就是一个Integer对象数组。关于<code>IntegerCache</code>实现如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>valueOf方法实现代码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">IntegerCache</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="o">-</span><span class="mi">128</span><span class="o">;</span>
</span><span class="line">        <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">high</span><span class="o">;</span>
</span><span class="line">        <span class="kd">static</span> <span class="kd">final</span> <span class="n">Integer</span> <span class="n">cache</span><span class="o">[];</span>
</span><span class="line">
</span><span class="line">        <span class="kd">static</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// high value may be configured by property</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">127</span><span class="o">;</span>
</span><span class="line">            <span class="n">String</span> <span class="n">integerCacheHighPropValue</span> <span class="o">=</span>
</span><span class="line">                <span class="n">sun</span><span class="o">.</span><span class="na">misc</span><span class="o">.</span><span class="na">VM</span><span class="o">.</span><span class="na">getSavedProperty</span><span class="o">(</span><span class="s">&quot;java.lang.Integer.IntegerCache.high&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">integerCacheHighPropValue</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">parseInt</span><span class="o">(</span><span class="n">integerCacheHighPropValue</span><span class="o">);</span>
</span><span class="line">                <span class="n">i</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="mi">127</span><span class="o">);</span>
</span><span class="line">                <span class="c1">// Maximum array size is Integer.MAX_VALUE</span>
</span><span class="line">                <span class="n">h</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">-</span> <span class="o">(-</span><span class="n">low</span><span class="o">)</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">high</span> <span class="o">=</span> <span class="n">h</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">            <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">[(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span><span class="c1">//大小为正负两边总的数量</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">low</span><span class="o">;</span>
</span><span class="line">            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">cache</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span>
</span><span class="line">                <span class="n">cache</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Integer</span><span class="o">(</span><span class="n">j</span><span class="o">++);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">private</span> <span class="nf">IntegerCache</span><span class="o">()</span> <span class="o">{}</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>之所以会导致死锁，主要原因是因为当两个线程不断的调用valueOf时，比如一个为 <code>Integer a=Integer.valueOf(10) + Integer.valueOf(20)</code>，另外一个线程调用<code>Integer b= Integer.valueOf(20) +Integer.valueOf(10)</code>，while中不停的调用，就可能出现死锁异常。</p>

  </blockquote>
</blockquote>

<h2 id="a-idstringchangestring-a"><a id="StringChange">String 可变性方法</a></h2>

<h3 id="string">String属性</h3>

<p>在一般的代码逻辑中，String 显然是不可以改变的，其实际上是一个final属性的值类型。也就是说，我们申明一个变量为String 常量，只要不替换变量的String引用，其具体字符串内容是不会改变的。但是，一个有趣的方法可以改变这些。</p>

<h3 id="string-">改变String 值</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>改变String </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/*************************************************************************</span>
</span><span class="line"><span class="cm">    &gt; File Name: StringChange.java</span>
</span><span class="line"><span class="cm">    &gt; Author: ketao1989</span>
</span><span class="line"><span class="cm">    &gt; Mail: ketao1989@gmail.com</span>
</span><span class="line"><span class="cm">    &gt; Created Time: 2014年12月10日 星期三 20时48分37秒</span>
</span><span class="line"><span class="cm"> ************************************************************************/</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.lang.reflect.Field</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringChange</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Field</span> <span class="n">valueField</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="o">{</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="n">valueField</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">valueField</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">valueField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="c1">// (1)</span>
</span><span class="line">            <span class="n">valueField</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;Immutable String&quot;</span><span class="o">,</span> <span class="s">&quot;Change Now！&quot;</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">());</span>
</span><span class="line">
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Immutable String&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Note: 其实就是一个反射特性的有趣应用。其内部运行流程为：当运行(1)的时候，应用会去String池中寻找该字符串常量对应的引用，如果没有则新建一个，并且会把引用对应的值更改为新设置的值<code>Change Now！</code>。</p>

    <p>然后在程序运行main的时候，会去String池中寻找<code>Immutable String</code>对应的引用，但是这个引用内部的值以及被更改为<code>Change Now！</code>，所以打印的时候就会输出<code>Change Now！</code>.</p>

  </blockquote>
</blockquote>

<h2 id="a-idvolatileunsafevolatile-a"><a id="VolatileUnsafe">volatile 非线程安全性</a></h2>

<h3 id="volatile-">volatile 属性</h3>

<p><code>volatile</code> 在java中是一种力度比较轻的synchronized，使用简单，相应编码也比较少；显然，其对应的同步功能也会比synchronized少一部分。</p>

<p>在一般地代码使用过程中，经常会存在一些错误的使用方法，由于涉及多线程的方面的使用，有时候测试不严谨，就会存在一些线上不易发现的错误数据。</p>

<p><code>volatile</code>变量保证的是，定义属性字段在java内存模型中数据一致性，也就是说，当其他线程操作更新了该属性字段，所有读取该属性字段的线程都会去全局内存上去获取最新值。关于内存模型一致性参考下面这张图就可以明白了，文章可以看看改图对应的博文：<a href="http://www.infoq.com/cn/articles/java-memory-model-1">深入理解Java内存模型</a></p>

<p><img src="http://kxcoder.github.io/images/2014/11/jmm.png" /></p>

<h3 id="volatile--1">volatile 非线程安全</h3>

<p>虽然，<code>volatile</code>虽然保证内存一致性，但是并不是线程安全的，这两个特性是不对应的。下面给出一个代码说明：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>volatile 非线程安全 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @author: ketao Date: 14/12/14 Time: 下午8:21</span>
</span><span class="line"><span class="cm"> * @version: \$Id$</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VolatileUnsafe</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kd">volatile</span> <span class="kt">int</span> <span class="n">COUNT</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">                    <span class="n">stopSecond</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">                    <span class="n">COUNT</span> <span class="o">+=</span> <span class="mi">100</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">stopSecond</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;100 times increase sum is :&quot;</span> <span class="o">+</span> <span class="n">COUNT</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">stopSecond</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">a</span> <span class="o">*</span> <span class="mi">10</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>代码写的很简单，但是足以说明 <code>volatile</code>确实是无法保证线程安全性的。</p>

<p><code>volatile</code>确实可以保证线程变量内存一致性，但是对于上述这种多线程对变量更新操作的问题是无法保证的。在代码执行的时候，每个线程启动有先后，但是在sleep的时候，很多线程都取得了最新的值，这些值计算完了之后会写入内存，但是这个时候如果变量值改变了，线程并不知道，因为<code>volatile</code>只能保证读变量时是内存中最新的值，写的时候写入共享内存中；但是无法保证写入的时候去判断先前获取的值是否还是计算完之后还是最新的，因此也就无法保证线程安全性。</p>

<p>综上所述，<code>volatile</code>是无法保证线程安全性的；如果有这种需求，请使用<code>AtomicXxx</code>或者<code>synchronized</code>属性来实现。</p>

<p>此外，关于<code>volatile</code>变量一些优点和使用技巧，请参考IBM计数博客：<a href="http://www.ibm.com/developerworks/cn/java/j-jtp06197.html">Java 理论与实践: 正确使用 Volatile 变量</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dubbo Provider 多组名注册问题分析]]></title>
    <link href="http://kxcoder.github.io/blog/2014/10/22/Dubbo-Provider-Groups-Bug-Analyse/"/>
    <updated>2014-10-22T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2014/10/22/Dubbo-Provider-Groups-Bug-Analyse</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#Registry">dubbo注册分析</a></li>
  <li><a href="#Service">dubbo服务分析</a></li>
  <li><a href="#End">附录</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>最近线上遇到一个很奇怪的现象，就是一个dubbo 服务被注册到了好几个<code>group</code>下面，并且这些<code>group</code>都是我们应用中，通过<code>dubbo:registry</code>来配置的。但是，显然这不是我们应用所期待的结果，因此，首先，我们需要修复这个问题；其次，我们需要找出原因。</p>

<!--more-->

<h3 id="section-1">1.1 问题定位</h3>

<p>首先看配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dubbo配置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;beans</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class="line">       <span class="na">xmlns:dubbo=</span><span class="s">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span>
</span><span class="line">       <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class="line">       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class="line"><span class="s">           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span>
</span><span class="line"><span class="s">        http://code.alibabatech.com/schema/dubbo</span>
</span><span class="line"><span class="s">        http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;dubbo:registry</span> <span class="na">id=</span><span class="s">&quot;crm-message-registry&quot;</span> <span class="na">group=</span><span class="s">&quot;crm-message&quot;</span>
</span><span class="line">                    <span class="na">address=</span><span class="s">&quot;${qunar-public.zookeeper.address}&quot;</span> <span class="na">protocol=</span><span class="s">&quot;zookeeper&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;dubbo:protocol</span> <span class="na">name=</span><span class="s">&quot;dubbo&quot;</span> <span class="na">port=</span><span class="s">&quot;${dubbo.protocol} &quot;</span><span class="nt">/&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;dubbo:service</span> <span class="na">interface=</span><span class="s">&quot;com.qxx.scm.message.api.IPushMessageBiz&quot;</span>
</span><span class="line">                   <span class="na">ref=</span><span class="s">&quot;pushMessageBiz&quot;</span> <span class="na">timeout=</span><span class="s">&quot;6000&quot;</span> <span class="na">version=</span><span class="s">&quot;1.0.1&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;/beans&gt;</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从上面的配置可以看到，我们实际上是有<code>dubbo:registry</code>，并且在其中也设置了<code>group</code>属性。</p>

<p>接下来，拿该xml配置和以前的 <code>dubbo provider</code>的配置进行比较，发现在<code>dubbo:service</code>的属性配置里面，缺少了指定<code>registry</code>的配置，猜想应该是该配置的缺失，导致应用把该<code>service</code>对应的服务，注册到了多个group下面。因此，为了正式推测，更改配置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dubbo配置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class="line"><span class="nt">&lt;beans</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class="line">       <span class="na">xmlns:dubbo=</span><span class="s">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span>
</span><span class="line">       <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class="line">       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class="line"><span class="s">           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span>
</span><span class="line"><span class="s">        http://code.alibabatech.com/schema/dubbo</span>
</span><span class="line"><span class="s">        http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;dubbo:registry</span> <span class="na">id=</span><span class="s">&quot;crm-message-registry&quot;</span> <span class="na">group=</span><span class="s">&quot;crm-message&quot;</span>
</span><span class="line">                    <span class="na">address=</span><span class="s">&quot;${qxx-public.zookeeper.address}&quot;</span> <span class="na">protocol=</span><span class="s">&quot;zookeeper&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;dubbo:protocol</span> <span class="na">name=</span><span class="s">&quot;dubbo&quot;</span> <span class="na">port=</span><span class="s">&quot;${dubbo.protocol} &quot;</span><span class="nt">/&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;dubbo:service</span> <span class="na">interface=</span><span class="s">&quot;com.qxx.scm.message.api.IPushMessageBiz&quot;</span>
</span><span class="line">                   <span class="na">ref=</span><span class="s">&quot;pushMessageBiz&quot;</span> <span class="na">timeout=</span><span class="s">&quot;6000&quot;</span> <span class="na">version=</span><span class="s">&quot;1.0.1&quot;</span> <span class="na">registry=</span><span class="s">&quot;crm-message-registry&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;/beans&gt;</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>启动应用，发现果然问题解决了。</p>

<h3 id="section-2">1.2 问题产生原因</h3>

<p>在<code>dubbo:service</code>没有明确设置<code>registry</code>，不会导致启动失败，或者注册不上，而是会在应用配置中声明的所有组名下面注册对应服务。于是，去dubbo的github：<a href="http://alibaba.github.io/dubbo-doc-static/Developer+Guide-zh.htm">http://alibaba.github.io/dubbo-doc-static/Developer+Guide-zh.htm</a>  上去看看wiki有木有说明。关于注册说明，如：<a href="http://alibaba.github.io/dubbo-doc-static/RegistryFactory+SPI-zh.htm">http://alibaba.github.io/dubbo-doc-static/RegistryFactory+SPI-zh.htm</a>.</p>

<p>其中，文档关于配置说明如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dubbo配置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;dubbo:registry</span> <span class="na">id=</span><span class="s">&quot;xxx1&quot;</span> <span class="na">address=</span><span class="s">&quot;xxx://ip:port&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- 定义注册中心 --&gt;</span>
</span><span class="line"><span class="nt">&lt;dubbo:service</span> <span class="na">registry=</span><span class="s">&quot;xxx1&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- 引用注册中心，如果没有配置registry属性，将在ApplicationContext中自动扫描registry配置 --&gt;</span>
</span><span class="line"><span class="nt">&lt;dubbo:provider</span> <span class="na">registry=</span><span class="s">&quot;xxx1&quot;</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- 引用注册中心缺省值，当&lt;dubbo:service&gt;没有配置registry属性时，使用此配置 --&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ok，到这里就明白了，<code>dubbo</code>在我们配置<code>&lt;dubbo:service&gt;</code>中没有指定registry时，会看看对应的<code>&lt;dubbo:provider&gt;</code>有木有配置<code>registry</code>,如果没有，则<em>在ApplicationContext中自动扫描registry配置</em>获取注册中心列表，然后进行注册。</p>

<h2 id="a-idregistrydubboa"><a id="Registry">dubbo注册分析</a></h2>

<p><code>dubbo</code>是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 Spring框架无缝集成。当然，作为一个优秀的RPC框架，其涉及到服务注册和服务事件的订阅及发布。</p>

<h3 id="dubbo">2.1 dubbo配置解析</h3>

<p>在Spring 中使用dubbo，会采用xml方式对dubbo相关属性进行配置，其加入了自己的命名空间，如<code>xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"</code>，因此，你会知道必然存在一个继承实现<code>org.springframework.beans.factory.xml.NamespaceHandlerSupport</code>来完成自定义配置的解析工作，部分代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dubbo配置解析 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DubboNamespaceHandler</span> <span class="kd">extends</span> <span class="n">NamespaceHandlerSupport</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="kd">static</span> <span class="o">{</span>
</span><span class="line">		<span class="n">Version</span><span class="o">.</span><span class="na">checkDuplicate</span><span class="o">(</span><span class="n">DubboNamespaceHandler</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	    <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;application&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">DubboBeanDefinitionParser</span><span class="o">(</span><span class="n">ApplicationConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">true</span><span class="o">));</span>
</span><span class="line">        <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;registry&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">DubboBeanDefinitionParser</span><span class="o">(</span><span class="n">RegistryConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">true</span><span class="o">));</span>
</span><span class="line">        <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;provider&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">DubboBeanDefinitionParser</span><span class="o">(</span><span class="n">ProviderConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">true</span><span class="o">));</span>
</span><span class="line">        <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;consumer&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">DubboBeanDefinitionParser</span><span class="o">(</span><span class="n">ConsumerConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">true</span><span class="o">));</span>
</span><span class="line">        <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;protocol&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">DubboBeanDefinitionParser</span><span class="o">(</span><span class="n">ProtocolConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">true</span><span class="o">));</span>
</span><span class="line">        <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;service&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">DubboBeanDefinitionParser</span><span class="o">(</span><span class="n">ServiceBean</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">true</span><span class="o">));</span>
</span><span class="line">        <span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">&quot;reference&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">DubboBeanDefinitionParser</span><span class="o">(</span><span class="n">ReferenceBean</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">false</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到<code>RegistryConfig.class</code>类，包含关于<code>注册中心</code>相关的属性变量配置；<code>ServiceBean.class</code>类，包含关于<code>对外服务</code>相关的属性变量配置。也就是说，通过<code>DubboBeanDefinitionParser</code>解析器会把对应xml节点解析成对应的对象实例。</p>

<p>Spring的自定义标签代码实现和内部原理，可以google一下。</p>

<blockquote>
  <blockquote>
    <p>说明：<code>DubboNamespaceHandler</code>在初始化的时候，会把所有，针对不同xml节点的对应解析其注册到Spring <code>NamespaceHandlerSupport</code>的 <code>BeanDefinitionParser</code> Map上来。这样，在Spring 初始化解析xml配置时，就可以完成对自定义标签的兼容和实例化了。</p>
  </blockquote>
</blockquote>

<p>对于Dubbo 自定义解析器<code>DubboBeanDefinitionParser</code>的说明，如<a href="#End">附录</a>所示。</p>

<h3 id="dubbo-1">2.2 dubbo注册解析</h3>

<p>阿里的dubbo提供了多种注册机制，比如：<code>Redis</code>注册中心，<code>ZooKeeper</code>注册中心，或者使用<code>广播</code>的方式等。而目前使用的比较多的是使用<code>ZookeeperRegistry</code>方式。</p>

<p>从代码结构可以看出，对于不同的注册机制，其主要流程还是一样的，只是在注册url的具体操作中，需要根据不同的部署实体来采用不同的注册操作。比如，对于<code>zookeeper</code>，则使用<code>zkclient</code>去连接zk注册中心；而对于<code>redis</code>，则直接使用<code>redis.clients.jedis.Jedis</code>在数据库上注册保持对应url。</p>

<p>在抽象类的<code>AbstractRegistryFactory</code>中，提供了连接注册中心的一些方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dubbo配置解析 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">    <span class="c1">// 注册中心集合 Map&lt;RegistryAddress, Registry&gt;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Registry</span><span class="o">&gt;</span> <span class="n">REGISTRIES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Registry</span><span class="o">&gt;();</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 获取所有注册中心</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * @return 所有注册中心</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">Registry</span><span class="o">&gt;</span> <span class="nf">getRegistries</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 这里获取应用中配置的所有注册中心，如果dubbo:service里面没有配置registry属性时，应该会调用这个方法</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableCollection</span><span class="o">(</span><span class="n">REGISTRIES</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">     <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 连接注册中心</span>
</span><span class="line"><span class="cm">     * @param url 注册中心地址，不允许为空</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Registry</span> <span class="nf">getRegistry</span><span class="o">(</span><span class="n">URL</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    	<span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="n">RegistryService</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>
</span><span class="line">    			<span class="o">.</span><span class="na">addParameter</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">INTERFACE_KEY</span><span class="o">,</span> <span class="n">RegistryService</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>
</span><span class="line">    			<span class="o">.</span><span class="na">removeParameters</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">EXPORT_KEY</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">REFER_KEY</span><span class="o">);</span>
</span><span class="line">    	<span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="na">toServiceString</span><span class="o">();</span>
</span><span class="line">        <span class="c1">// 锁定注册中心获取过程，保证注册中心单一实例</span>
</span><span class="line">        <span class="n">LOCK</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Registry</span> <span class="n">registry</span> <span class="o">=</span> <span class="n">REGISTRIES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">registry</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="n">registry</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">registry</span> <span class="o">=</span> <span class="n">createRegistry</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">registry</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Can not create registry &quot;</span> <span class="o">+</span> <span class="n">url</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="c1">// 这里会把本应用所有不同的成功连接的注册配置放在全局concurrentMap中</span>
</span><span class="line">            <span class="n">REGISTRIES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">registry</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span> <span class="n">registry</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// 释放锁</span>
</span><span class="line">            <span class="n">LOCK</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="n">Registry</span> <span class="nf">createRegistry</span><span class="o">(</span><span class="n">URL</span> <span class="n">url</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Note：在Factory中会创建Registery对象，该对象中，会实现注册，取消注册，订阅，取消订阅等方法来提供给<code>service</code>和<code>reference</code>完成需要的注册和订阅服务。</p>
  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dubbo配置解析 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">RegistryService</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 注册数据，比如：提供者地址，消费者地址，路由规则，覆盖规则，等数据。</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * 注册需处理契约：&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 1. 当URL设置了check=false时，注册失败后不报错，在后台定时重试，否则抛出异常。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 2. 当URL设置了dynamic=false参数，则需持久存储，否则，当注册者出现断电等情况异常退出时，需自动删除。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 3. 当URL设置了category=routers时，表示分类存储，缺省类别为providers，可按分类部分通知数据。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 4. 当注册中心重启，网络抖动，不能丢失数据，包括断线自动删除数据。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 5. 允许URI相同但参数不同的URL并存，不能覆盖。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * @param url 注册信息，不允许为空，如：dubbo://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="n">URL</span> <span class="n">url</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 取消注册.</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * 取消注册需处理契约：&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 1. 如果是dynamic=false的持久存储数据，找不到注册数据，则抛IllegalStateException，否则忽略。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 2. 按全URL匹配取消注册。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * @param url 注册信息，不允许为空，如：dubbo://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kt">void</span> <span class="nf">unregister</span><span class="o">(</span><span class="n">URL</span> <span class="n">url</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 订阅符合条件的已注册数据，当有注册数据变更时自动推送.</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * 订阅需处理契约：&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 1. 当URL设置了check=false时，订阅失败后不报错，在后台定时重试。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 2. 当URL设置了category=routers，只通知指定分类的数据，多个分类用逗号分隔，并允许星号通配，表示订阅所有分类数据。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 3. 允许以interface,group,version,classifier作为条件查询，如：interface=com.alibaba.foo.BarService&amp;version=1.0.0&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 4. 并且查询条件允许星号通配，订阅所有接口的所有分组的所有版本，或：interface=*&amp;group=*&amp;version=*&amp;classifier=*&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 5. 当注册中心重启，网络抖动，需自动恢复订阅请求。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 6. 允许URI相同但参数不同的URL并存，不能覆盖。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 7. 必须阻塞订阅过程，等第一次通知完后再返回。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * @param url 订阅条件，不允许为空，如：consumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin</span>
</span><span class="line"><span class="cm">     * @param listener 变更事件监听器，不允许为空</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kt">void</span> <span class="nf">subscribe</span><span class="o">(</span><span class="n">URL</span> <span class="n">url</span><span class="o">,</span> <span class="n">NotifyListener</span> <span class="n">listener</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 取消订阅.</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * 取消订阅需处理契约：&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 1. 如果没有订阅，直接忽略。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * 2. 按全URL匹配取消订阅。&lt;br&gt;</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * @param url 订阅条件，不允许为空，如：consumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin</span>
</span><span class="line"><span class="cm">     * @param listener 变更事件监听器，不允许为空</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kt">void</span> <span class="nf">unsubscribe</span><span class="o">(</span><span class="n">URL</span> <span class="n">url</span><span class="o">,</span> <span class="n">NotifyListener</span> <span class="n">listener</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 查询符合条件的已注册数据，与订阅的推模式相对应，这里为拉模式，只返回一次结果。</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * @see com.alibaba.dubbo.registry.NotifyListener#notify(List)</span>
</span><span class="line"><span class="cm">     * @param url 查询条件，不允许为空，如：consumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin</span>
</span><span class="line"><span class="cm">     * @return 已注册信息列表，可能为空，含义同{@link com.alibaba.dubbo.registry.NotifyListener#notify(List&lt;URL&gt;)}的参数。</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="n">List</span><span class="o">&lt;</span><span class="n">URL</span><span class="o">&gt;</span> <span class="nf">lookup</span><span class="o">(</span><span class="n">URL</span> <span class="n">url</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idservicedubboa"><a id="Service">dubbo服务分析</a></h2>

<p>从上面的解析配置文件，可以看到对于<code>&lt;dubbo:service&gt;</code>的解析，是使用<code>serviceBean</code>类来实现的。在<code>serviceConfig</code>（serviceBean的父类）类中对于service需要的一些属性进行说明，但是对于一些必须的属性没有设置会怎么样呢？！dubbo，首先会去上下文中，通过查找构造出对应的属性；当然如果构造不了，则返回null，这样在后期的时候就会抛出异常。</p>

<h3 id="dubbo-2">3.1 dubbo服务配置处理分析</h3>

<p>对于一些容错处理，也就是未配置的自动完善的方法，在<code>serviceBean</code>中完成。部分代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dubbo服务分析 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 应用事件监听器ApplicationListener的接口方法，用来对监听到的事件进行处理。</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * 显然的观察者设计模式。事件驱动。</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @param event</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onApplicationEvent</span><span class="o">(</span><span class="n">ApplicationEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">ContextRefreshedEvent</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">isDelay</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isExported</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isUnexported</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isInfoEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;The service ready on spring started. service: &quot;</span> <span class="o">+</span> <span class="n">getInterface</span><span class="o">());</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="n">export</span><span class="o">();</span><span class="c1">// 暴露服务</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">     <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 这个方法很重要！</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * 这里会构造 服务提供方相关的服务设置</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @throws Exception</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="nd">@SuppressWarnings</span><span class="o">({</span> <span class="s">&quot;unchecked&quot;</span><span class="o">,</span> <span class="s">&quot;deprecation&quot;</span> <span class="o">})</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 在dubbo:service中没有配置Provider属性</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">getProvider</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 从applicationContext中构造ProviderConfig类对象</span>
</span><span class="line">            <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ProviderConfig</span><span class="o">&gt;</span> <span class="n">providerConfigMap</span> <span class="o">=</span> <span class="n">applicationContext</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">BeanFactoryUtils</span>
</span><span class="line">                    <span class="o">.</span><span class="na">beansOfTypeIncludingAncestors</span><span class="o">(</span><span class="n">applicationContext</span><span class="o">,</span> <span class="n">ProviderConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">providerConfigMap</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">providerConfigMap</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="c1">// 从applicationContext中构造ProtocolConfig类对象</span>
</span><span class="line">                <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ProtocolConfig</span><span class="o">&gt;</span> <span class="n">protocolConfigMap</span> <span class="o">=</span> <span class="n">applicationContext</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">BeanFactoryUtils</span>
</span><span class="line">                        <span class="o">.</span><span class="na">beansOfTypeIncludingAncestors</span><span class="o">(</span><span class="n">applicationContext</span><span class="o">,</span> <span class="n">ProtocolConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">                <span class="c1">// 获取应用上下文中的所有providerConfig，然后保存到对应的service服务的protocol中</span>
</span><span class="line">                <span class="k">if</span> <span class="o">((</span><span class="n">protocolConfigMap</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">protocolConfigMap</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">providerConfigMap</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 兼容旧版本</span>
</span><span class="line">                    <span class="n">List</span><span class="o">&lt;</span><span class="n">ProviderConfig</span><span class="o">&gt;</span> <span class="n">providerConfigs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ProviderConfig</span><span class="o">&gt;();</span>
</span><span class="line">                    <span class="k">for</span> <span class="o">(</span><span class="n">ProviderConfig</span> <span class="n">config</span> <span class="o">:</span> <span class="n">providerConfigMap</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                        <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">isDefault</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">config</span><span class="o">.</span><span class="na">isDefault</span><span class="o">().</span><span class="na">booleanValue</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                            <span class="n">providerConfigs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span><span class="line">                        <span class="o">}</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">providerConfigs</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">setProviders</span><span class="o">(</span><span class="n">providerConfigs</span><span class="o">);</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">ProviderConfig</span> <span class="n">providerConfig</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">                    <span class="c1">// 难以详细这个逻辑，for多次竟然只set一个变量，多个则又抛异常</span>
</span><span class="line">                    <span class="k">for</span> <span class="o">(</span><span class="n">ProviderConfig</span> <span class="n">config</span> <span class="o">:</span> <span class="n">providerConfigMap</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                        <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">isDefault</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">config</span><span class="o">.</span><span class="na">isDefault</span><span class="o">().</span><span class="na">booleanValue</span><span class="o">())</span> <span class="o">{</span><span class="c1">// 缺省状态，多次设置，则抛异常？？</span>
</span><span class="line">                            <span class="k">if</span> <span class="o">(</span><span class="n">providerConfig</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Duplicate provider configs: &quot;</span> <span class="o">+</span> <span class="n">providerConfig</span>
</span><span class="line">                                        <span class="o">+</span> <span class="s">&quot; and &quot;</span> <span class="o">+</span> <span class="n">config</span><span class="o">);</span>
</span><span class="line">                            <span class="o">}</span>
</span><span class="line">                            <span class="n">providerConfig</span> <span class="o">=</span> <span class="n">config</span><span class="o">;</span>
</span><span class="line">                        <span class="o">}</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">providerConfig</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">setProvider</span><span class="o">(</span><span class="n">providerConfig</span><span class="o">);</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 对Application为空进行判断，并且只有provider为空或者provider的application为空，才会从应用的上下文去构造</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">getApplication</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">getProvider</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">getProvider</span><span class="o">().</span><span class="na">getApplication</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ApplicationConfig</span><span class="o">&gt;</span> <span class="n">applicationConfigMap</span> <span class="o">=</span> <span class="n">applicationContext</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">BeanFactoryUtils</span>
</span><span class="line">                    <span class="o">.</span><span class="na">beansOfTypeIncludingAncestors</span><span class="o">(</span><span class="n">applicationContext</span><span class="o">,</span> <span class="n">ApplicationConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">applicationConfigMap</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">applicationConfigMap</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">ApplicationConfig</span> <span class="n">applicationConfig</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">                <span class="k">for</span> <span class="o">(</span><span class="n">ApplicationConfig</span> <span class="n">config</span> <span class="o">:</span> <span class="n">applicationConfigMap</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">isDefault</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">config</span><span class="o">.</span><span class="na">isDefault</span><span class="o">().</span><span class="na">booleanValue</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                        <span class="k">if</span> <span class="o">(</span><span class="n">applicationConfig</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Duplicate application configs: &quot;</span> <span class="o">+</span> <span class="n">applicationConfig</span>
</span><span class="line">                                    <span class="o">+</span> <span class="s">&quot; and &quot;</span> <span class="o">+</span> <span class="n">config</span><span class="o">);</span>
</span><span class="line">                        <span class="o">}</span>
</span><span class="line">                        <span class="n">applicationConfig</span> <span class="o">=</span> <span class="n">config</span><span class="o">;</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">applicationConfig</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">setApplication</span><span class="o">(</span><span class="n">applicationConfig</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">getModule</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">getProvider</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">getProvider</span><span class="o">().</span><span class="na">getModule</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ModuleConfig</span><span class="o">&gt;</span> <span class="n">moduleConfigMap</span> <span class="o">=</span> <span class="n">applicationContext</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">BeanFactoryUtils</span>
</span><span class="line">                    <span class="o">.</span><span class="na">beansOfTypeIncludingAncestors</span><span class="o">(</span><span class="n">applicationContext</span><span class="o">,</span> <span class="n">ModuleConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">moduleConfigMap</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">moduleConfigMap</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">ModuleConfig</span> <span class="n">moduleConfig</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">                <span class="k">for</span> <span class="o">(</span><span class="n">ModuleConfig</span> <span class="n">config</span> <span class="o">:</span> <span class="n">moduleConfigMap</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">isDefault</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">config</span><span class="o">.</span><span class="na">isDefault</span><span class="o">().</span><span class="na">booleanValue</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                        <span class="k">if</span> <span class="o">(</span><span class="n">moduleConfig</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Duplicate module configs: &quot;</span> <span class="o">+</span> <span class="n">moduleConfig</span> <span class="o">+</span> <span class="s">&quot; and &quot;</span>
</span><span class="line">                                    <span class="o">+</span> <span class="n">config</span><span class="o">);</span>
</span><span class="line">                        <span class="o">}</span>
</span><span class="line">                        <span class="n">moduleConfig</span> <span class="o">=</span> <span class="n">config</span><span class="o">;</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">moduleConfig</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">setModule</span><span class="o">(</span><span class="n">moduleConfig</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// ok,这里就是注册中心的配置处理，对于service中没有配置registry属性的，dubbo会自己来完善</span>
</span><span class="line">        <span class="c1">// 还记得上面的dubbo wiki文档的说明吗？会查看provider是否配置了registry，如果没有才会调用全局应用上下文的配置。</span>
</span><span class="line">        <span class="c1">// 所以这里，会首先判断service是否配置registry，然后判断provider是否配置，然后在判断application是否配置registry，</span>
</span><span class="line">        <span class="c1">// 然后才会从applicationContext中获取已经在spring 中注册了的registry列表，作为本service的配置。</span>
</span><span class="line">        <span class="k">if</span> <span class="o">((</span><span class="n">getRegistries</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">getRegistries</span><span class="o">().</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class="line">                <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">getProvider</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">getProvider</span><span class="o">().</span><span class="na">getRegistries</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">getProvider</span><span class="o">().</span><span class="na">getRegistries</span><span class="o">()</span>
</span><span class="line">                        <span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class="line">                <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">getApplication</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">getApplication</span><span class="o">().</span><span class="na">getRegistries</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">getApplication</span><span class="o">()</span>
</span><span class="line">                        <span class="o">.</span><span class="na">getRegistries</span><span class="o">().</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RegistryConfig</span><span class="o">&gt;</span> <span class="n">registryConfigMap</span> <span class="o">=</span> <span class="n">applicationContext</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">BeanFactoryUtils</span>
</span><span class="line">                    <span class="o">.</span><span class="na">beansOfTypeIncludingAncestors</span><span class="o">(</span><span class="n">applicationContext</span><span class="o">,</span> <span class="n">RegistryConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">registryConfigMap</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">registryConfigMap</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">List</span><span class="o">&lt;</span><span class="n">RegistryConfig</span><span class="o">&gt;</span> <span class="n">registryConfigs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">RegistryConfig</span><span class="o">&gt;();</span>
</span><span class="line">                <span class="k">for</span> <span class="o">(</span><span class="n">RegistryConfig</span> <span class="n">config</span> <span class="o">:</span> <span class="n">registryConfigMap</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">isDefault</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">config</span><span class="o">.</span><span class="na">isDefault</span><span class="o">().</span><span class="na">booleanValue</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">registryConfigs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="c1">// 这里设置到了注册中心配置中，list哦。</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">registryConfigs</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">registryConfigs</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="kd">super</span><span class="o">.</span><span class="na">setRegistries</span><span class="o">(</span><span class="n">registryConfigs</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// ....................</span>
</span><span class="line">
</span><span class="line">         <span class="k">if</span> <span class="o">(!</span><span class="n">isDelay</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// 不延迟，可以开始暴露服务了</span>
</span><span class="line">            <span class="n">export</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>具体，dubbo怎么把服务暴露出去，消费者怎样通过dubbo rpc调用服务等，不在本文所描述之内。后续会单独进行分析说明。</p>

<h3 id="section-3">3.2 问题原因解析</h3>

<p>从上面的代码逻辑，可以明白之所以出现多组注册的问题原因了。</p>

<p>回到代码中，在配置的dubbo xml文件里面，有三个不同的节点，<code>&lt;dubbo:registry&gt;</code>，<code>&lt;dubbo:protocol&gt;</code>和<code>&lt;dubbo:service&gt;</code>。由于<code>&lt;dubbo:service&gt;</code>中没有配置<code>registry</code>属性，所以按照dubbo的逻辑，会先查找<code>&lt;dubbo:provider&gt;</code>节点配置，但是因为配置文件中没有配置，所以接下来会查找<code>&lt;dubbo:application&gt;</code>节点，看看该节点下面是否有配置<code>registry</code>属性，依然没有配置该节点。</p>

<p>这样，就走进了dubbo来配置相关registry属性的代码内部。</p>

<p>代码会从spring的<code>applicationContext</code>中构造出<code>Map&lt;String, RegistryConfig&gt; </code>类型变量，然后获取<code>map.values()</code>从而拿到所有在spring中已经存在上下文中的注册信息了。这样，把结果（所有注册的registry信息）放到service配置中。</p>

<blockquote>
  <blockquote>
    <p>Note：那么，为什么可以获取应用上下文环境中所有的<code>RegistryConfig</code>呢？还记得解析顺序吗！？最开始就是解析注册节点的数据哦！<code>registerBeanDefinitionParser("registry", new DubboBeanDefinitionParser(RegistryConfig.class, true));</code>早于<code>registerBeanDefinitionParser("service", new DubboBeanDefinitionParser(ServiceBean.class, true));</code>，此外，判断逻辑里面，其他节点数据解析，也是早于serviceBean的。</p>
  </blockquote>
</blockquote>

<h2 id="a-idenda"><a id="End">附录</a></h2>

<p>dubbo 关于<code>DubboBeanDefinitionParser</code> 部分核心代码的注释说明：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>DubboBeanDefinitionParser代码片段 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
<span class="line-number">196</span>
<span class="line-number">197</span>
<span class="line-number">198</span>
<span class="line-number">199</span>
<span class="line-number">200</span>
<span class="line-number">201</span>
<span class="line-number">202</span>
<span class="line-number">203</span>
<span class="line-number">204</span>
<span class="line-number">205</span>
<span class="line-number">206</span>
<span class="line-number">207</span>
<span class="line-number">208</span>
<span class="line-number">209</span>
<span class="line-number">210</span>
<span class="line-number">211</span>
<span class="line-number">212</span>
<span class="line-number">213</span>
<span class="line-number">214</span>
<span class="line-number">215</span>
<span class="line-number">216</span>
<span class="line-number">217</span>
<span class="line-number">218</span>
<span class="line-number">219</span>
<span class="line-number">220</span>
<span class="line-number">221</span>
<span class="line-number">222</span>
<span class="line-number">223</span>
<span class="line-number">224</span>
<span class="line-number">225</span>
<span class="line-number">226</span>
<span class="line-number">227</span>
<span class="line-number">228</span>
<span class="line-number">229</span>
<span class="line-number">230</span>
<span class="line-number">231</span>
<span class="line-number">232</span>
<span class="line-number">233</span>
<span class="line-number">234</span>
<span class="line-number">235</span>
<span class="line-number">236</span>
<span class="line-number">237</span>
<span class="line-number">238</span>
<span class="line-number">239</span>
<span class="line-number">240</span>
<span class="line-number">241</span>
<span class="line-number">242</span>
<span class="line-number">243</span>
<span class="line-number">244</span>
<span class="line-number">245</span>
<span class="line-number">246</span>
<span class="line-number">247</span>
<span class="line-number">248</span>
<span class="line-number">249</span>
<span class="line-number">250</span>
<span class="line-number">251</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DubboBeanDefinitionParser</span> <span class="kd">implements</span> <span class="n">BeanDefinitionParser</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">DubboBeanDefinitionParser</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">beanClass</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">required</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">DubboBeanDefinitionParser</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">beanClass</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">required</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">beanClass</span> <span class="o">=</span> <span class="n">beanClass</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">required</span> <span class="o">=</span> <span class="n">required</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">BeanDefinition</span> <span class="nf">parse</span><span class="o">(</span><span class="n">Element</span> <span class="n">element</span><span class="o">,</span> <span class="n">ParserContext</span> <span class="n">parserContext</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">parse</span><span class="o">(</span><span class="n">element</span><span class="o">,</span> <span class="n">parserContext</span><span class="o">,</span> <span class="n">beanClass</span><span class="o">,</span> <span class="n">required</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">BeanDefinition</span> <span class="nf">parse</span><span class="o">(</span><span class="n">Element</span> <span class="n">element</span><span class="o">,</span> <span class="n">ParserContext</span> <span class="n">parserContext</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">beanClass</span><span class="o">,</span>
</span><span class="line">            <span class="kt">boolean</span> <span class="n">required</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">RootBeanDefinition</span> <span class="n">beanDefinition</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RootBeanDefinition</span><span class="o">();</span>
</span><span class="line">        <span class="n">beanDefinition</span><span class="o">.</span><span class="na">setBeanClass</span><span class="o">(</span><span class="n">beanClass</span><span class="o">);</span>
</span><span class="line">        <span class="n">beanDefinition</span><span class="o">.</span><span class="na">setLazyInit</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class="line">        <span class="c1">// 解析 id标识</span>
</span><span class="line">        <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 如果id标识为空，则获取name标识</span>
</span><span class="line">        <span class="k">if</span> <span class="o">((</span><span class="n">id</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">id</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">required</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">String</span> <span class="n">generatedBeanName</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">generatedBeanName</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">generatedBeanName</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">                <span class="c1">// 如果使用ProtocolConfig 为bean ，则为dubbo，配置为dubbo:protocol</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">ProtocolConfig</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">beanClass</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">generatedBeanName</span> <span class="o">=</span> <span class="s">&quot;dubbo&quot;</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">                    <span class="c1">// ok，这里是没有id和name标识，并且正常config bean，则使用interface的标识value值</span>
</span><span class="line">                    <span class="c1">// 比如，一般我们写dubbo:service 可能会走到这个配置上。</span>
</span><span class="line">                    <span class="n">generatedBeanName</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;interface&quot;</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">generatedBeanName</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">generatedBeanName</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">generatedBeanName</span> <span class="o">=</span> <span class="n">beanClass</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">id</span> <span class="o">=</span> <span class="n">generatedBeanName</span><span class="o">;</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class="line">            <span class="c1">// 如果存在该BeanDefinition，则重置id</span>
</span><span class="line">            <span class="k">while</span> <span class="o">(</span><span class="n">parserContext</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">containsBeanDefinition</span><span class="o">(</span><span class="n">id</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="n">id</span> <span class="o">=</span> <span class="n">generatedBeanName</span> <span class="o">+</span> <span class="o">(</span><span class="n">counter</span><span class="o">++);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// ok，这里再次判断，检查是否重复id在bean里面</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">id</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">parserContext</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">containsBeanDefinition</span><span class="o">(</span><span class="n">id</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Duplicate spring bean id &quot;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 注册到spring 的bean Map中去，其中id为key</span>
</span><span class="line">            <span class="n">parserContext</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">registerBeanDefinition</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">beanDefinition</span><span class="o">);</span>
</span><span class="line">            <span class="c1">// 然后把id和对应value 作为Property放入bean里面</span>
</span><span class="line">            <span class="n">beanDefinition</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">().</span><span class="na">addPropertyValue</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 如果使用ProtocolConfig的配置类，dubbo:protocol</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">ProtocolConfig</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">beanClass</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// 拿到注册在parser环境里所有getBeanDefinitionNames，他实际上是bean map的key部分</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">name</span> <span class="o">:</span> <span class="n">parserContext</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">getBeanDefinitionNames</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                <span class="n">BeanDefinition</span> <span class="n">definition</span> <span class="o">=</span> <span class="n">parserContext</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">getBeanDefinition</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class="line">                <span class="n">PropertyValue</span> <span class="n">property</span> <span class="o">=</span> <span class="n">definition</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">().</span><span class="na">getPropertyValue</span><span class="o">(</span><span class="s">&quot;protocol&quot;</span><span class="o">);</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">property</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">property</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class="line">                    <span class="c1">// 如果id 为protocol</span>
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">ProtocolConfig</span> <span class="o">&amp;&amp;</span> <span class="n">id</span><span class="o">.</span><span class="na">equals</span><span class="o">(((</span><span class="n">ProtocolConfig</span><span class="o">)</span> <span class="n">value</span><span class="o">).</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">definition</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">().</span><span class="na">addPropertyValue</span><span class="o">(</span><span class="s">&quot;protocol&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">RuntimeBeanReference</span><span class="o">(</span><span class="n">id</span><span class="o">));</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="c1">// dubbo:service 对应的配置解析</span>
</span><span class="line">        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">ServiceBean</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">beanClass</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;class&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">className</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">className</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">RootBeanDefinition</span> <span class="n">classDefinition</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RootBeanDefinition</span><span class="o">();</span>
</span><span class="line">                <span class="n">classDefinition</span><span class="o">.</span><span class="na">setBeanClass</span><span class="o">(</span><span class="n">ReflectUtils</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">className</span><span class="o">));</span>
</span><span class="line">                <span class="n">classDefinition</span><span class="o">.</span><span class="na">setLazyInit</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class="line">                <span class="n">parseProperties</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">getChildNodes</span><span class="o">(),</span> <span class="n">classDefinition</span><span class="o">);</span>
</span><span class="line">                <span class="n">beanDefinition</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">().</span><span class="na">addPropertyValue</span><span class="o">(</span><span class="s">&quot;ref&quot;</span><span class="o">,</span>
</span><span class="line">                        <span class="k">new</span> <span class="nf">BeanDefinitionHolder</span><span class="o">(</span><span class="n">classDefinition</span><span class="o">,</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&quot;Impl&quot;</span><span class="o">));</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="c1">// provider配置</span>
</span><span class="line">        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">ProviderConfig</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">beanClass</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// tag:service ;property:provider;ref:id</span>
</span><span class="line">            <span class="c1">// parserContext</span>
</span><span class="line">            <span class="n">parseNested</span><span class="o">(</span><span class="n">element</span><span class="o">,</span> <span class="n">parserContext</span><span class="o">,</span> <span class="n">ServiceBean</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;service&quot;</span><span class="o">,</span> <span class="s">&quot;provider&quot;</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">beanDefinition</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// consumer配置，对于consumer，找到对应的reference 标识</span>
</span><span class="line">        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">ConsumerConfig</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">beanClass</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">parseNested</span><span class="o">(</span><span class="n">element</span><span class="o">,</span> <span class="n">parserContext</span><span class="o">,</span> <span class="n">ReferenceBean</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&quot;reference&quot;</span><span class="o">,</span> <span class="s">&quot;consumer&quot;</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">beanDefinition</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// ok，以上都没有，接下来，正常解析了</span>
</span><span class="line">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class="line">        <span class="n">ManagedMap</span> <span class="n">parameters</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Method</span> <span class="n">setter</span> <span class="o">:</span> <span class="n">beanClass</span><span class="o">.</span><span class="na">getMethods</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">setter</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 找到set方法来设置beanclass对象的值</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">name</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;set&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">Modifier</span><span class="o">.</span><span class="na">isPublic</span><span class="o">(</span><span class="n">setter</span><span class="o">.</span><span class="na">getModifiers</span><span class="o">())</span>
</span><span class="line">                    <span class="o">&amp;&amp;</span> <span class="n">setter</span><span class="o">.</span><span class="na">getParameterTypes</span><span class="o">().</span><span class="na">length</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 判断set方法</span>
</span><span class="line">                <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">type</span> <span class="o">=</span> <span class="n">setter</span><span class="o">.</span><span class="na">getParameterTypes</span><span class="o">()[</span><span class="mi">0</span><span class="o">];</span>
</span><span class="line">
</span><span class="line">                <span class="c1">// 获取属性的名称，并且把名称第一个大写字母 --&gt; 小写，并且各个驼峰使用‘_’连接</span>
</span><span class="line">                <span class="n">String</span> <span class="n">property</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">camelToSplitName</span><span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">).</span><span class="na">toLowerCase</span><span class="o">()</span> <span class="o">+</span> <span class="n">name</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">4</span><span class="o">),</span>
</span><span class="line">                        <span class="s">&quot;-&quot;</span><span class="o">);</span>
</span><span class="line">                <span class="n">props</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">property</span><span class="o">);</span>
</span><span class="line">                <span class="n">Method</span> <span class="n">getter</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">                <span class="c1">// 获取get或者is等取值方法</span>
</span><span class="line">                <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">getter</span> <span class="o">=</span> <span class="n">beanClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;get&quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">3</span><span class="o">),</span> <span class="k">new</span> <span class="n">Class</span><span class="o">&lt;?&gt;[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class="line">                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchMethodException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">getter</span> <span class="o">=</span> <span class="n">beanClass</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;is&quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">3</span><span class="o">),</span> <span class="k">new</span> <span class="n">Class</span><span class="o">&lt;?&gt;[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class="line">                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchMethodException</span> <span class="n">e2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">
</span><span class="line">                <span class="c1">// 如果没有get等取值方法，则不放到结果中，对于处理registry的bean，需要解析各个属性参数，比如address，port，timeout等</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">getter</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">Modifier</span><span class="o">.</span><span class="na">isPublic</span><span class="o">(</span><span class="n">getter</span><span class="o">.</span><span class="na">getModifiers</span><span class="o">())</span> <span class="o">||</span> <span class="o">!</span><span class="n">type</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">getter</span><span class="o">.</span><span class="na">getReturnType</span><span class="o">()))</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">continue</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="s">&quot;parameters&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">parameters</span> <span class="o">=</span> <span class="n">parseParameters</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">getChildNodes</span><span class="o">(),</span> <span class="n">beanDefinition</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="s">&quot;methods&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">parseMethods</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">element</span><span class="o">.</span><span class="na">getChildNodes</span><span class="o">(),</span> <span class="n">beanDefinition</span><span class="o">,</span> <span class="n">parserContext</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="s">&quot;arguments&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">parseArguments</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">element</span><span class="o">.</span><span class="na">getChildNodes</span><span class="o">(),</span> <span class="n">beanDefinition</span><span class="o">,</span> <span class="n">parserContext</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">                    <span class="c1">// ok，来解析每个属性参数了</span>
</span><span class="line">                    <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="n">property</span><span class="o">);</span>
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                        <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>
</span><span class="line">                        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                            <span class="c1">// N/A配置，则采用new 新配置对象</span>
</span><span class="line">                            <span class="k">if</span> <span class="o">(</span><span class="s">&quot;registry&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">RegistryConfig</span><span class="o">.</span><span class="na">NO_AVAILABLE</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">value</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                                <span class="n">RegistryConfig</span> <span class="n">registryConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RegistryConfig</span><span class="o">();</span>
</span><span class="line">                                <span class="n">registryConfig</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="n">RegistryConfig</span><span class="o">.</span><span class="na">NO_AVAILABLE</span><span class="o">);</span>
</span><span class="line">                                <span class="n">beanDefinition</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">().</span><span class="na">addPropertyValue</span><span class="o">(</span><span class="n">property</span><span class="o">,</span> <span class="n">registryConfig</span><span class="o">);</span>
</span><span class="line">                            <span class="o">}</span>
</span><span class="line">                            <span class="c1">// 多注册中心配置？？</span>
</span><span class="line">                            <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="s">&quot;registry&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="sc">&#39;,&#39;</span><span class="o">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                                <span class="n">parseMultiRef</span><span class="o">(</span><span class="s">&quot;registries&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">beanDefinition</span><span class="o">,</span> <span class="n">parserContext</span><span class="o">);</span>
</span><span class="line">                            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="s">&quot;provider&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="sc">&#39;,&#39;</span><span class="o">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                                <span class="n">parseMultiRef</span><span class="o">(</span><span class="s">&quot;providers&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">beanDefinition</span><span class="o">,</span> <span class="n">parserContext</span><span class="o">);</span>
</span><span class="line">                            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="s">&quot;protocol&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="sc">&#39;,&#39;</span><span class="o">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                                <span class="n">parseMultiRef</span><span class="o">(</span><span class="s">&quot;protocols&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">beanDefinition</span><span class="o">,</span> <span class="n">parserContext</span><span class="o">);</span>
</span><span class="line">                            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                                <span class="n">Object</span> <span class="n">reference</span><span class="o">;</span>
</span><span class="line">                                <span class="k">if</span> <span class="o">(</span><span class="n">isPrimitive</span><span class="o">(</span><span class="n">type</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                                    <span class="k">if</span> <span class="o">(</span><span class="s">&quot;async&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s">&quot;false&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">||</span> <span class="s">&quot;timeout&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span>
</span><span class="line">                                            <span class="o">&amp;&amp;</span> <span class="s">&quot;0&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">||</span> <span class="s">&quot;delay&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s">&quot;0&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span><span class="line">                                            <span class="o">||</span> <span class="s">&quot;version&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s">&quot;0.0.0&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span><span class="line">                                            <span class="o">||</span> <span class="s">&quot;stat&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s">&quot;-1&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span><span class="line">                                            <span class="o">||</span> <span class="s">&quot;reliable&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s">&quot;false&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">value</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                                        <span class="c1">// 兼容旧版本xsd中的default值</span>
</span><span class="line">                                        <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">                                    <span class="o">}</span>
</span><span class="line">                                    <span class="n">reference</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">                                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="s">&quot;protocol&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span>
</span><span class="line">                                        <span class="o">&amp;&amp;</span> <span class="n">ExtensionLoader</span><span class="o">.</span><span class="na">getExtensionLoader</span><span class="o">(</span><span class="n">Protocol</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">hasExtension</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span><span class="line">                                        <span class="o">&amp;&amp;</span> <span class="o">(!</span><span class="n">parserContext</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">containsBeanDefinition</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">ProtocolConfig</span><span class="o">.</span><span class="na">class</span>
</span><span class="line">                                                <span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span>
</span><span class="line">                                                        <span class="n">parserContext</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">getBeanDefinition</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span><span class="line">                                                                <span class="o">.</span><span class="na">getBeanClassName</span><span class="o">())))</span> <span class="o">{</span>
</span><span class="line">                                    <span class="k">if</span> <span class="o">(</span><span class="s">&quot;dubbo:provider&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">getTagName</span><span class="o">()))</span> <span class="o">{</span>
</span><span class="line">                                        <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Recommended replace &lt;dubbo:provider protocol=\&quot;&quot;</span> <span class="o">+</span> <span class="n">value</span>
</span><span class="line">                                                <span class="o">+</span> <span class="s">&quot;\&quot; ... /&gt; to &lt;dubbo:protocol name=\&quot;&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;\&quot; ... /&gt;&quot;</span><span class="o">);</span>
</span><span class="line">                                    <span class="o">}</span>
</span><span class="line">                                    <span class="c1">// 兼容旧版本配置</span>
</span><span class="line">                                    <span class="n">ProtocolConfig</span> <span class="n">protocol</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ProtocolConfig</span><span class="o">();</span>
</span><span class="line">                                    <span class="n">protocol</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class="line">                                    <span class="n">reference</span> <span class="o">=</span> <span class="n">protocol</span><span class="o">;</span>
</span><span class="line">                                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="s">&quot;monitor&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span>
</span><span class="line">                                        <span class="o">&amp;&amp;</span> <span class="o">(!</span><span class="n">parserContext</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">containsBeanDefinition</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">MonitorConfig</span><span class="o">.</span><span class="na">class</span>
</span><span class="line">                                                <span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span>
</span><span class="line">                                                        <span class="n">parserContext</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">getBeanDefinition</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span><span class="line">                                                                <span class="o">.</span><span class="na">getBeanClassName</span><span class="o">())))</span> <span class="o">{</span>
</span><span class="line">                                    <span class="c1">// 兼容旧版本配置</span>
</span><span class="line">                                    <span class="n">reference</span> <span class="o">=</span> <span class="n">convertMonitor</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class="line">                                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="s">&quot;onreturn&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                                    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">);</span>
</span><span class="line">                                    <span class="n">String</span> <span class="n">returnRef</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
</span><span class="line">                                    <span class="n">String</span> <span class="n">returnMethod</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">                                    <span class="n">reference</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RuntimeBeanReference</span><span class="o">(</span><span class="n">returnRef</span><span class="o">);</span>
</span><span class="line">                                    <span class="n">beanDefinition</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">().</span><span class="na">addPropertyValue</span><span class="o">(</span><span class="s">&quot;onreturnMethod&quot;</span><span class="o">,</span> <span class="n">returnMethod</span><span class="o">);</span>
</span><span class="line">                                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="s">&quot;onthrow&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                                    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">);</span>
</span><span class="line">                                    <span class="n">String</span> <span class="n">throwRef</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
</span><span class="line">                                    <span class="n">String</span> <span class="n">throwMethod</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">                                    <span class="n">reference</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RuntimeBeanReference</span><span class="o">(</span><span class="n">throwRef</span><span class="o">);</span>
</span><span class="line">                                    <span class="n">beanDefinition</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">().</span><span class="na">addPropertyValue</span><span class="o">(</span><span class="s">&quot;onthrowMethod&quot;</span><span class="o">,</span> <span class="n">throwMethod</span><span class="o">);</span>
</span><span class="line">                                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                                    <span class="k">if</span> <span class="o">(</span><span class="s">&quot;ref&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">property</span><span class="o">)</span>
</span><span class="line">                                            <span class="o">&amp;&amp;</span> <span class="n">parserContext</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">containsBeanDefinition</span><span class="o">(</span><span class="n">value</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                                        <span class="n">BeanDefinition</span> <span class="n">refBean</span> <span class="o">=</span> <span class="n">parserContext</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">getBeanDefinition</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class="line">                                        <span class="k">if</span> <span class="o">(!</span><span class="n">refBean</span><span class="o">.</span><span class="na">isSingleton</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                                            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;The exported service ref &quot;</span> <span class="o">+</span> <span class="n">value</span>
</span><span class="line">                                                    <span class="o">+</span> <span class="s">&quot; must be singleton! Please set the &quot;</span> <span class="o">+</span> <span class="n">value</span>
</span><span class="line">                                                    <span class="o">+</span> <span class="s">&quot; bean scope to singleton, eg: &lt;bean id=\&quot;&quot;</span> <span class="o">+</span> <span class="n">value</span>
</span><span class="line">                                                    <span class="o">+</span> <span class="s">&quot;\&quot; scope=\&quot;singleton\&quot; ...&gt;&quot;</span><span class="o">);</span>
</span><span class="line">                                        <span class="o">}</span>
</span><span class="line">                                    <span class="o">}</span>
</span><span class="line">                                    <span class="n">reference</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RuntimeBeanReference</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class="line">                                <span class="o">}</span>
</span><span class="line">                                <span class="n">beanDefinition</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">().</span><span class="na">addPropertyValue</span><span class="o">(</span><span class="n">property</span><span class="o">,</span> <span class="n">reference</span><span class="o">);</span>
</span><span class="line">                            <span class="o">}</span>
</span><span class="line">                        <span class="o">}</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 获取所有属性</span>
</span><span class="line">        <span class="c1">// ok,现在解析每一个节点对应的属性参数，比如 address，loadbalance等</span>
</span><span class="line">        <span class="n">NamedNodeMap</span> <span class="n">attributes</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">();</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">item</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="line">            <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">getLocalName</span><span class="o">();</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(!</span><span class="n">props</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">parameters</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">parameters</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ManagedMap</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">getNodeValue</span><span class="o">();</span>
</span><span class="line">                <span class="c1">// 整了这么多，到这里终于放进ManagedMap里面去了</span>
</span><span class="line">                <span class="n">parameters</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="k">new</span> <span class="nf">TypedStringValue</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">parameters</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// 这里放到beanDefinition属性里面，进而在Context中就可以拿到了</span>
</span><span class="line">            <span class="n">beanDefinition</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">().</span><span class="na">addPropertyValue</span><span class="o">(</span><span class="s">&quot;parameters&quot;</span><span class="o">,</span> <span class="n">parameters</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">beanDefinition</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//.............................</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线上Mysql Delete 和 Insert 操作导致死锁问题分析]]></title>
    <link href="http://kxcoder.github.io/blog/2014/10/09/Mysql-Delete-Insert-Deadlock-Analyse/"/>
    <updated>2014-10-09T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2014/10/09/Mysql-Delete-Insert-Deadlock-Analyse</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#Problem">死锁问题定位</a></li>
  <li><a href="#Analyse">死锁问题分析</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>今天项目发布，上线上跟日志的时候，发现一些死锁信息的出现，查询了一下，发现日志里面虽然死锁出现很少，但是都是同一个代码<code>sql</code>语句产生的，如下图所示：</p>

<!--more-->

<p><img src="http://kxcoder.github.io/images/2014/10/deadlock-log.png" /></p>

<p>并且，一天产生死锁<code>31</code>次。</p>

<p>从DBA那边拿到了对应死锁的<code>Mysql</code>日志信息：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Mysql死锁日志 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">------------------------
</span><span class="line">LATEST DETECTED DEADLOCK
</span><span class="line">------------------------
</span><span class="line"><span class="m">141009</span> 12:54:59
</span><span class="line">*** <span class="o">(</span>1<span class="o">)</span> TRANSACTION:
</span><span class="line">TRANSACTION AEE50DCB, ACTIVE <span class="m">0</span> sec starting index <span class="nb">read</span>
</span><span class="line">mysql tables in use 1, locked 1
</span><span class="line">LOCK WAIT <span class="m">2</span> lock struct<span class="o">(</span>s<span class="o">)</span>, heap size 376, <span class="m">1</span> row lock<span class="o">(</span>s<span class="o">)</span>
</span><span class="line">MySQL thread id 6055694, OS thread handle 0x7f4345c8d700, query id <span class="m">2443700084</span> 192.168.249.154 crm_w updating
</span><span class="line">DELETE FROM crm_business WHERE <span class="nv">serial_number</span> <span class="o">=</span> <span class="s1">&#39;CH01313320&#39;</span>
</span><span class="line">*** <span class="o">(</span>1<span class="o">)</span> WAITING FOR THIS LOCK TO BE GRANTED:
</span><span class="line">RECORD LOCKS space id <span class="m">244</span> page no <span class="m">817</span> n bits <span class="m">824</span> index <span class="sb">`</span>uniq_serial_number_business_type<span class="sb">`</span> of table <span class="sb">`</span>crm<span class="sb">`</span>.<span class="sb">`</span>crm_business<span class="sb">`</span> trx id AEE50DCB lock_mode X waiting
</span><span class="line">*** <span class="o">(</span>2<span class="o">)</span> TRANSACTION:
</span><span class="line">TRANSACTION AEE50DCA, ACTIVE <span class="m">0</span> sec inserting, thread declared inside InnoDB 500
</span><span class="line">mysql tables in use 1, locked 1
</span><span class="line"><span class="m">3</span> lock struct<span class="o">(</span>s<span class="o">)</span>, heap size 1248, <span class="m">3</span> row lock<span class="o">(</span>s<span class="o">)</span>, undo log entries 1
</span><span class="line">MySQL thread id 6055696, OS thread handle 0x7f4344941700, query id <span class="m">2443700084</span> 192.168.249.154 crm_w update
</span><span class="line">INSERT INTO crm_business<span class="o">(</span>serial_number, business_type<span class="o">)</span> values <span class="o">(</span><span class="s1">&#39;CH01313318&#39;</span>, 2<span class="o">)</span>
</span><span class="line">*** <span class="o">(</span>2<span class="o">)</span> HOLDS THE LOCK<span class="o">(</span>S<span class="o">)</span>:
</span><span class="line">RECORD LOCKS space id <span class="m">244</span> page no <span class="m">817</span> n bits <span class="m">824</span> index <span class="sb">`</span>uniq_serial_number_business_type<span class="sb">`</span> of table <span class="sb">`</span>crm<span class="sb">`</span>.<span class="sb">`</span>crm_business<span class="sb">`</span> trx id AEE50DCA lock mode S
</span><span class="line">*** <span class="o">(</span>2<span class="o">)</span> WAITING FOR THIS LOCK TO BE GRANTED:
</span><span class="line">RECORD LOCKS space id <span class="m">244</span> page no <span class="m">817</span> n bits <span class="m">824</span> index <span class="sb">`</span>uniq_serial_number_business_type<span class="sb">`</span> of table <span class="sb">`</span>crm<span class="sb">`</span>.<span class="sb">`</span>crm_business<span class="sb">`</span> trx id AEE50DCA lock_mode X locks gap before rec insert intention waiting
</span><span class="line">*** WE ROLL BACK TRANSACTION <span class="o">(</span>1<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Note: 数据库中，<code>CH01313318</code>和<code>CH01313320</code>序列号是连着的两个记录。</p>
  </blockquote>
</blockquote>

<h2 id="a-idproblema"><a id="Problem">死锁问题定位</a></h2>

<p>之所以需要分析这个问题，主要原因是，这边代码并<em>没有</em>涉及到在一个事务内部sql操作导致死锁等常见的情况。</p>

<ul>
  <li>首先，我们看看设计问题的代码片段：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>代码片段 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="n">C</span> <span class="n">c</span> <span class="o">:</span> <span class="n">cs</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">threadPool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">processOneC</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">});</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">processOneC</span><span class="o">(</span><span class="n">C</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">Strings</span><span class="o">.</span><span class="na">isNullOrEmpty</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getSeqNumber</span><span class="o">()))</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 删除原合作业务</span>
</span><span class="line">            <span class="n">cBusinessDAO</span><span class="o">.</span><span class="na">deleteBySN</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getSerialNumber</span><span class="o">());</span> <span class="c1">//delete操作</span>
</span><span class="line">
</span><span class="line">            <span class="c1">//..........</span>
</span><span class="line">
</span><span class="line">            <span class="n">setTuanBusiness</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">hotelResult</span><span class="o">);</span> <span class="c1">//insert操作</span>
</span><span class="line">            <span class="n">setDirectBusiness</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">hotelResult</span><span class="o">);</span> <span class="c1">//insert操作</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;CustomerBusinessProcess.processOneCustomer error, Exception&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;==========&quot;</span> <span class="o">+</span> <span class="n">co</span><span class="o">.</span><span class="na">addAndGet</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面代码的逻辑很简单，就是对一个列表对象，多线程来分别操作。每个对象的处理，删除原来的记录，然后添加新的记录。</p>

<ul>
  <li>其次，设计到的SQL语句：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sql语句 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="mysql"><span class="line"><span class="k">DELETE</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">crm_business</span>
</span><span class="line"><span class="k">WHERE</span> <span class="n">serial_number</span> <span class="o">=</span> <span class="s1">&#39;xxxx&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">INSERT</span>
</span><span class="line"><span class="k">INTO</span> <span class="nf">crm_business</span><span class="p">(</span>
</span><span class="line"><span class="n">serial_number</span><span class="p">,</span>
</span><span class="line"><span class="n">business_type</span>
</span><span class="line"><span class="p">)</span> <span class="k">values</span> <span class="p">(</span>
</span><span class="line"><span class="s1">&#39;xxxx&#39;</span><span class="p">,</span>
</span><span class="line"><span class="mi">1</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>最后，看看相关表的建表sql语句：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>建表sql语句 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="mysql"><span class="line"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="ss">`crm_business`</span> <span class="p">(</span>
</span><span class="line">  <span class="ss">`id`</span> <span class="kt">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">unsigned</span> <span class="k">NOT</span> <span class="no">NULL</span> <span class="kp">AUTO_INCREMENT</span> <span class="n">COMMENT</span> <span class="s1">&#39;主键ID&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="ss">`serial_number`</span> <span class="kt">varchar</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="k">NOT</span> <span class="no">NULL</span> <span class="n">COMMENT</span> <span class="s1">&#39;商户编号&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="ss">`business_type`</span> <span class="kt">tinyint</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="no">NULL</span> <span class="n">COMMENT</span> <span class="s1">&#39;业务类型&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="ss">`id`</span><span class="p">),</span>
</span><span class="line">  <span class="k">UNIQUE</span> <span class="k">KEY</span> <span class="ss">`uniq_serial_number_business_type`</span> <span class="p">(</span><span class="ss">`serial_number`</span><span class="p">,</span><span class="ss">`business_type`</span><span class="p">)</span>
</span><span class="line"><span class="p">)</span> <span class="kp">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="kp">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">34856774</span> <span class="k">DEFAULT</span> <span class="kp">CHARSET</span><span class="o">=</span><span class="n">utf8</span> <span class="n">COMMENT</span><span class="o">=</span><span class="s1">&#39;合作业务&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>数据表里面，字段很简单，但是里面涉及一个唯一键索引。</p>

<blockquote>
  <blockquote>
    <p>Note: 上面的代码，<code>delete</code>和<code>insert</code>操作不在一个事务里面，因为代码上没有添加@transaction 注解，也就是单纯delete<code>和</code>insert`操作在多线程环境下，竟然会产生死锁。此外，需要注意，操作唯一键相关字段，经常会不注意就产生死锁问题。</p>
  </blockquote>
</blockquote>

<h2 id="a-idanalysea"><a id="Analyse">死锁问题分析</a></h2>

<p>首先，给出一篇博客，mysql大神写的<a href="http://hedengcheng.com/?p=844">http://hedengcheng.com/?p=844</a>,一下分析，借鉴使用该博客的分析。</p>

<blockquote>
  <blockquote>
    <p>Tips: 有兴趣，请直接阅读该博客的分析。</p>
  </blockquote>
</blockquote>

<h3 id="mysql">Mysql日志分析</h3>

<p>以上Mysql产生的死锁日志，包含两个事务。</p>

<p><em>事务1</em>：当前正在操作一张表（mysql tables in use 1），持有两把锁(2 lock structs，一个表级意向锁，一个行锁(1 row lock))，这个事务，当前正在处理的语句是一条delete语句。同时，这唯一的一个行锁，处于等待状态(WAITING FOR THIS LOCK TO BE GRANTED)。</p>

<p>事务1等待中的行锁，加锁的对象是唯一索引<code>uniq_serial_number_business_type</code>上页面号为<code>817</code>页面上的一行(注：具体是哪一行，无法看到。但是能够看到的是，这个行锁，一共有824个bits可以用来锁824个行记录，n bits 824：lock_rec_print()方法)。同时，等待的行锁模式为next key锁(lock_mode X)。简单来说，next key锁有两层含义，一是对当前记录加X锁，防止记录被并发修改，同时锁住记录之前的GAP，防止有新的记录插入到此记录之前。</p>

<p><em>事务2</em>：和事务1一样，事务2上面有三个行锁，三个行锁，<code>undo log entries 1</code>，两个锁都是唯一索引<code>uniq_serial_number_business_type</code>上页号<code>817</code>上的某一条记录。其中，一个锁处于持有状态，锁模式为S mode，即共享锁，同时，另外一把锁处于等待状态，锁模式为X mode，即互斥锁。因此，拥有锁S模式不代表可以获取接下来的X模式的锁。</p>

<p>事务1正在等待事务2释放锁的S模式，从而获取X模式的锁；但是事务2已经获取了S模式，但是其等待继续获取锁的X模型,这个模式事务1优先申请获取，因此就导致死锁。</p>

<blockquote>
  <blockquote>
    <p>Note: 事务1优先去等待获取锁的X模式，是因为在Mysql中为了公平竞争，杜绝事务1发生饥饿现象。这样会导致上述死锁出现。</p>
  </blockquote>
</blockquote>

<p>那么为什么会出现<code>delete</code>操作抛出死锁失败，事务回滚。</p>

<p>Mysql实现，会根据死锁冲突的两个事务的权重，事务1的权重会更低，然后被选为抛弃的对象，回滚该操作。</p>

<h3 id="delete">Delete操作的加锁逻辑</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>delete sql语句 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="mysql"><span class="line"><span class="k">DELETE</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">crm_business</span>
</span><span class="line"><span class="k">WHERE</span> <span class="n">serial_number</span> <span class="o">=</span> <span class="s1">&#39;xxxx&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code> serial_number</code>是数据表里面的唯一键索引，一个二级索引键值。</p>

<p><code> serial_number</code>是unique索引，而主键是id列。因此delete语句会选择走<code>serial_number</code>列的索引进行where条件的过滤，在找到<code>serial_number = 'xxxx'</code>的记录后，首先会将unique索引上的<code>serial_number = 'xxxx'</code>索引记录加上X锁，同时，会根据读取到的<code>id</code>列，回主键索引(聚簇索引)，然后将聚簇索引上的<code>id = 10</code> 对应的主键索引项加X锁。为什么聚簇索引上的记录也要加锁？试想一下，如果并发的一个SQL，是通过主键索引来更新：<code>update crm_business set serial_number = xyy where id = 10</code>; 此时，如果delete语句没有将主键索引上的记录加锁，那么并发的update就会感知不到delete语句的存在，违背了同一记录上的更新/删除需要串行执行的约束。</p>

<blockquote>
  <blockquote>
    <p>Note：和delete操作类似的加锁操作，还有：</p>
  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>加锁sql语句 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="mysql"><span class="line">    <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="k">table</span> <span class="k">where</span> <span class="o">?</span> <span class="k">lock</span> <span class="k">in</span> <span class="n">share</span> <span class="n">mode</span><span class="p">;</span>
</span><span class="line">    <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="k">table</span> <span class="k">where</span> <span class="o">?</span> <span class="k">for</span> <span class="k">update</span><span class="p">;</span>
</span><span class="line">    <span class="k">insert</span> <span class="k">into</span> <span class="k">table</span> <span class="k">values</span> <span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="k">update</span> <span class="k">table</span> <span class="kt">set</span> <span class="o">?</span> <span class="k">where</span> <span class="o">?</span><span class="p">;</span>
</span><span class="line">    <span class="k">delete</span> <span class="k">from</span> <span class="k">table</span> <span class="k">where</span> <span class="o">?</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>
<blockquote>
  <blockquote>
    <p>上述操作都是当前读，需要读取记录的最新操作，读取之后，为了保证其他并发事务不能修改当前记录，会对读的记录加锁，可能是S模式锁，或者X模式锁。</p>
  </blockquote>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jackson 工具类使用及配置指南]]></title>
    <link href="http://kxcoder.github.io/blog/2014/09/09/Jackson-Manual-and-Implementation-Analyzing/"/>
    <updated>2014-09-09T22:21:35+08:00</updated>
    <id>http://kxcoder.github.io/blog/2014/09/09/Jackson-Manual-and-Implementation-Analyzing</id>
    <content type="html"><![CDATA[<h2 id="section">目录</h2>

<ol>
  <li><a href="#Intro">前言</a></li>
  <li><a href="#JsonUtils">Jackson使用工具类</a></li>
  <li><a href="#JsonConfig">Jackson配置属性</a></li>
  <li><a href="#JsonParser">Jackson解析JSON数据</a></li>
  <li><a href="#JsonDeserializer">Jackson序列化Java对象</a></li>
</ol>

<h2 id="a-idintroa"><a id="Intro">前言</a></h2>

<p>Json数据格式这两年发展的很快，其声称相对XML格式有很对好处：</p>

<ul>
  <li>容易阅读；</li>
  <li>解析速度快；</li>
  <li>占用空间更少。</li>
</ul>

<p>不过，JSON 和 XML两者纠结谁优谁劣，这里不做讨论，可以参见知乎上<a href="http://www.zhihu.com/question/20738607">为什么XML这么笨重的数据结构仍在广泛应用？</a>。</p>

<p>最近在项目中，会有各种解析JSON文本的需求，使用第三方<code>Jackson</code>工具来解析时，又担心当增加会减少字段，会不会出现非预期的情况，因此，研究下<code>jackson</code>解析json数据格式的代码，很有需要。</p>

<!--more-->

<h2 id="a-idjsonutilsjacksona"><a id="JsonUtils">Jackson使用工具类</a></h2>

<p>通常，我们对json格式的数据，只会进行解析和封装两种，也就是<code>json字符串---&gt;java对象</code>以及<code>java对象---&gt; json字符串</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson使用工具类 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonUtils</span> <span class="o">{</span>
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Logger for this class</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">JsonUtils</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ObjectMapper</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="o">{</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">ALLOW_COMMENTS</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">ALLOW_UNQUOTED_FIELD_NAMES</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">ALLOW_SINGLE_QUOTES</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">ALLOW_UNQUOTED_CONTROL_CHARS</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">INTERN_FIELD_NAMES</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">CANONICALIZE_FIELD_NAMES</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">DeserializationConfig</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="nf">JsonUtils</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">encode</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonGenerationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;encode(Object)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span> <span class="c1">//$NON-NLS-1$</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonMappingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;encode(Object)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span> <span class="c1">//$NON-NLS-1$</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;encode(Object)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span> <span class="c1">//$NON-NLS-1$</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 将json string反序列化成对象</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @param json</span>
</span><span class="line"><span class="cm">     * @param valueType</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">decode</span><span class="o">(</span><span class="n">String</span> <span class="n">json</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">valueType</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">valueType</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;decode(String, Class&lt;T&gt;)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonMappingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;decode(String, Class&lt;T&gt;)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;decode(String, Class&lt;T&gt;)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 将json array反序列化为对象</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @param json</span>
</span><span class="line"><span class="cm">     * @param jsonTypeReference</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">decode</span><span class="o">(</span><span class="n">String</span> <span class="n">json</span><span class="o">,</span> <span class="n">TypeReference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">typeReference</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">typeReference</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;decode(String, JsonTypeReference&lt;T&gt;)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonMappingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;decode(String, JsonTypeReference&lt;T&gt;)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;decode(String, JsonTypeReference&lt;T&gt;)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idjsonconfigjacksona"><a id="JsonConfig">Jackson配置属性</a></h2>

<p>如果上面的工具类实例，在Jackson中存在一些属性配置，这些配置决定了最后在解析或者编码后数据视图。因此，在分析Jackson之前，先了解下，Jackson具有的一些配置含义。</p>

<h3 id="jsonparser">JsonParser解析相关配置属性</h3>

<p><code>JsonParser</code>将JSON 数据格式的String字符串，解析成为Java对象。Jackson在解析的时候，对于一些非JSON官方文档支持的属性，则需要通过一些配置才可以被Jackson工具解析成对象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson配置属性 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">	<span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Enumeration that defines all togglable features for parsers.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">enum</span> <span class="n">Feature</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// // // Low-level I/O handling features:</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 这个特性，决定了解析器是否将自动关闭那些不属于parser自己的输入源。 如果禁止，则调用应用不得不分别去关闭那些被用来创建parser的基础输入流InputStream和reader；</span>
</span><span class="line"><span class="cm">         * 如果允许，parser只要自己需要获取closed方法（当遇到输入流结束，或者parser自己调用 JsonParder#close方法），就会处理流关闭。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 注意：这个属性默认是true，即允许自动关闭流</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">AUTO_CLOSE_SOURCE</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// // // Support for non-standard data format constructs</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定parser将是否允许解析使用Java/C++ 样式的注释（包括&#39;/&#39;+&#39;*&#39; 和&#39;//&#39; 变量）。 由于JSON标准说明书上面没有提到注释是否是合法的组成，所以这是一个非标准的特性；</span>
</span><span class="line"><span class="cm">         * 尽管如此，这个特性还是被广泛地使用。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 注意：该属性默认是false，因此必须显式允许，即通过JsonParser.Feature.ALLOW_COMMENTS 配置为true。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ALLOW_COMMENTS</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 这个特性决定parser是否将允许使用非双引号属性名字， （这种形式在Javascript中被允许，但是JSON标准说明书中没有）。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 注意：由于JSON标准上需要为属性名称使用双引号，所以这也是一个非标准特性，默认是false的。</span>
</span><span class="line"><span class="cm">         * 同样，需要设置JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES为true，打开该特性。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ALLOW_UNQUOTED_FIELD_NAMES</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定parser是否允许单引号来包住属性名称和字符串值。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 注意：默认下，该属性也是关闭的。需要设置JsonParser.Feature.ALLOW_SINGLE_QUOTES为true</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ALLOW_SINGLE_QUOTES</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定parser是否允许JSON字符串包含非引号控制字符（值小于32的ASCII字符，包含制表符和换行符）。 如果该属性关闭，则如果遇到这些字符，则会抛出异常。</span>
</span><span class="line"><span class="cm">         * JSON标准说明书要求所有控制符必须使用引号，因此这是一个非标准的特性。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 注意：默认时候，该属性关闭的。需要设置：JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS为true。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ALLOW_UNQUOTED_CONTROL_CHARS</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性可以允许接受所有引号引起来的字符，使用‘反斜杠\’机制：如果不允许，只有JSON标准说明书中 列出来的字符可以被避开约束。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 由于JSON标准说明中要求为所有控制字符使用引号，这是一个非标准的特性，所以默认是关闭的。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 注意：一般在设置ALLOW_SINGLE_QUOTES属性时，也设置了ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER属性，</span>
</span><span class="line"><span class="cm">         * 所以，有时候，你会看到不设置ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER为true，但是依然可以正常运行。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * @since 1.6</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定parser是否允许JSON整数以多个0开始(比如，如果000001赋值给json某变量，</span>
</span><span class="line"><span class="cm">         * 如果不设置该属性，则解析成int会抛异常报错：org.codehaus.jackson.JsonParseException: Invalid numeric value: Leading zeroes not</span>
</span><span class="line"><span class="cm">         * allowed)</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 注意：该属性默认是关闭的，如果需要打开，则设置JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS为true。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * @since 1.8</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ALLOW_NUMERIC_LEADING_ZEROS</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性允许parser可以识别&quot;Not-a-Number&quot; (NaN)标识集合作为一个合法的浮点数。 例如： allows (tokens are quoted contents, not including</span>
</span><span class="line"><span class="cm">         * quotes):</span>
</span><span class="line"><span class="cm">         * &lt;ul&gt;</span>
</span><span class="line"><span class="cm">         * &lt;li&gt;&quot;INF&quot; (for positive infinity), as well as alias of &quot;Infinity&quot;</span>
</span><span class="line"><span class="cm">         * &lt;li&gt;&quot;-INF&quot; (for negative infinity), alias &quot;-Infinity&quot;</span>
</span><span class="line"><span class="cm">         * &lt;li&gt;&quot;NaN&quot; (for other not-a-numbers, like result of division by zero)</span>
</span><span class="line"><span class="cm">         * &lt;/ul&gt;</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">        <span class="n">ALLOW_NON_NUMERIC_NUMBERS</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// // // Controlling canonicalization (interning etc)</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定JSON对象属性名称是否可以被String#intern 规范化表示。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 如果允许，则JSON所有的属性名将会 intern() ；如果不设置，则不会规范化，</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 默认下，该属性是开放的。此外，必须设置CANONICALIZE_FIELD_NAMES为true</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 关于intern方法作用：当调用 intern 方法时，如果池已经包含一个等于此 String 对象的字符串 （该对象由 equals(Object) 方法确定），则返回池中的字符串。否则，将此 String</span>
</span><span class="line"><span class="cm">         * 对象添加到池中， 并且返回此 String 对象的引用。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * @since 1.3</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">INTERN_FIELD_NAMES</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定JSON对象的属性名称是否被规范化。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * @since 1.5</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">CANONICALIZE_FIELD_NAMES</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">_defaultState</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * Method that calculates bit set (flags) of all features that are enabled by default.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">collectDefaults</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">flags</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="n">Feature</span> <span class="n">f</span> <span class="o">:</span> <span class="n">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">enabledByDefault</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">flags</span> <span class="o">|=</span> <span class="n">f</span><span class="o">.</span><span class="na">getMask</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">return</span> <span class="n">flags</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">private</span> <span class="nf">Feature</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">defaultState</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">_defaultState</span> <span class="o">=</span> <span class="n">defaultState</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">enabledByDefault</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">_defaultState</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">enabledIn</span><span class="o">(</span><span class="kt">int</span> <span class="n">flags</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="o">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">getMask</span><span class="o">())</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMask</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">ordinal</span><span class="o">());</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>Note: 在枚举最后有一个公共静态方法<code>collectDefaults()</code>，这个方法返回一个整形，整形包含的是所有枚举项对应位bit为初始默认值（true：1；false：0），如果默认属性为true，则通过对<code>1 &lt;&lt; ordinal()</code>的值和flags进行亦或来置位。</p>
  </blockquote>
</blockquote>

<h3 id="deserializationconfig">DeserializationConfig反序列化相关配置属性</h3>

<p>将Java 对象序列化为Json字符串。Jackson在序列化Java对象的时候，对于有些不存在的属性处理，以及一些类型转换等，都可以通过配置来设置。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson反序列配置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">	<span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Enumeration that defines togglable features that guide the serialization feature.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">enum</span> <span class="n">Feature</span> <span class="kd">implements</span> <span class="n">MapperConfig</span><span class="o">.</span><span class="na">ConfigFeature</span> <span class="o">{</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">         * /****************************************************** Introspection features</span>
</span><span class="line"><span class="cm">         * /******************************************************</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定是否启动内部注解功能支持配置；如果允许，则使用AnnotationIntrospector扫描配置，否则，不考了注解配置。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 默认启动该功能配置属性。</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * @since 1.2</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">USE_ANNOTATIONS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定是否使用“getter”方法来根据标准bean命名转换方式来自动检测。如果true，则所有公共的带有一个参数</span>
</span><span class="line"><span class="cm">         * 并且前缀为set的方法都将被当做setter方法。如果false，只会把显式注解的作为setter方法。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 注意: 这个特性的优先级低于显式注解，并且只会在获取不到更细粒度配置的情况下。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">AUTO_DETECT_GETTERS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>                        <span class="n">DETECT_IS_GETTERS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定是否使用creator方法来根据公共构造函数以及名字为“valueOf”的静态单参数方法自动检测。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 注意：这个特性比每个类上注解的优先级要低。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">AUTO_DETECT_CREATORS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 这个特性决定是否非静态field被当做属性。如果true，则所有公共成员field都被当做属性， 否则只有注解，才会被当做属性field。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">AUTO_DETECT_FIELDS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 使用getter方法来作为setter方法（一般只处理集合和Maps，和其他没有setter的类型）。 该属性决定是否不需要setter方法，而只需要getter方法来修改属性。</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * 注意：该配置优先级低于setter。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">USE_GETTERS_AS_SETTERS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定当访问属性时候，方法和field访问是否修改设置。 如果设置为true，则通过反射调用方法AccessibleObject#setAccessible 来允许访问不能访问的对象。</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">CAN_OVERRIDE_ACCESS_MODIFIERS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>                <span class="n">GETTERS</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">         * /****************************************************** /* Type conversion features</span>
</span><span class="line"><span class="cm">         * /******************************************************</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定对于json浮点数，是否使用BigDecimal来序列化。如果不允许，则使用Double序列化。</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * 注意：该特性默认是关闭的，因为性能上来说，BigDecimal低于Double。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">USE_BIG_DECIMAL_FOR_FLOATS</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定对于json整形（非浮点），是否使用BigInteger来序列化。如果不允许，则根据数值大小来确定 是使用Integer}, {@link Long} 或者</span>
</span><span class="line"><span class="cm">         * {@link java.math.BigInteger}</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">USE_BIG_INTEGER_FOR_INTS</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// [JACKSON-652]</span>
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定JSON ARRAY是映射为Object[]还是List&lt;Object&gt;。如果开启，都为Object[]，false时，则使用List。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * @since 1.9</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">USE_JAVA_ARRAY_FOR_JSON_ARRAY</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定了使用枚举值的标准序列化机制：如果允许，则枚举假定使用Enum.toString()返回的值作为序列化结构；如果禁止, 则返回Enum.name()的值。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 注意：默认使用的时Enum.name()的值作为枚举序列化结果。这个的设置和WRITE_ENUMS_USING_TO_STRING需要一致。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * For further details, check out [JACKSON-212]</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * @since 1.6</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">READ_ENUMS_USING_TO_STRING</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">         * /****************************************************** Error handling features</span>
</span><span class="line"><span class="cm">         * /****************************************************** 错误处理特性</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定了当遇到未知属性（没有映射到属性，没有任何setter或者任何可以处理它的handler），是否应该抛出一个</span>
</span><span class="line"><span class="cm">         * JsonMappingException异常。这个特性一般式所有其他处理方法对未知属性处理都无效后才被尝试，属性保留未处理状态。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 默认情况下，该设置是被打开的。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * @since 1.2</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定当遇到JSON null的对象是java 原始类型，则是否抛出异常。当false时，则使用0 for &#39;int&#39;, 0.0 for double 来设定原始对象初始值。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * 默认情况下，允许原始类型可以使用null。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * @since 1.7</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">FAIL_ON_NULL_FOR_PRIMITIVES</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定JSON 整数是否是一个有效的值，当被用来反序列化Java枚举值。如果false，数字可以接受，并且映射为枚举的值ordinal()；</span>
</span><span class="line"><span class="cm">         * 如果true，则数字不允许并且抛出JsonMappingException异常。后面一种行为原因是因为大部分情况下，枚举被反序列化为 JSON 字符串， 从而造成从整形到枚举的意外映射关系。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * Feature is disabled by default (to be consistent with behavior of Jackson 1.6), i.e. to allow use of JSON</span>
</span><span class="line"><span class="cm">         * integers for Java enums.</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * @since 1.7</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">FAIL_ON_NUMBERS_FOR_ENUMS</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 异常封装，不封装Error,catch异常之后，抛出IOException。默认封装异常。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * @since 1.7</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">WRAP_EXCEPTIONS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">         * /****************************************************** Structural conversion features</span>
</span><span class="line"><span class="cm">         * /****************************************************** 数据结构转换特性</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定是否接受强制非数组（JSON）值到Java集合类型。如果允许，集合反序列化将尝试处理非数组值。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * Feature that determines whether it is acceptable to coerce non-array (in JSON) values to work with Java</span>
</span><span class="line"><span class="cm">         * collection (arrays, java.util.Collection) types. If enabled, collection deserializers will try to handle</span>
</span><span class="line"><span class="cm">         * non-array values as if they had &quot;implicit&quot; surrounding JSON array. This feature is meant to be used for</span>
</span><span class="line"><span class="cm">         * compatibility/interoperability reasons, to work with packages (such as XML-to-JSON converters) that leave out</span>
</span><span class="line"><span class="cm">         * JSON array in cases where there is just a single element in array.</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * @since 1.8</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ACCEPT_SINGLE_VALUE_AS_ARRAY</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特征允许 unwrap根级别JSON 值，来匹配WRAP_ROOT_VALUE 序列化设置。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * @since 1.9</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">UNWRAP_ROOT_VALUE</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">         * /****************************************************** Value conversion features</span>
</span><span class="line"><span class="cm">         * /****************************************************** 值转换特性</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性可以允许JSON空字符串转换为POJO对象为null。如果禁用，则标准POJO只会从JSON null或者JSON对象转换过来；</span>
</span><span class="line"><span class="cm">         * 如果允许，则空JSON字符串可以等价于JSON null。</span>
</span><span class="line"><span class="cm">         * @since 1.8</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">ACCEPT_EMPTY_STRING_AS_NULL_OBJECT</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">        <span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">_defaultState</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="kd">private</span> <span class="nf">Feature</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">defaultState</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">_defaultState</span> <span class="o">=</span> <span class="n">defaultState</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">enabledByDefault</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">_defaultState</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMask</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">ordinal</span><span class="o">());</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="serializationconfig-">SerializationConfig 序列化相关配置属性</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson序列化配置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
<span class="line-number">196</span>
<span class="line-number">197</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">	<span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 定义序列化对象所需配置的一些枚举.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">enum</span> <span class="n">Feature</span> <span class="kd">implements</span> <span class="n">MapperConfig</span><span class="o">.</span><span class="na">ConfigFeature</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">        /******************************************************</span>
</span><span class="line"><span class="cm">        /*  Introspection features</span>
</span><span class="line"><span class="cm">        /******************************************************</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 注解扫描配置</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">USE_ANNOTATIONS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 获取getter方法，前缀为get</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">AUTO_DETECT_GETTERS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 获取getter方法，前缀为is</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">AUTO_DETECT_IS_GETTERS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 将对象所有的field作为json属性</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">         <span class="n">AUTO_DETECT_FIELDS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定当访问属性时候，方法和field访问是否修改设置。 如果设置为true，</span>
</span><span class="line"><span class="cm">         * 则通过反射调用方法AccessibleObject#setAccessible 来允许访问不能访问的对象。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">CAN_OVERRIDE_ACCESS_MODIFIERS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 获取的getter方法需要setter方法，否则，所有发现的getter都可以作为getter方法。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">REQUIRE_SETTERS_FOR_GETTERS</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">        /******************************************************</span>
</span><span class="line"><span class="cm">        /* Generic output features</span>
</span><span class="line"><span class="cm">        /******************************************************</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 属性对应的值为null，是否需要写出来，write out。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="nd">@Deprecated</span>
</span><span class="line">        <span class="n">WRITE_NULL_PROPERTIES</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 特征决定是使用运行时动态类型，还是声明的静态类型。</span>
</span><span class="line"><span class="cm">         * 也可以使用{@link JsonSerialize#typing} 注解属性</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">USE_STATIC_TYPING</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定拥有view注解{@link org.codehaus.jackson.map.annotate.JsonView}的属性是否在JSON序列化视图中。如果true，则非注解视图，也包含；</span>
</span><span class="line"><span class="cm">         * 否则，它们将会被排除在外。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">DEFAULT_VIEW_INCLUSION</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 在JAVA中配置XML root{@XmlRootElement.name}注解,最后xml数据中会出现对应root根name.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">WRAP_ROOT_VALUE</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性对于最基础的生成器，使用默认pretty printer {@link org.codehaus.jackson.JsonGenerator#useDefaultPrettyPrinter}</span>
</span><span class="line"><span class="cm">         * 这只会对{@link org.codehaus.jackson.JsonGenerator}有影响.该属性值允许使用默认的实现。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">INDENT_OUTPUT</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 是否对属性使用排序，默认排序按照字母顺序。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">SORT_PROPERTIES_ALPHABETICALLY</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">        /******************************************************</span>
</span><span class="line"><span class="cm">        /*  Error handling features</span>
</span><span class="line"><span class="cm">        /******************************************************</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 是否允许一个类型没有注解表明打算被序列化。默认true，抛出一个异常；否则序列化一个空对象，比如没有任何属性。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * Note that empty types that this feature has only effect on</span>
</span><span class="line"><span class="cm">         * those &quot;empty&quot; beans that do not have any recognized annotations</span>
</span><span class="line"><span class="cm">         * (like &lt;code&gt;@JsonSerialize&lt;/code&gt;): ones that do have annotations</span>
</span><span class="line"><span class="cm">         * do not result in an exception being thrown.</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * @since 1.4</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">FAIL_ON_EMPTY_BEANS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 封装所有异常</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">WRAP_EXCEPTIONS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">        /******************************************************</span>
</span><span class="line"><span class="cm">        /* Output life cycle features</span>
</span><span class="line"><span class="cm">        /******************************************************</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">         <span class="cm">/**</span>
</span><span class="line"><span class="cm">          * 该特性决定序列化root级对象的实现closeable接口的close方法是否在序列化后被调用。</span>
</span><span class="line"><span class="cm">          * </span>
</span><span class="line"><span class="cm">          * 注意：如果true，则完成序列化后就关闭；如果，你可以在处理最后，调用排序操作等，则为false。</span>
</span><span class="line"><span class="cm">          * </span>
</span><span class="line"><span class="cm">          */</span>
</span><span class="line">        <span class="n">CLOSE_CLOSEABLE</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定是否在writeValue()方法之后就调用JsonGenerator.flush()方法。</span>
</span><span class="line"><span class="cm">         * 当我们需要先压缩，然后再flush，则可能需要false。</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">FLUSH_AFTER_WRITE_VALUE</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">        /******************************************************</span>
</span><span class="line"><span class="cm">        /* Data type - specific serialization configuration</span>
</span><span class="line"><span class="cm">        /******************************************************</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定是否将基于Date的值序列化为timestamp数字式的值，或者作为文本表示。</span>
</span><span class="line"><span class="cm">         * 如果文本表示，则实际格式化的时候会调用{@link #getDateFormat}方法。</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * 该特性可能会影响其他date相关类型的处理，虽然我们理想情况是只对date起作用。</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">WRITE_DATES_AS_TIMESTAMPS</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 是否将Map中得key为Date的值，也序列化为timestamps形式（否则，会被序列化为文本形式的值）。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">WRITE_DATE_KEYS_AS_TIMESTAMPS</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定怎样处理类型char[]序列化，是否序列化为一个显式的JSON数组，还是默认作为一个字符串。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 该特性决定对Enum 枚举值使用标准的序列化机制。如果true，则返回Enum.toString()值，否则为Enum.name()</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">WRITE_ENUMS_USING_TO_STRING</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 这个特性决定Java枚举值是否序列化为数字（true）或者文本值（false）.如果是值的话，则使用Enum.ordinal().</span>
</span><span class="line"><span class="cm">         * 该特性优先级高于上面的那个。</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * @since 1.9</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">WRITE_ENUMS_USING_INDEX</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 决定是否Map的带有null值的entry被序列化（true）</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">WRITE_NULL_MAP_VALUES</span><span class="o">(</span><span class="kc">true</span><span class="o">),</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 决定容器空的属性（声明为Collection或者array的值）是否被序列化为空的JSON数组（true），否则强制输出。</span>
</span><span class="line"><span class="cm">         *</span>
</span><span class="line"><span class="cm">         * Note that this does not change behavior of {@link java.util.Map}s, or</span>
</span><span class="line"><span class="cm">         * &quot;Collection-like&quot; types.</span>
</span><span class="line"><span class="cm">         * </span>
</span><span class="line"><span class="cm">         * @since 1.9</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">WRITE_EMPTY_JSON_ARRAYS</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">            <span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">_defaultState</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="kd">private</span> <span class="nf">Feature</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">defaultState</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">_defaultState</span> <span class="o">=</span> <span class="n">defaultState</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">enabledByDefault</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">_defaultState</span><span class="o">;</span> <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMask</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">ordinal</span><span class="o">());</span> <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idjsonparserjacksonjsona"><a id="JsonParser">Jackson解析JSON数据</a></h2>

<p>Jackson对外提供了多种解析json数据格式的方法，例如，<code>String context</code>、<code>Reader src</code>、<code>Url src</code>等，此外，对于Java POJO类型也提供了三种方式：<code>Class&lt;T&gt; valueType</code>和<code>TypeReference valueTypeRef</code>以及<code>JavaType valueType</code>。为了简单，这里分析通常应用最多的一种，即</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson解析JSON数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">readValue</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">valueType</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>readValue()</code>和其他解析方法一样，内部都是通过构造<code>_readMapAndClose(JsonParser jp, JavaType valueType)</code>方法所需要的参数，来调用解析JSON数据的。</p>

<p>首先，来看下如何构造方法的两个参数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson解析JSON数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">	<span class="kd">public</span> <span class="n">JsonParser</span> <span class="nf">createJsonParser</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonParseException</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">	<span class="c1">// true -&gt; we own the Reader (and must close); not a big deal（还记得上面的配置吗:)）</span>
</span><span class="line">	<span class="n">Reader</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringReader</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class="line">	<span class="k">return</span> <span class="nf">_createJsonParser</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">_createContext</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="kc">true</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 构造实际使用的parser的工厂方法。</span>
</span><span class="line">    <span class="c1">// _parserFeatures就是上面默认的属性int，collectDefaults()方法返回值。</span>
</span><span class="line">    <span class="c1">// _objectCodec：实现在JAVA对象和JSON内容之间的转换功能，没有默认，需要显式去设置。一般我们直接使用MappingJsonFactory构造。</span>
</span><span class="line">    <span class="kd">protected</span> <span class="n">JsonParser</span> <span class="nf">_createJsonParser</span><span class="o">(</span><span class="n">Reader</span> <span class="n">r</span><span class="o">,</span> <span class="n">IOContext</span> <span class="n">ctxt</span><span class="o">)</span>
</span><span class="line">	<span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonParseException</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">ReaderBasedParser</span><span class="o">(</span><span class="n">ctxt</span><span class="o">,</span> <span class="n">_parserFeatures</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">_objectCodec</span><span class="o">,</span>
</span><span class="line">                <span class="n">_rootCharSymbols</span><span class="o">.</span><span class="na">makeChild</span><span class="o">(</span><span class="n">isEnabled</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">CANONICALIZE_FIELD_NAMES</span><span class="o">),</span>
</span><span class="line">                    <span class="n">isEnabled</span><span class="o">(</span><span class="n">JsonParser</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">INTERN_FIELD_NAMES</span><span class="o">)));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 直接调用构造函数构造一个JsonParser实现类实例</span>
</span><span class="line">    <span class="kd">public</span> <span class="nf">ReaderBasedParser</span><span class="o">(</span><span class="n">IOContext</span> <span class="n">ioCtxt</span><span class="o">,</span> <span class="kt">int</span> <span class="n">features</span><span class="o">,</span> <span class="n">Reader</span> <span class="n">r</span><span class="o">,</span>
</span><span class="line">                             <span class="n">ObjectCodec</span> <span class="n">codec</span><span class="o">,</span> <span class="n">CharsToNameCanonicalizer</span> <span class="n">st</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">(</span><span class="n">ioCtxt</span><span class="o">,</span> <span class="n">features</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
</span><span class="line">        <span class="n">_objectCodec</span> <span class="o">=</span> <span class="n">codec</span><span class="o">;</span>
</span><span class="line">        <span class="n">_symbols</span> <span class="o">=</span> <span class="n">st</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在上面实现中，还可以看看<code>_createContext(r, true)</code>的实现，它会构造出一个<code>IOConetxt</code>对象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson解析JSON数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">	<span class="kd">public</span> <span class="nf">IOContext</span><span class="o">(</span><span class="n">BufferRecycler</span> <span class="n">br</span><span class="o">,</span> <span class="n">Object</span> <span class="n">sourceRef</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">managedResource</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="n">_bufferRecycler</span> <span class="o">=</span> <span class="n">br</span><span class="o">;</span>
</span><span class="line">        <span class="n">_sourceRef</span> <span class="o">=</span> <span class="n">sourceRef</span><span class="o">;</span>
</span><span class="line">        <span class="n">_managedResource</span> <span class="o">=</span> <span class="n">managedResource</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//  _recyclerRef 是一个定义全局的ThreadLocal&lt;SoftReference&lt;BufferRecycler&gt;&gt;</span>
</span><span class="line">     <span class="kd">public</span> <span class="n">BufferRecycler</span> <span class="nf">_getBufferRecycler</span><span class="o">()</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">BufferRecycler</span><span class="o">&gt;</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">_recyclerRef</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class="line">        <span class="n">BufferRecycler</span> <span class="n">br</span> <span class="o">=</span> <span class="o">(</span><span class="n">ref</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">ref</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">br</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferRecycler</span><span class="o">();</span>
</span><span class="line">            <span class="n">_recyclerRef</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">BufferRecycler</span><span class="o">&gt;(</span><span class="n">br</span><span class="o">));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">br</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>构造函数有三个参数，<code>managedResource</code>，我们在配置上讲过，Jackson对于外部的资源会默认自动关闭流，但是对<code>自己拥有的流Reader</code>，会自动关闭，无论设置与否。<code>Object sourceRef</code>参数其实就是我们通过<code>content</code>构造出来的Reader引用。<code>BufferRecycler br</code>这是一个很重要的参数，涉及到内存分配优化。</p>

<blockquote>
  <blockquote>
    <p>Note： <code>BufferRecycler</code>其实就是一个小的工具类，主要负责初始字节/字符缓存的重复使用。在Jackson中，主要用来通过引用该类的<code>SoftReference</code>形式作为<code>ThreadLocal</code>成员，这样可以达到低负载GC循环的效果，显然是使用流reader所期待的结果。
其主要定义四种类型缓存：</p>
  </blockquote>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson解析JSON数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">      <span class="kd">public</span> <span class="kd">enum</span> <span class="n">CharBufferType</span> <span class="o">{</span>
</span><span class="line">        <span class="n">TOKEN_BUFFER</span><span class="o">(</span><span class="mi">2000</span><span class="o">)</span> <span class="c1">// Tokenizable input</span>
</span><span class="line">            <span class="o">,</span><span class="n">CONCAT_BUFFER</span><span class="o">(</span><span class="mi">2000</span><span class="o">)</span> <span class="c1">// concatenated output</span>
</span><span class="line">            <span class="o">,</span><span class="n">TEXT_BUFFER</span><span class="o">(</span><span class="mi">200</span><span class="o">)</span> <span class="c1">// Text content from input</span>
</span><span class="line">            <span class="o">,</span><span class="n">NAME_COPY_BUFFER</span><span class="o">(</span><span class="mi">200</span><span class="o">)</span> <span class="c1">// Temporary buffer for getting name characters</span>
</span><span class="line">            <span class="o">;</span>
</span><span class="line">
</span><span class="line"> <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"> <span class="n">CharBufferType</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">size</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span> <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的<code>JsonParser</code>就完成的参数构造，接下来就是<code>JavaType</code>了，两种类型都最后调用<code>_constructType</code>来构造<code>JavaType</code>类型。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson解析JSON数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">	<span class="kd">public</span> <span class="n">JavaType</span> <span class="nf">constructType</span><span class="o">(</span><span class="n">Type</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">_constructType</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Factory method that can be used if type information is passed</span>
</span><span class="line"><span class="cm">     * as Java typing returned from &lt;code&gt;getGenericXxx&lt;/code&gt; methods</span>
</span><span class="line"><span class="cm">     * (usually for a return or argument type).</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">JavaType</span> <span class="nf">_constructType</span><span class="o">(</span><span class="n">Type</span> <span class="n">type</span><span class="o">,</span> <span class="n">TypeBindings</span> <span class="n">context</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="n">JavaType</span> <span class="n">resultType</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// simple class?</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="k">instanceof</span> <span class="n">Class</span><span class="o">&lt;?&gt;)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">cls</span> <span class="o">=</span> <span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;)</span> <span class="n">type</span><span class="o">;</span>
</span><span class="line">            <span class="cm">/* 24-Mar-2010, tatu: Better create context if one was not passed;</span>
</span><span class="line"><span class="cm">             *   mostly matters for root serialization types</span>
</span><span class="line"><span class="cm">             */</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">context</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TypeBindings</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">cls</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">resultType</span> <span class="o">=</span> <span class="n">_fromClass</span><span class="o">(</span><span class="n">cls</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="c1">// But if not, need to start resolving.</span>
</span><span class="line">        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">type</span> <span class="k">instanceof</span> <span class="n">ParameterizedType</span><span class="o">)</span> <span class="o">{</span><span class="c1">//带有参数化的类型，比如Collection&lt;String&gt;</span>
</span><span class="line">            <span class="n">resultType</span> <span class="o">=</span> <span class="n">_fromParamType</span><span class="o">((</span><span class="n">ParameterizedType</span><span class="o">)</span> <span class="n">type</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">type</span> <span class="k">instanceof</span> <span class="n">GenericArrayType</span><span class="o">)</span> <span class="o">{</span><span class="c1">//表示一个数组类型，成员有参数化类型或者type变量</span>
</span><span class="line">            <span class="n">resultType</span> <span class="o">=</span> <span class="n">_fromArrayType</span><span class="o">((</span><span class="n">GenericArrayType</span><span class="o">)</span> <span class="n">type</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">type</span> <span class="k">instanceof</span> <span class="n">TypeVariable</span><span class="o">&lt;?&gt;)</span> <span class="o">{</span><span class="c1">//其他类型的父接口</span>
</span><span class="line">            <span class="n">resultType</span> <span class="o">=</span> <span class="n">_fromVariable</span><span class="o">((</span><span class="n">TypeVariable</span><span class="o">&lt;?&gt;)</span> <span class="n">type</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">type</span> <span class="k">instanceof</span> <span class="n">WildcardType</span><span class="o">)</span> <span class="o">{</span><span class="c1">//通配符类型，比如? 或者 ? extends Number</span>
</span><span class="line">            <span class="n">resultType</span> <span class="o">=</span> <span class="n">_fromWildcard</span><span class="o">((</span><span class="n">WildcardType</span><span class="o">)</span> <span class="n">type</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// 最后类型都不符合，就会抛出非法参数异常Unrecognized Type</span>
</span><span class="line">          <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Unrecognized Type: &quot;</span><span class="o">+</span><span class="n">type</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="cm">/* </span>
</span><span class="line"><span class="cm">         * 目前只会被 simple types调用 (i.e. not for arrays, map or collections).</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">_modifiers</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">resultType</span><span class="o">.</span><span class="na">isContainerType</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="n">TypeModifier</span> <span class="n">mod</span> <span class="o">:</span> <span class="n">_modifiers</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">resultType</span> <span class="o">=</span> <span class="n">mod</span><span class="o">.</span><span class="na">modifyType</span><span class="o">(</span><span class="n">resultType</span><span class="o">,</span> <span class="n">type</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">resultType</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <blockquote>
    <p>代码逻辑很简单，就是通过对参数类型进行不同的处理构造，最后返回<code>JavaType</code>某一具体的实现类实例。和其他处理一样，一般都是从精确类型开始匹配，慢慢抽象。</p>
  </blockquote>
</blockquote>

<p>接下来，为了简单起见，我们不对非常用设置进行分析，看下面代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson解析JSON数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">	<span class="kd">protected</span> <span class="n">Object</span> <span class="nf">_readMapAndClose</span><span class="o">(</span><span class="n">JsonParser</span> <span class="n">jp</span><span class="o">,</span> <span class="n">JavaType</span> <span class="n">valueType</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonParseException</span><span class="o">,</span> <span class="n">JsonMappingException</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Object</span> <span class="n">result</span><span class="o">;</span>
</span><span class="line">            <span class="n">JsonToken</span> <span class="n">t</span> <span class="o">=</span> <span class="n">_initForReading</span><span class="o">(</span><span class="n">jp</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 省略一部分非重点代码。。。。。。</span>
</span><span class="line">
</span><span class="line">            	<span class="n">DeserializationConfig</span> <span class="n">cfg</span> <span class="o">=</span> <span class="n">copyDeserializationConfig</span><span class="o">();</span><span class="c1">//创建一个反序列化配置的副本，内部采用copy-on-write模式，所以使用副本。</span>
</span><span class="line">                <span class="n">DeserializationContext</span> <span class="n">ctxt</span> <span class="o">=</span> <span class="n">_createDeserializationContext</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">cfg</span><span class="o">);</span><span class="c1">//反序列化上下文</span>
</span><span class="line">                <span class="n">JsonDeserializer</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">deser</span> <span class="o">=</span> <span class="n">_findRootDeserializer</span><span class="o">(</span><span class="n">cfg</span><span class="o">,</span> <span class="n">valueType</span><span class="o">);</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="na">isEnabled</span><span class="o">(</span><span class="n">DeserializationConfig</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">UNWRAP_ROOT_VALUE</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">result</span> <span class="o">=</span> <span class="n">_unwrapAndDeserialize</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">valueType</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">,</span> <span class="n">deser</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">result</span> <span class="o">=</span> <span class="n">deser</span><span class="o">.</span><span class="na">deserialize</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// Need to consume the token too</span>
</span><span class="line">            <span class="n">jp</span><span class="o">.</span><span class="na">clearCurrentToken</span><span class="o">();</span>
</span><span class="line">            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">            <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                <span class="n">jp</span><span class="o">.</span><span class="na">close</span><span class="o">();</span><span class="c1">//关闭资源</span>
</span><span class="line">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上述代码中有几点重要的方法：</p>

<ul>
  <li><code>JsonToken _initForReading(JsonParser jp)</code>方法:</li>
</ul>

<p>该方法主要是在反序列化开始的时候，获取JsonToken标识。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson解析JSON数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">	<span class="kd">protected</span> <span class="n">JsonToken</span> <span class="nf">_initForReading</span><span class="o">(</span><span class="n">JsonParser</span> <span class="n">jp</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonParseException</span><span class="o">,</span> <span class="n">JsonMappingException</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="cm">/* 首先：必须只想一个token；没有token的情况只可以出现在第一次，和当前token被清除。</span>
</span><span class="line"><span class="cm">         * 此外，这里的JsonParser具体是指ReaderBaseParser实例，（还记得把String Reader处理吗？！）</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">JsonToken</span> <span class="n">t</span> <span class="o">=</span> <span class="n">jp</span><span class="o">.</span><span class="na">getCurrentToken</span><span class="o">();</span> <span class="c1">//内部使用了简单地缓存ConcurrentHashMap实现</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">t</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// and then we must get something...</span>
</span><span class="line">            <span class="n">t</span> <span class="o">=</span> <span class="n">jp</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span> <span class="c1">// 判断当前是什么类型的JSON标识，比如对象JSON刚开始为&quot;START_OBJECT&quot;</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">t</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="cm">/* [JACKSON-99] Should throw EOFException, closest thing</span>
</span><span class="line"><span class="cm">                 *   semantically</span>
</span><span class="line"><span class="cm">                 */</span>
</span><span class="line">                <span class="k">throw</span> <span class="k">new</span> <span class="nf">EOFException</span><span class="o">(</span><span class="s">&quot;No content to map to Object due to end of input&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">t</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>_findRootDeserializer(DeserializationConfig cfg, JavaType valueType)</code>方法：</li>
</ul>

<p>该方法在反序列化root-level值时调用。该方法使用了ConcurrentHashMap缓存来优化，只有root-level的反序列化才会被缓存，这主要是因为反序列化的输入和解决方案都是静态的，但是序列化却是动态的，所以做缓存只对反序列化。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson解析JSON数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"> 	<span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Method called to locate deserializer for the passed root-level value.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">protected</span> <span class="n">JsonDeserializer</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">_findRootDeserializer</span><span class="o">(</span><span class="n">DeserializationConfig</span> <span class="n">cfg</span><span class="o">,</span> <span class="n">JavaType</span> <span class="n">valueType</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">JsonMappingException</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="c1">// First: have we already seen it?</span>
</span><span class="line">        <span class="n">JsonDeserializer</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">deser</span> <span class="o">=</span> <span class="n">_rootDeserializers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">valueType</span><span class="o">);</span><span class="c1">//从缓存中获取对应类型的反序列化实例</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">deser</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">deser</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="c1">// Nope: need to ask provider to resolve it</span>
</span><span class="line">        <span class="n">deser</span> <span class="o">=</span> <span class="n">_deserializerProvider</span><span class="o">.</span><span class="na">findTypedValueDeserializer</span><span class="o">(</span><span class="n">cfg</span><span class="o">,</span> <span class="n">valueType</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span><span class="c1">//使用StdDeserializationContext默认的DeserializationContext实现。反序列化类实际上就是对某一类型进行详细描述，如下图。</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">deser</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// can this happen?</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nf">JsonMappingException</span><span class="o">(</span><span class="s">&quot;Can not find a deserializer for type &quot;</span><span class="o">+</span><span class="n">valueType</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">_rootDeserializers</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">valueType</span><span class="o">,</span> <span class="n">deser</span><span class="o">);</span><span class="c1">//放入缓存中</span>
</span><span class="line">        <span class="k">return</span> <span class="n">deser</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>反序列化类结构如图：<br />
<img src="http://kxcoder.github.io/images/2014/09/deser.png" /></p>

<ul>
  <li><code>deserialize(JsonParser jp, DeserializationContext ctxt)</code>方法:</li>
</ul>

<p>由于解析对象为简单地Bean，所以调用<code>BeanDeserializer</code>转换为POJO对象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson解析JSON数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"> <span class="kd">public</span> <span class="kd">final</span> <span class="n">Object</span> <span class="nf">deserialize</span><span class="o">(</span><span class="n">JsonParser</span> <span class="n">jp</span><span class="o">,</span> <span class="n">DeserializationContext</span> <span class="n">ctxt</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="n">JsonToken</span> <span class="n">t</span> <span class="o">=</span> <span class="n">jp</span><span class="o">.</span><span class="na">getCurrentToken</span><span class="o">();</span>
</span><span class="line">        <span class="c1">// common case first:</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">t</span> <span class="o">==</span> <span class="n">JsonToken</span><span class="o">.</span><span class="na">START_OBJECT</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">jp</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
</span><span class="line">            <span class="k">return</span> <span class="nf">deserializeFromObject</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="c1">// and then others, generally requiring use of @JsonCreator</span>
</span><span class="line">        <span class="k">switch</span> <span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">VALUE_STRING:</span>
</span><span class="line">            <span class="k">return</span> <span class="nf">deserializeFromString</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">VALUE_NUMBER_INT:</span>
</span><span class="line">            <span class="k">return</span> <span class="nf">deserializeFromNumber</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">VALUE_NUMBER_FLOAT:</span>
</span><span class="line">	    <span class="k">return</span> <span class="nf">deserializeFromDouble</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">VALUE_EMBEDDED_OBJECT:</span>
</span><span class="line">            <span class="k">return</span> <span class="n">jp</span><span class="o">.</span><span class="na">getEmbeddedObject</span><span class="o">();</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">VALUE_TRUE:</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">VALUE_FALSE:</span>
</span><span class="line">            <span class="k">return</span> <span class="nf">deserializeFromBoolean</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">START_ARRAY:</span>
</span><span class="line">            <span class="c1">// these only work if there&#39;s a (delegating) creator...</span>
</span><span class="line">            <span class="k">return</span> <span class="nf">deserializeFromArray</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">FIELD_NAME:</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">END_OBJECT:</span> <span class="c1">// added to resolve [JACKSON-319], possible related issues</span>
</span><span class="line">            <span class="k">return</span> <span class="nf">deserializeFromObject</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">        <span class="k">throw</span> <span class="n">ctxt</span><span class="o">.</span><span class="na">mappingException</span><span class="o">(</span><span class="n">getBeanClass</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面是具体的反序列化方法,如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson解析JSON数据 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">deserializeFromObject</span><span class="o">(</span><span class="n">JsonParser</span> <span class="n">jp</span><span class="o">,</span> <span class="n">DeserializationContext</span> <span class="n">ctxt</span><span class="o">)</span>
</span><span class="line">        <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">JsonProcessingException</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">_nonStandardCreation</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">_unwrappedPropertyHandler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="nf">deserializeWithUnwrapped</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">_externalTypeIdHandler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="nf">deserializeWithExternalTypeId</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">return</span> <span class="nf">deserializeFromObjectUsingNonDefault</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">final</span> <span class="n">Object</span> <span class="n">bean</span> <span class="o">=</span> <span class="n">_valueInstantiator</span><span class="o">.</span><span class="na">createUsingDefault</span><span class="o">();</span><span class="c1">// 构造一个默认的初始化类型对象，对象属性值使用初始化默认值。</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">_injectables</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">injectValues</span><span class="o">(</span><span class="n">ctxt</span><span class="o">,</span> <span class="n">bean</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(;</span> <span class="n">jp</span><span class="o">.</span><span class="na">getCurrentToken</span><span class="o">()</span> <span class="o">!=</span> <span class="n">JsonToken</span><span class="o">.</span><span class="na">END_OBJECT</span><span class="o">;</span> <span class="n">jp</span><span class="o">.</span><span class="na">nextToken</span><span class="o">())</span> <span class="o">{</span> <span class="c1">//迭代输入流来设置各个属性的值</span>
</span><span class="line">            <span class="n">String</span> <span class="n">propName</span> <span class="o">=</span> <span class="n">jp</span><span class="o">.</span><span class="na">getCurrentName</span><span class="o">();</span>
</span><span class="line">            <span class="c1">// Skip field name:</span>
</span><span class="line">            <span class="n">jp</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span><span class="c1">// 迭代到下一个输入流的token名字，即使在POJO中没有对应属性，则会调用_handleUnknown来处理。</span>
</span><span class="line">            <span class="n">SettableBeanProperty</span> <span class="n">prop</span> <span class="o">=</span> <span class="n">_beanProperties</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">propName</span><span class="o">);</span> <span class="c1">//具体实现如下</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">prop</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 如果在POJO中有对应属性，则返回kv</span>
</span><span class="line">                <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">prop</span><span class="o">.</span><span class="na">deserializeAndSet</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">,</span> <span class="n">bean</span><span class="o">);</span><span class="c1">//根据类型调用具体的方法设置属性值，比如StringDeserializer类对字符串。</span>
</span><span class="line">                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">wrapAndThrow</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">bean</span><span class="o">,</span> <span class="n">propName</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="k">continue</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">_handleUnknown</span><span class="o">(</span><span class="n">jp</span><span class="o">,</span> <span class="n">ctxt</span><span class="o">,</span> <span class="n">bean</span><span class="o">,</span> <span class="n">propName</span><span class="o">);</span><span class="c1">//这里会根据上面的配置来决定处理方案</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">bean</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// BeanPropertyMap类是一个存储属性名到SettableBeanProperty实例之间的映射的工具类。该类主要代替HashMap，做了一些业务优化。</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">SettableBeanProperty</span> <span class="nf">find</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">_hashMask</span><span class="o">;</span><span class="c1">//hash找到bucket位置</span>
</span><span class="line">        <span class="n">Bucket</span> <span class="n">bucket</span> <span class="o">=</span> <span class="n">_buckets</span><span class="o">[</span><span class="n">index</span><span class="o">];</span><span class="c1">//</span>
</span><span class="line">        <span class="c1">// Let&#39;s unroll first lookup since that is null or match in 90+% cases</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">bucket</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span><span class="c1">//如果不存在，则返回null</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="c1">// Primarily we do just identity comparison as keys should be interned</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">bucket</span><span class="o">.</span><span class="na">key</span> <span class="o">==</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 当没有hash碰撞时，则会相等</span>
</span><span class="line">            <span class="k">return</span> <span class="n">bucket</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">while</span> <span class="o">((</span><span class="n">bucket</span> <span class="o">=</span> <span class="n">bucket</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span><span class="c1">//不能直接相等，则遍历找到bucket里面所有的key</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">bucket</span><span class="o">.</span><span class="na">key</span> <span class="o">==</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="n">bucket</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="c1">// Do we need fallback for non-interned Strings?</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">_findWithEquals</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="a-idjsondeserializerjacksonjavaa"><a id="JsonDeserializer">Jackson序列化Java对象</a></h2>
<p><code>Jackson</code>工具包对外提供看好几种序列化接口，比如转换为String对象，Byte[]数组，或者直接写到stream中等等，但是不管如何，其内部实现的核心方法都是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Jackson序列化Java对象 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">_configAndWriteValue</span><span class="o">(</span><span class="n">JsonGenerator</span> <span class="n">jgen</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因此，这里就选择常用的<code>writeValueAsString(Object value)</code>来解析器内部实现。</p>

<blockquote>
  <blockquote>
    <p>Note：虽然在<code>Jackson</code>中提供了<code>public void writeValue(Writer w, Object value)</code>的通用方法来序列化java对象，对于需要转换为String类型的需求，只需要<code>StringWriter</code>就可以调用writeValue，但是由于这种序列化对性能要求高，并且使用频繁，所以单独提供更高效的实现方式。而正由于在项目代码中AsString 场景十分多，所以这里选择<code>writeValueAsString</code>方法分析。</p>
  </blockquote>
</blockquote>

<h3 id="section-1">序列化方法处理流程</h3>

<p><code>writeValueAsString(Object value)</code>其处理和反序列化很相似，基本流程为：</p>

<ol>
  <li><em>首先，构建通用序列化基础方法所需要的参数类型对象；</em></li>
  <li><em>其次，对序列化类型进行分析，根据注解或者”get方法名(比如getXxx,isXxx)”等来构建需要序列化的属性</em></li>
  <li><em>然后，通过反射机制分别对所有的序列化属性进行处理：通过发现拿到对应的值,getxxx方法等</em></li>
  <li><em>拼接字符串：其内部是根据类型写入一些开始结束符号，例如{,[等，在其中嵌入步骤3的解析设值</em></li>
  <li><em>返回最后得到的字符串内容</em></li>
</ol>

]]></content>
  </entry>
  
</feed>
